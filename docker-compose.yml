version: "3"

# to run testnet for the first time, or first time since changes have been made:
#   $ docker-compose build
#   $ docker-compose up
#   or
#   $ docker-compose up --build
# to run built testnet again
#   $ docker-compose up
# to remove testnet
#   $ docker-compose down

services:

  # to open a terminal inside the test node use the command:
  #   $ docker-compose exec dualitytester /bin/bash
  # from there you can use commands with the test keys such as when sending a Msg to dualitynode0:
  #   $ dualityd tx dex single-deposit --from alice --keyring-backend test --node tcp://dualitynode0:26657 [...args]
  # and an example with arguments (note that the token amounts are specified in tokens not Î¼tokens):
  #   $ dualityd tx dex single-deposit --from alice --keyring-backend test --node tcp://dualitynode0:26657 token stake 2000 0.01 0.0000000000000001 0.0000000000000001 cosmos1ja2nyfhyyyxam5qhll8g7wwy5km0stuwrl949a
  # you can check that this transaction has synced across the nodes by querying another node before and after the Msg
  #   $ dualityd query tx --node tcp://dualitynode1:26657 [txhash]
  # you can also add the test accounts (created in Dockerfile-testnets) into your Keplr wallet
  # using the mnemonics generated (printed in dualitytester container startup command)
  # although using this directly in the browser appears to cause a signing error(?),
  # you can use Keplr to transfer tokens to another permenantly setup wallet and use that to make Msgs against the testnet.
  dualitytester:
    container_name: dualitytester
    build:
      context: .
      dockerfile: Dockerfile-testnet
      target: commonconfig
    command: >
      /bin/sh -c "
        # print out test keys before running test node
        echo \"test keys:\";
        jq -s . /root/.duality/testkeys/*;
        # keep container running
        tail -f /dev/null;
      "
    environment:
      - DEBUG=1
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    volumes:
      - go-modules:/go/pkg/mod
    networks:
      localnet:
        ipv4_address: 192.168.10.2

  dualitynode0:
    container_name: dualitynode0
    build:
      context: .
      dockerfile: Dockerfile-testnet
      args:
        NODE_ID: 0
    command: --log_level $LOG_LEVEL
    environment:
      - DEBUG=1
      - ID=0
      - LOG=${LOG:-simd.log}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    ports:
      - "26656-26657:26656-26657"
      - "1317:1317"
      - "9090:9090"
      - "2345:2345"
    volumes:
      - go-modules:/go/pkg/mod
    networks:
      localnet:
        ipv4_address: 192.168.10.10

  dualitynode1:
    container_name: dualitynode1
    build:
      context: .
      dockerfile: Dockerfile-testnet
      args:
        NODE_ID: 1
    command: --log_level $LOG_LEVEL
    environment:
      - DEBUG=0
      - ID=1
      - LOG=${LOG:-simd.log}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    ports:
      - "26666-26667:26656-26657"
      - "1318:1317"
      - "9091:9090"
      - "2346:2345"
    volumes:
      - go-modules:/go/pkg/mod
    networks:
      localnet:
        ipv4_address: 192.168.10.11

  dualitynode2:
    container_name: dualitynode2
    build:
      context: .
      dockerfile: Dockerfile-testnet
      args:
        NODE_ID: 2
    command: --log_level $LOG_LEVEL
    environment:
      - DEBUG=0
      - ID=2
      - LOG=${LOG:-simd.log}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    ports:
      - "26676-26677:26656-26657"
      - "1319:1317"
      - "9092:9090"
      - "2347:2345"
    volumes:
      - go-modules:/go/pkg/mod
    networks:
      localnet:
        ipv4_address: 192.168.10.12

  dualitynode3:
    container_name: dualitynode3
    build:
      context: .
      dockerfile: Dockerfile-testnet
      args:
        NODE_ID: 3
    command: --log_level $LOG_LEVEL
    environment:
      - DEBUG=0
      - ID=3
      - LOG=${LOG:-simd.log}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    ports:
      - "26686-26687:26656-26657"
      - "1320:1317"
      - "9093:9090"
      - "2348:2345"
    volumes:
      - go-modules:/go/pkg/mod
    networks:
      localnet:
        ipv4_address: 192.168.10.13

networks:
  localnet:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.10.0/25

# this Docker volume space can be reclaimed using:
#   $ docker volume rm go-modules
volumes:
  go-modules: # Cached Go module dependencies are stored here
