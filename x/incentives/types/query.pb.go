// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: duality/incentives/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GaugeStatus int32

const (
	GaugeStatus_ACTIVE_UPCOMING GaugeStatus = 0
	GaugeStatus_ACTIVE          GaugeStatus = 1
	GaugeStatus_UPCOMING        GaugeStatus = 2
	GaugeStatus_FINISHED        GaugeStatus = 3
)

var GaugeStatus_name = map[int32]string{
	0: "ACTIVE_UPCOMING",
	1: "ACTIVE",
	2: "UPCOMING",
	3: "FINISHED",
}

var GaugeStatus_value = map[string]int32{
	"ACTIVE_UPCOMING": 0,
	"ACTIVE":          1,
	"UPCOMING":        2,
	"FINISHED":        3,
}

func (x GaugeStatus) String() string {
	return proto.EnumName(GaugeStatus_name, int32(x))
}

func (GaugeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{0}
}

type GetModuleStatusRequest struct {
}

func (m *GetModuleStatusRequest) Reset()         { *m = GetModuleStatusRequest{} }
func (m *GetModuleStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetModuleStatusRequest) ProtoMessage()    {}
func (*GetModuleStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{0}
}
func (m *GetModuleStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetModuleStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetModuleStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetModuleStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetModuleStatusRequest.Merge(m, src)
}
func (m *GetModuleStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetModuleStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetModuleStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetModuleStatusRequest proto.InternalMessageInfo

type GetModuleStatusResponse struct {
	// Coins that have yet to be distributed
	RewardCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=reward_coins,json=rewardCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward_coins"`
	StakedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=staked_coins,json=stakedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"staked_coins"`
	Params      Params                                   `protobuf:"bytes,3,opt,name=params,proto3" json:"params"`
}

func (m *GetModuleStatusResponse) Reset()         { *m = GetModuleStatusResponse{} }
func (m *GetModuleStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetModuleStatusResponse) ProtoMessage()    {}
func (*GetModuleStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{1}
}
func (m *GetModuleStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetModuleStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetModuleStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetModuleStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetModuleStatusResponse.Merge(m, src)
}
func (m *GetModuleStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetModuleStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetModuleStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetModuleStatusResponse proto.InternalMessageInfo

func (m *GetModuleStatusResponse) GetRewardCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RewardCoins
	}
	return nil
}

func (m *GetModuleStatusResponse) GetStakedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.StakedCoins
	}
	return nil
}

func (m *GetModuleStatusResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type GetGaugeByIDRequest struct {
	// Gague ID being queried
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetGaugeByIDRequest) Reset()         { *m = GetGaugeByIDRequest{} }
func (m *GetGaugeByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetGaugeByIDRequest) ProtoMessage()    {}
func (*GetGaugeByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{2}
}
func (m *GetGaugeByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGaugeByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGaugeByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGaugeByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGaugeByIDRequest.Merge(m, src)
}
func (m *GetGaugeByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetGaugeByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGaugeByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGaugeByIDRequest proto.InternalMessageInfo

func (m *GetGaugeByIDRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetGaugeByIDResponse struct {
	// Gauge that corresponds to provided gague ID
	Gauge *Gauge `protobuf:"bytes,1,opt,name=gauge,proto3" json:"gauge,omitempty"`
}

func (m *GetGaugeByIDResponse) Reset()         { *m = GetGaugeByIDResponse{} }
func (m *GetGaugeByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetGaugeByIDResponse) ProtoMessage()    {}
func (*GetGaugeByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{3}
}
func (m *GetGaugeByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGaugeByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGaugeByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGaugeByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGaugeByIDResponse.Merge(m, src)
}
func (m *GetGaugeByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetGaugeByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGaugeByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGaugeByIDResponse proto.InternalMessageInfo

func (m *GetGaugeByIDResponse) GetGauge() *Gauge {
	if m != nil {
		return m.Gauge
	}
	return nil
}

type GetGaugeQualifyingValueRequest struct {
	// Gague ID being queried
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetGaugeQualifyingValueRequest) Reset()         { *m = GetGaugeQualifyingValueRequest{} }
func (m *GetGaugeQualifyingValueRequest) String() string { return proto.CompactTextString(m) }
func (*GetGaugeQualifyingValueRequest) ProtoMessage()    {}
func (*GetGaugeQualifyingValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{4}
}
func (m *GetGaugeQualifyingValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGaugeQualifyingValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGaugeQualifyingValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGaugeQualifyingValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGaugeQualifyingValueRequest.Merge(m, src)
}
func (m *GetGaugeQualifyingValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetGaugeQualifyingValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGaugeQualifyingValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGaugeQualifyingValueRequest proto.InternalMessageInfo

func (m *GetGaugeQualifyingValueRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetGaugeQualifyingValueResponse struct {
	// The amount of value at the gauge's pricing tick currently qualifying for the gauge.
	QualifyingValue uint64 `protobuf:"varint,1,opt,name=qualifying_value,json=qualifyingValue,proto3" json:"qualifying_value,omitempty"`
}

func (m *GetGaugeQualifyingValueResponse) Reset()         { *m = GetGaugeQualifyingValueResponse{} }
func (m *GetGaugeQualifyingValueResponse) String() string { return proto.CompactTextString(m) }
func (*GetGaugeQualifyingValueResponse) ProtoMessage()    {}
func (*GetGaugeQualifyingValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{5}
}
func (m *GetGaugeQualifyingValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGaugeQualifyingValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGaugeQualifyingValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGaugeQualifyingValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGaugeQualifyingValueResponse.Merge(m, src)
}
func (m *GetGaugeQualifyingValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetGaugeQualifyingValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGaugeQualifyingValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGaugeQualifyingValueResponse proto.InternalMessageInfo

func (m *GetGaugeQualifyingValueResponse) GetQualifyingValue() uint64 {
	if m != nil {
		return m.QualifyingValue
	}
	return 0
}

type GetGaugesRequest struct {
	Status GaugeStatus `protobuf:"varint,1,opt,name=status,proto3,enum=duality.incentives.GaugeStatus" json:"status,omitempty"`
	Denom  string      `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetGaugesRequest) Reset()         { *m = GetGaugesRequest{} }
func (m *GetGaugesRequest) String() string { return proto.CompactTextString(m) }
func (*GetGaugesRequest) ProtoMessage()    {}
func (*GetGaugesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{6}
}
func (m *GetGaugesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGaugesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGaugesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGaugesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGaugesRequest.Merge(m, src)
}
func (m *GetGaugesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetGaugesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGaugesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGaugesRequest proto.InternalMessageInfo

func (m *GetGaugesRequest) GetStatus() GaugeStatus {
	if m != nil {
		return m.Status
	}
	return GaugeStatus_ACTIVE_UPCOMING
}

func (m *GetGaugesRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type GetGaugesResponse struct {
	// Upcoming and active gauges
	Gauges []*Gauge `protobuf:"bytes,1,rep,name=gauges,proto3" json:"gauges,omitempty"`
}

func (m *GetGaugesResponse) Reset()         { *m = GetGaugesResponse{} }
func (m *GetGaugesResponse) String() string { return proto.CompactTextString(m) }
func (*GetGaugesResponse) ProtoMessage()    {}
func (*GetGaugesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{7}
}
func (m *GetGaugesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGaugesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGaugesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGaugesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGaugesResponse.Merge(m, src)
}
func (m *GetGaugesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetGaugesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGaugesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGaugesResponse proto.InternalMessageInfo

func (m *GetGaugesResponse) GetGauges() []*Gauge {
	if m != nil {
		return m.Gauges
	}
	return nil
}

type GetStakeByIDRequest struct {
	StakeId uint64 `protobuf:"varint,1,opt,name=stake_id,json=stakeId,proto3" json:"stake_id,omitempty"`
}

func (m *GetStakeByIDRequest) Reset()         { *m = GetStakeByIDRequest{} }
func (m *GetStakeByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetStakeByIDRequest) ProtoMessage()    {}
func (*GetStakeByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{8}
}
func (m *GetStakeByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeByIDRequest.Merge(m, src)
}
func (m *GetStakeByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeByIDRequest proto.InternalMessageInfo

func (m *GetStakeByIDRequest) GetStakeId() uint64 {
	if m != nil {
		return m.StakeId
	}
	return 0
}

type GetStakeByIDResponse struct {
	Stake *Stake `protobuf:"bytes,1,opt,name=stake,proto3" json:"stake,omitempty"`
}

func (m *GetStakeByIDResponse) Reset()         { *m = GetStakeByIDResponse{} }
func (m *GetStakeByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetStakeByIDResponse) ProtoMessage()    {}
func (*GetStakeByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{9}
}
func (m *GetStakeByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeByIDResponse.Merge(m, src)
}
func (m *GetStakeByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeByIDResponse proto.InternalMessageInfo

func (m *GetStakeByIDResponse) GetStake() *Stake {
	if m != nil {
		return m.Stake
	}
	return nil
}

type GetStakesRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *GetStakesRequest) Reset()         { *m = GetStakesRequest{} }
func (m *GetStakesRequest) String() string { return proto.CompactTextString(m) }
func (*GetStakesRequest) ProtoMessage()    {}
func (*GetStakesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{10}
}
func (m *GetStakesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakesRequest.Merge(m, src)
}
func (m *GetStakesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStakesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakesRequest proto.InternalMessageInfo

func (m *GetStakesRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type GetStakesResponse struct {
	Stakes []*Stake `protobuf:"bytes,1,rep,name=stakes,proto3" json:"stakes,omitempty"`
}

func (m *GetStakesResponse) Reset()         { *m = GetStakesResponse{} }
func (m *GetStakesResponse) String() string { return proto.CompactTextString(m) }
func (*GetStakesResponse) ProtoMessage()    {}
func (*GetStakesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{11}
}
func (m *GetStakesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakesResponse.Merge(m, src)
}
func (m *GetStakesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStakesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakesResponse proto.InternalMessageInfo

func (m *GetStakesResponse) GetStakes() []*Stake {
	if m != nil {
		return m.Stakes
	}
	return nil
}

type GetFutureRewardEstimateRequest struct {
	// Address that is being queried for future estimated rewards
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	// Stake IDs included in future reward estimation
	StakeIds []uint64 `protobuf:"varint,2,rep,packed,name=stake_ids,json=stakeIds,proto3" json:"stake_ids,omitempty"`
	// Determines upper time limit of reward estimation
	// reward estimation goes up to current_epoch + num_epochs
	NumEpochs int64 `protobuf:"varint,3,opt,name=num_epochs,json=numEpochs,proto3" json:"num_epochs,omitempty"`
}

func (m *GetFutureRewardEstimateRequest) Reset()         { *m = GetFutureRewardEstimateRequest{} }
func (m *GetFutureRewardEstimateRequest) String() string { return proto.CompactTextString(m) }
func (*GetFutureRewardEstimateRequest) ProtoMessage()    {}
func (*GetFutureRewardEstimateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{12}
}
func (m *GetFutureRewardEstimateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFutureRewardEstimateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFutureRewardEstimateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFutureRewardEstimateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFutureRewardEstimateRequest.Merge(m, src)
}
func (m *GetFutureRewardEstimateRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFutureRewardEstimateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFutureRewardEstimateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFutureRewardEstimateRequest proto.InternalMessageInfo

func (m *GetFutureRewardEstimateRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *GetFutureRewardEstimateRequest) GetStakeIds() []uint64 {
	if m != nil {
		return m.StakeIds
	}
	return nil
}

func (m *GetFutureRewardEstimateRequest) GetNumEpochs() int64 {
	if m != nil {
		return m.NumEpochs
	}
	return 0
}

type GetFutureRewardEstimateResponse struct {
	// Estimated coin rewards that will be recieved at provided address
	// from specified locks between current time and end epoch
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *GetFutureRewardEstimateResponse) Reset()         { *m = GetFutureRewardEstimateResponse{} }
func (m *GetFutureRewardEstimateResponse) String() string { return proto.CompactTextString(m) }
func (*GetFutureRewardEstimateResponse) ProtoMessage()    {}
func (*GetFutureRewardEstimateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{13}
}
func (m *GetFutureRewardEstimateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFutureRewardEstimateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFutureRewardEstimateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFutureRewardEstimateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFutureRewardEstimateResponse.Merge(m, src)
}
func (m *GetFutureRewardEstimateResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFutureRewardEstimateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFutureRewardEstimateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFutureRewardEstimateResponse proto.InternalMessageInfo

func (m *GetFutureRewardEstimateResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type GetAccountHistoryRequest struct {
	// Address that is being queried for account history
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty" yaml:"account"`
}

func (m *GetAccountHistoryRequest) Reset()         { *m = GetAccountHistoryRequest{} }
func (m *GetAccountHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccountHistoryRequest) ProtoMessage()    {}
func (*GetAccountHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{14}
}
func (m *GetAccountHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountHistoryRequest.Merge(m, src)
}
func (m *GetAccountHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountHistoryRequest proto.InternalMessageInfo

func (m *GetAccountHistoryRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type GetAccountHistoryResponse struct {
	// Gauge rewards that have been distributed to this address to date
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *GetAccountHistoryResponse) Reset()         { *m = GetAccountHistoryResponse{} }
func (m *GetAccountHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccountHistoryResponse) ProtoMessage()    {}
func (*GetAccountHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{15}
}
func (m *GetAccountHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountHistoryResponse.Merge(m, src)
}
func (m *GetAccountHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountHistoryResponse proto.InternalMessageInfo

func (m *GetAccountHistoryResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func init() {
	proto.RegisterEnum("duality.incentives.GaugeStatus", GaugeStatus_name, GaugeStatus_value)
	proto.RegisterType((*GetModuleStatusRequest)(nil), "duality.incentives.GetModuleStatusRequest")
	proto.RegisterType((*GetModuleStatusResponse)(nil), "duality.incentives.GetModuleStatusResponse")
	proto.RegisterType((*GetGaugeByIDRequest)(nil), "duality.incentives.GetGaugeByIDRequest")
	proto.RegisterType((*GetGaugeByIDResponse)(nil), "duality.incentives.GetGaugeByIDResponse")
	proto.RegisterType((*GetGaugeQualifyingValueRequest)(nil), "duality.incentives.GetGaugeQualifyingValueRequest")
	proto.RegisterType((*GetGaugeQualifyingValueResponse)(nil), "duality.incentives.GetGaugeQualifyingValueResponse")
	proto.RegisterType((*GetGaugesRequest)(nil), "duality.incentives.GetGaugesRequest")
	proto.RegisterType((*GetGaugesResponse)(nil), "duality.incentives.GetGaugesResponse")
	proto.RegisterType((*GetStakeByIDRequest)(nil), "duality.incentives.GetStakeByIDRequest")
	proto.RegisterType((*GetStakeByIDResponse)(nil), "duality.incentives.GetStakeByIDResponse")
	proto.RegisterType((*GetStakesRequest)(nil), "duality.incentives.GetStakesRequest")
	proto.RegisterType((*GetStakesResponse)(nil), "duality.incentives.GetStakesResponse")
	proto.RegisterType((*GetFutureRewardEstimateRequest)(nil), "duality.incentives.GetFutureRewardEstimateRequest")
	proto.RegisterType((*GetFutureRewardEstimateResponse)(nil), "duality.incentives.GetFutureRewardEstimateResponse")
	proto.RegisterType((*GetAccountHistoryRequest)(nil), "duality.incentives.GetAccountHistoryRequest")
	proto.RegisterType((*GetAccountHistoryResponse)(nil), "duality.incentives.GetAccountHistoryResponse")
}

func init() { proto.RegisterFile("duality/incentives/query.proto", fileDescriptor_27b4715672276428) }

var fileDescriptor_27b4715672276428 = []byte{
	// 1075 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x4f, 0x1b, 0xc7,
	0x1b, 0x66, 0xcd, 0x9f, 0xe0, 0x01, 0x81, 0x7f, 0x13, 0xf4, 0xab, 0x71, 0x53, 0x1b, 0x8d, 0x42,
	0x31, 0x24, 0x78, 0xc1, 0x51, 0x95, 0x2a, 0x55, 0x0e, 0x31, 0x01, 0xe3, 0x2a, 0x49, 0x93, 0xa5,
	0xcd, 0xa1, 0x97, 0xd5, 0xd8, 0x9e, 0x2c, 0xab, 0xd8, 0x3b, 0xc6, 0x33, 0x4b, 0x6a, 0x51, 0x7a,
	0xa8, 0xf2, 0x01, 0xa2, 0xf6, 0x56, 0xa9, 0x5f, 0xa0, 0x97, 0x1e, 0xfa, 0x21, 0x9a, 0x63, 0xa4,
	0x5e, 0x7a, 0xa2, 0x15, 0xf4, 0x13, 0xe4, 0x13, 0x54, 0xfb, 0xce, 0xac, 0xb1, 0x61, 0x77, 0x21,
	0x87, 0xf4, 0x64, 0xef, 0xbc, 0xff, 0x9e, 0xf7, 0x79, 0x67, 0x9e, 0x19, 0x94, 0x6f, 0xfa, 0xb4,
	0xe5, 0xca, 0x9e, 0xe9, 0x7a, 0x0d, 0xe6, 0x49, 0x77, 0x9f, 0x09, 0x73, 0xcf, 0x67, 0xdd, 0x5e,
	0xa9, 0xd3, 0xe5, 0x92, 0x63, 0xac, 0xed, 0xa5, 0x53, 0x7b, 0x6e, 0xce, 0xe1, 0x0e, 0x07, 0xb3,
	0x19, 0xfc, 0x53, 0x9e, 0xb9, 0x6b, 0x0e, 0xe7, 0x4e, 0x8b, 0x99, 0xb4, 0xe3, 0x9a, 0xd4, 0xf3,
	0xb8, 0xa4, 0xd2, 0xe5, 0x9e, 0xd0, 0xd6, 0x7c, 0x83, 0x8b, 0x36, 0x17, 0x66, 0x9d, 0x0a, 0x66,
	0xee, 0xaf, 0xd7, 0x99, 0xa4, 0xeb, 0x66, 0x83, 0xbb, 0x9e, 0xb6, 0xaf, 0x0c, 0xda, 0x01, 0x40,
	0xdf, 0xab, 0x43, 0x1d, 0xd7, 0x83, 0x64, 0x61, 0xae, 0x08, 0xcc, 0x0e, 0xf5, 0x1d, 0x96, 0x60,
	0x17, 0x92, 0x3e, 0x0f, 0xed, 0x85, 0x08, 0x7b, 0x87, 0x76, 0x69, 0x5b, 0x83, 0x25, 0x59, 0xf4,
	0xff, 0x2a, 0x93, 0x0f, 0x79, 0xd3, 0x6f, 0xb1, 0x1d, 0x49, 0xa5, 0x2f, 0x2c, 0xb6, 0xe7, 0x33,
	0x21, 0xc9, 0x6f, 0x29, 0xf4, 0xc1, 0x39, 0x93, 0xe8, 0x70, 0x4f, 0x30, 0xec, 0xa1, 0xe9, 0x2e,
	0x7b, 0x41, 0xbb, 0x4d, 0x3b, 0xe8, 0x4b, 0x64, 0x8d, 0x85, 0xd1, 0xe2, 0x54, 0x79, 0xbe, 0xa4,
	0x3a, 0x2b, 0x05, 0x9d, 0x95, 0x74, 0x4f, 0xa5, 0x0d, 0xee, 0x7a, 0x95, 0xb5, 0xd7, 0x47, 0x85,
	0x91, 0x5f, 0xfe, 0x2a, 0x14, 0x1d, 0x57, 0xee, 0xfa, 0xf5, 0x52, 0x83, 0xb7, 0x4d, 0x4d, 0x83,
	0xfa, 0x59, 0x15, 0xcd, 0xe7, 0xa6, 0xec, 0x75, 0x98, 0x80, 0x00, 0x61, 0x4d, 0xa9, 0x02, 0xf0,
	0x11, 0xd4, 0x83, 0xae, 0xc2, 0x7a, 0xa9, 0xf7, 0x50, 0x4f, 0x15, 0x50, 0xf5, 0x3e, 0x45, 0x13,
	0x8a, 0xa5, 0xec, 0xe8, 0x82, 0x51, 0x9c, 0x2a, 0xe7, 0x4a, 0xe7, 0xf7, 0x46, 0xe9, 0x31, 0x78,
	0x54, 0xc6, 0x82, 0x52, 0x96, 0xf6, 0x27, 0x8b, 0xe8, 0x6a, 0x95, 0xc9, 0x6a, 0x30, 0xa2, 0x4a,
	0xaf, 0x76, 0x5f, 0x93, 0x89, 0x67, 0x50, 0xca, 0x6d, 0x66, 0x8d, 0x05, 0xa3, 0x38, 0x66, 0xa5,
	0xdc, 0x26, 0xa9, 0xa2, 0xb9, 0x61, 0x37, 0x4d, 0xac, 0x89, 0xc6, 0x61, 0xbc, 0xe0, 0x1a, 0x74,
	0x18, 0x51, 0x17, 0xa2, 0x2c, 0xe5, 0x47, 0xd6, 0x50, 0x3e, 0x4c, 0xf4, 0x24, 0x70, 0x7d, 0xd6,
	0x73, 0x3d, 0xe7, 0x29, 0x6d, 0xf9, 0x2c, 0xae, 0xf4, 0x03, 0x54, 0x88, 0x8d, 0xd0, 0x28, 0x96,
	0x51, 0x66, 0xaf, 0x6f, 0xb2, 0xf7, 0x03, 0x9b, 0x4e, 0x30, 0xbb, 0x37, 0x1c, 0x42, 0x28, 0xca,
	0x84, 0xd9, 0xc2, 0x9d, 0x83, 0x6f, 0xa3, 0x09, 0x01, 0xfb, 0x05, 0x82, 0x66, 0xca, 0x85, 0xd8,
	0x2e, 0xf4, 0xb6, 0xd2, 0xee, 0x78, 0x0e, 0x8d, 0x37, 0x99, 0xc7, 0xdb, 0xd9, 0xd4, 0x82, 0x51,
	0x4c, 0x5b, 0xea, 0x83, 0x6c, 0xa1, 0xff, 0x0d, 0x94, 0xd0, 0x10, 0xd7, 0xd1, 0x04, 0x10, 0x70,
	0xba, 0xf7, 0x62, 0x99, 0xd2, 0x8e, 0x64, 0x0d, 0x46, 0xb3, 0x13, 0x8c, 0x79, 0x70, 0x34, 0xf3,
	0x68, 0x12, 0x46, 0x6f, 0xf7, 0x59, 0xba, 0x02, 0xdf, 0xb5, 0x70, 0x4a, 0x03, 0x11, 0xa7, 0x53,
	0x02, 0x97, 0xa4, 0x29, 0x41, 0x94, 0xa5, 0xfc, 0xc8, 0x1d, 0x60, 0x09, 0x96, 0xfa, 0x2c, 0x7d,
	0x8c, 0xc6, 0xf9, 0x0b, 0x8f, 0x75, 0x21, 0x49, 0xba, 0x92, 0x79, 0x7b, 0x54, 0x98, 0xee, 0xd1,
	0x76, 0xeb, 0x0e, 0x81, 0x65, 0x62, 0x29, 0xb3, 0x6e, 0x3f, 0x8c, 0x3d, 0x6d, 0x1f, 0x32, 0x27,
	0xb6, 0xaf, 0x20, 0x68, 0x47, 0xf2, 0xd2, 0x80, 0xad, 0xb2, 0xe5, 0x4b, 0xbf, 0xcb, 0x2c, 0x38,
	0x5c, 0x9b, 0x42, 0xba, 0x6d, 0x2a, 0xd9, 0x3b, 0x42, 0xc2, 0x1f, 0xa2, 0x74, 0x48, 0x99, 0x3a,
	0x8b, 0x63, 0xd6, 0xa4, 0xe6, 0x4c, 0xe0, 0x8f, 0x10, 0xf2, 0xfc, 0xb6, 0xcd, 0x3a, 0xbc, 0xb1,
	0xab, 0xce, 0xcf, 0xa8, 0x95, 0xf6, 0xfc, 0xf6, 0x26, 0x2c, 0x04, 0x30, 0x0a, 0xb1, 0x30, 0x74,
	0x77, 0x14, 0x8d, 0xbf, 0x37, 0x5d, 0x51, 0x99, 0xc9, 0x36, 0xca, 0x56, 0x99, 0xbc, 0xd7, 0x68,
	0x70, 0xdf, 0x93, 0xdb, 0xae, 0x90, 0xbc, 0xdb, 0x0b, 0x69, 0xb8, 0x89, 0xae, 0x50, 0x65, 0xd0,
	0x44, 0xe0, 0xb7, 0x47, 0x85, 0x19, 0x45, 0x84, 0x36, 0x10, 0x2b, 0x74, 0x21, 0xdf, 0xa1, 0xf9,
	0x88, 0x4c, 0xff, 0x59, 0x27, 0x2b, 0x9f, 0xa3, 0xa9, 0x81, 0xb3, 0x84, 0xaf, 0xa2, 0xd9, 0x7b,
	0x1b, 0x5f, 0xd6, 0x9e, 0x6e, 0xda, 0x5f, 0x3d, 0xde, 0xf8, 0xe2, 0x61, 0xed, 0x51, 0x35, 0x33,
	0x82, 0x11, 0x9a, 0x50, 0x8b, 0x19, 0x03, 0x4f, 0xa3, 0xc9, 0xbe, 0x25, 0x15, 0x7c, 0x6d, 0xd5,
	0x1e, 0xd5, 0x76, 0xb6, 0x37, 0xef, 0x67, 0x46, 0xcb, 0x3f, 0x21, 0x34, 0xfe, 0x24, 0xb8, 0x91,
	0xf0, 0xcf, 0x06, 0x9a, 0x3d, 0xa3, 0xfe, 0x78, 0x25, 0xf2, 0x8c, 0x45, 0xde, 0x1e, 0xb9, 0x1b,
	0x97, 0xf2, 0x55, 0x2c, 0x91, 0xf5, 0xef, 0xff, 0xf8, 0xe7, 0xc7, 0xd4, 0x0d, 0xbc, 0x6c, 0x46,
	0x5c, 0x57, 0xe1, 0xdd, 0xd8, 0x86, 0x48, 0x5b, 0x4b, 0xc5, 0x0f, 0x06, 0x9a, 0x1e, 0x54, 0x50,
	0xbc, 0x14, 0x53, 0xf0, 0xac, 0x14, 0xe7, 0x8a, 0x17, 0x3b, 0x6a, 0x58, 0x26, 0xc0, 0x5a, 0xc6,
	0x4b, 0x49, 0xb0, 0x94, 0xb8, 0x98, 0x07, 0x6e, 0xf3, 0x10, 0xbf, 0x34, 0x50, 0xba, 0x2f, 0x55,
	0xf8, 0x7a, 0x52, 0xa1, 0x3e, 0x51, 0x8b, 0x17, 0x78, 0x69, 0x2c, 0x2b, 0x80, 0xe5, 0x3a, 0x26,
	0x17, 0x63, 0xc1, 0xaf, 0x14, 0x37, 0x7d, 0xdd, 0x8a, 0xe5, 0xe6, 0xac, 0x16, 0xc6, 0x72, 0x73,
	0x4e, 0x02, 0xc9, 0x2a, 0xe0, 0x59, 0xc2, 0x8b, 0x66, 0xdc, 0x0b, 0x44, 0x98, 0x07, 0xa1, 0x48,
	0x1c, 0xe2, 0x6f, 0x81, 0x18, 0x25, 0x62, 0xb1, 0xc4, 0x0c, 0xe9, 0x63, 0x2c, 0x31, 0xc3, 0x4a,
	0x48, 0x08, 0x00, 0xb9, 0x86, 0x73, 0xf1, 0x40, 0xf0, 0xef, 0x06, 0x3c, 0x65, 0xa2, 0x34, 0x07,
	0x97, 0x63, 0xca, 0x24, 0xe8, 0x64, 0xee, 0xd6, 0x3b, 0xc5, 0x68, 0xa0, 0x1b, 0x00, 0xf4, 0x2e,
	0xfe, 0x2c, 0x69, 0x82, 0xcf, 0x20, 0x83, 0xad, 0xde, 0x3e, 0xc2, 0x66, 0x3a, 0x89, 0x79, 0x00,
	0xc2, 0x7b, 0x88, 0x7f, 0x35, 0xe0, 0x36, 0x18, 0x56, 0x1b, 0x7c, 0x33, 0x06, 0x4f, 0xa4, 0xbc,
	0xe5, 0x56, 0x2f, 0xe9, 0xad, 0x71, 0xdf, 0x05, 0xdc, 0xb7, 0xf1, 0x27, 0x49, 0xb8, 0xb5, 0x18,
	0xda, 0xbb, 0x2a, 0xd8, 0x3c, 0xd0, 0x0b, 0x87, 0x21, 0xf7, 0x51, 0xef, 0x8d, 0x58, 0xee, 0x13,
	0x9e, 0x33, 0xb1, 0xdc, 0x27, 0x3d, 0x68, 0x2e, 0xc7, 0xbd, 0xc3, 0xa4, 0x0d, 0x27, 0xc8, 0x3e,
	0xfb, 0xf8, 0x81, 0xd3, 0x5d, 0x79, 0xf0, 0xfa, 0x38, 0x6f, 0xbc, 0x39, 0xce, 0x1b, 0x7f, 0x1f,
	0xe7, 0x8d, 0x57, 0x27, 0xf9, 0x91, 0x37, 0x27, 0xf9, 0x91, 0x3f, 0x4f, 0xf2, 0x23, 0x5f, 0x97,
	0x07, 0x34, 0x5b, 0x17, 0x58, 0x6d, 0xd1, 0xba, 0xe8, 0x57, 0xfb, 0x66, 0xb0, 0x1e, 0x68, 0x78,
	0x7d, 0x02, 0xde, 0xdf, 0xb7, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x9a, 0x32, 0x62, 0x96,
	0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetModuleStatus returns a rundown of coins in the module and their status
	GetModuleStatus(ctx context.Context, in *GetModuleStatusRequest, opts ...grpc.CallOption) (*GetModuleStatusResponse, error)
	// GetGaugeByID returns a gauge by its ID
	GetGaugeByID(ctx context.Context, in *GetGaugeByIDRequest, opts ...grpc.CallOption) (*GetGaugeByIDResponse, error)
	// GetGauges returns gauges according to the filter provided
	GetGauges(ctx context.Context, in *GetGaugesRequest, opts ...grpc.CallOption) (*GetGaugesResponse, error)
	// GetStakeByID returns a stake by its ID
	GetStakeByID(ctx context.Context, in *GetStakeByIDRequest, opts ...grpc.CallOption) (*GetStakeByIDResponse, error)
	// GetStakes returns stakes by the filter provided. At least one filter must be provided.
	GetStakes(ctx context.Context, in *GetStakesRequest, opts ...grpc.CallOption) (*GetStakesResponse, error)
	// GetFutureRewardsEstimate returns an estimate of the rewards from now until a specified
	// time in the future. The requestor either provides an address or a set of locks
	// for which they want to find the associated rewards.
	GetFutureRewardEstimate(ctx context.Context, in *GetFutureRewardEstimateRequest, opts ...grpc.CallOption) (*GetFutureRewardEstimateResponse, error)
	// GetAccountHistory returns the total accumulated rewards per denom for a given user.
	GetAccountHistory(ctx context.Context, in *GetAccountHistoryRequest, opts ...grpc.CallOption) (*GetAccountHistoryResponse, error)
	// Returns the total amount of value currently qualifying for the gauge. This is useful for calculating
	// the prospective future rewards of staking.
	GetGaugeQualifyingValue(ctx context.Context, in *GetGaugeQualifyingValueRequest, opts ...grpc.CallOption) (*GetGaugeQualifyingValueResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetModuleStatus(ctx context.Context, in *GetModuleStatusRequest, opts ...grpc.CallOption) (*GetModuleStatusResponse, error) {
	out := new(GetModuleStatusResponse)
	err := c.cc.Invoke(ctx, "/duality.incentives.Query/GetModuleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetGaugeByID(ctx context.Context, in *GetGaugeByIDRequest, opts ...grpc.CallOption) (*GetGaugeByIDResponse, error) {
	out := new(GetGaugeByIDResponse)
	err := c.cc.Invoke(ctx, "/duality.incentives.Query/GetGaugeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetGauges(ctx context.Context, in *GetGaugesRequest, opts ...grpc.CallOption) (*GetGaugesResponse, error) {
	out := new(GetGaugesResponse)
	err := c.cc.Invoke(ctx, "/duality.incentives.Query/GetGauges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeByID(ctx context.Context, in *GetStakeByIDRequest, opts ...grpc.CallOption) (*GetStakeByIDResponse, error) {
	out := new(GetStakeByIDResponse)
	err := c.cc.Invoke(ctx, "/duality.incentives.Query/GetStakeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakes(ctx context.Context, in *GetStakesRequest, opts ...grpc.CallOption) (*GetStakesResponse, error) {
	out := new(GetStakesResponse)
	err := c.cc.Invoke(ctx, "/duality.incentives.Query/GetStakes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetFutureRewardEstimate(ctx context.Context, in *GetFutureRewardEstimateRequest, opts ...grpc.CallOption) (*GetFutureRewardEstimateResponse, error) {
	out := new(GetFutureRewardEstimateResponse)
	err := c.cc.Invoke(ctx, "/duality.incentives.Query/GetFutureRewardEstimate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountHistory(ctx context.Context, in *GetAccountHistoryRequest, opts ...grpc.CallOption) (*GetAccountHistoryResponse, error) {
	out := new(GetAccountHistoryResponse)
	err := c.cc.Invoke(ctx, "/duality.incentives.Query/GetAccountHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetGaugeQualifyingValue(ctx context.Context, in *GetGaugeQualifyingValueRequest, opts ...grpc.CallOption) (*GetGaugeQualifyingValueResponse, error) {
	out := new(GetGaugeQualifyingValueResponse)
	err := c.cc.Invoke(ctx, "/duality.incentives.Query/GetGaugeQualifyingValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetModuleStatus returns a rundown of coins in the module and their status
	GetModuleStatus(context.Context, *GetModuleStatusRequest) (*GetModuleStatusResponse, error)
	// GetGaugeByID returns a gauge by its ID
	GetGaugeByID(context.Context, *GetGaugeByIDRequest) (*GetGaugeByIDResponse, error)
	// GetGauges returns gauges according to the filter provided
	GetGauges(context.Context, *GetGaugesRequest) (*GetGaugesResponse, error)
	// GetStakeByID returns a stake by its ID
	GetStakeByID(context.Context, *GetStakeByIDRequest) (*GetStakeByIDResponse, error)
	// GetStakes returns stakes by the filter provided. At least one filter must be provided.
	GetStakes(context.Context, *GetStakesRequest) (*GetStakesResponse, error)
	// GetFutureRewardsEstimate returns an estimate of the rewards from now until a specified
	// time in the future. The requestor either provides an address or a set of locks
	// for which they want to find the associated rewards.
	GetFutureRewardEstimate(context.Context, *GetFutureRewardEstimateRequest) (*GetFutureRewardEstimateResponse, error)
	// GetAccountHistory returns the total accumulated rewards per denom for a given user.
	GetAccountHistory(context.Context, *GetAccountHistoryRequest) (*GetAccountHistoryResponse, error)
	// Returns the total amount of value currently qualifying for the gauge. This is useful for calculating
	// the prospective future rewards of staking.
	GetGaugeQualifyingValue(context.Context, *GetGaugeQualifyingValueRequest) (*GetGaugeQualifyingValueResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetModuleStatus(ctx context.Context, req *GetModuleStatusRequest) (*GetModuleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleStatus not implemented")
}
func (*UnimplementedQueryServer) GetGaugeByID(ctx context.Context, req *GetGaugeByIDRequest) (*GetGaugeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGaugeByID not implemented")
}
func (*UnimplementedQueryServer) GetGauges(ctx context.Context, req *GetGaugesRequest) (*GetGaugesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGauges not implemented")
}
func (*UnimplementedQueryServer) GetStakeByID(ctx context.Context, req *GetStakeByIDRequest) (*GetStakeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeByID not implemented")
}
func (*UnimplementedQueryServer) GetStakes(ctx context.Context, req *GetStakesRequest) (*GetStakesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakes not implemented")
}
func (*UnimplementedQueryServer) GetFutureRewardEstimate(ctx context.Context, req *GetFutureRewardEstimateRequest) (*GetFutureRewardEstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFutureRewardEstimate not implemented")
}
func (*UnimplementedQueryServer) GetAccountHistory(ctx context.Context, req *GetAccountHistoryRequest) (*GetAccountHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountHistory not implemented")
}
func (*UnimplementedQueryServer) GetGaugeQualifyingValue(ctx context.Context, req *GetGaugeQualifyingValueRequest) (*GetGaugeQualifyingValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGaugeQualifyingValue not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetModuleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetModuleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duality.incentives.Query/GetModuleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetModuleStatus(ctx, req.(*GetModuleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetGaugeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGaugeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetGaugeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duality.incentives.Query/GetGaugeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetGaugeByID(ctx, req.(*GetGaugeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetGauges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGaugesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetGauges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duality.incentives.Query/GetGauges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetGauges(ctx, req.(*GetGaugesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duality.incentives.Query/GetStakeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeByID(ctx, req.(*GetStakeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duality.incentives.Query/GetStakes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakes(ctx, req.(*GetStakesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetFutureRewardEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFutureRewardEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetFutureRewardEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duality.incentives.Query/GetFutureRewardEstimate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetFutureRewardEstimate(ctx, req.(*GetFutureRewardEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duality.incentives.Query/GetAccountHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountHistory(ctx, req.(*GetAccountHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetGaugeQualifyingValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGaugeQualifyingValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetGaugeQualifyingValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duality.incentives.Query/GetGaugeQualifyingValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetGaugeQualifyingValue(ctx, req.(*GetGaugeQualifyingValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "duality.incentives.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModuleStatus",
			Handler:    _Query_GetModuleStatus_Handler,
		},
		{
			MethodName: "GetGaugeByID",
			Handler:    _Query_GetGaugeByID_Handler,
		},
		{
			MethodName: "GetGauges",
			Handler:    _Query_GetGauges_Handler,
		},
		{
			MethodName: "GetStakeByID",
			Handler:    _Query_GetStakeByID_Handler,
		},
		{
			MethodName: "GetStakes",
			Handler:    _Query_GetStakes_Handler,
		},
		{
			MethodName: "GetFutureRewardEstimate",
			Handler:    _Query_GetFutureRewardEstimate_Handler,
		},
		{
			MethodName: "GetAccountHistory",
			Handler:    _Query_GetAccountHistory_Handler,
		},
		{
			MethodName: "GetGaugeQualifyingValue",
			Handler:    _Query_GetGaugeQualifyingValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "duality/incentives/query.proto",
}

func (m *GetModuleStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetModuleStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetModuleStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetModuleStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetModuleStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetModuleStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.StakedCoins) > 0 {
		for iNdEx := len(m.StakedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RewardCoins) > 0 {
		for iNdEx := len(m.RewardCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetGaugeByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGaugeByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGaugeByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetGaugeByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGaugeByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGaugeByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gauge != nil {
		{
			size, err := m.Gauge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetGaugeQualifyingValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGaugeQualifyingValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGaugeQualifyingValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetGaugeQualifyingValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGaugeQualifyingValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGaugeQualifyingValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QualifyingValue != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QualifyingValue))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetGaugesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGaugesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGaugesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetGaugesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGaugesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGaugesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Gauges) > 0 {
		for iNdEx := len(m.Gauges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gauges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetStakeByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StakeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStakeByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stake != nil {
		{
			size, err := m.Stake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStakesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStakesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stakes) > 0 {
		for iNdEx := len(m.Stakes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetFutureRewardEstimateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFutureRewardEstimateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFutureRewardEstimateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumEpochs != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NumEpochs))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StakeIds) > 0 {
		dAtA5 := make([]byte, len(m.StakeIds)*10)
		var j4 int
		for _, num := range m.StakeIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintQuery(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFutureRewardEstimateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFutureRewardEstimateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFutureRewardEstimateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetModuleStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetModuleStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardCoins) > 0 {
		for _, e := range m.RewardCoins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.StakedCoins) > 0 {
		for _, e := range m.StakedCoins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetGaugeByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *GetGaugeByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gauge != nil {
		l = m.Gauge.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetGaugeQualifyingValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *GetGaugeQualifyingValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QualifyingValue != 0 {
		n += 1 + sovQuery(uint64(m.QualifyingValue))
	}
	return n
}

func (m *GetGaugesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetGaugesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gauges) > 0 {
		for _, e := range m.Gauges {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetStakeByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeId != 0 {
		n += 1 + sovQuery(uint64(m.StakeId))
	}
	return n
}

func (m *GetStakeByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stake != nil {
		l = m.Stake.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetStakesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetStakesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stakes) > 0 {
		for _, e := range m.Stakes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetFutureRewardEstimateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.StakeIds) > 0 {
		l = 0
		for _, e := range m.StakeIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if m.NumEpochs != 0 {
		n += 1 + sovQuery(uint64(m.NumEpochs))
	}
	return n
}

func (m *GetFutureRewardEstimateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetAccountHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetAccountHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetModuleStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetModuleStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetModuleStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetModuleStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetModuleStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetModuleStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardCoins = append(m.RewardCoins, types.Coin{})
			if err := m.RewardCoins[len(m.RewardCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakedCoins = append(m.StakedCoins, types.Coin{})
			if err := m.StakedCoins[len(m.StakedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGaugeByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGaugeByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGaugeByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGaugeByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGaugeByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGaugeByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gauge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gauge == nil {
				m.Gauge = &Gauge{}
			}
			if err := m.Gauge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGaugeQualifyingValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGaugeQualifyingValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGaugeQualifyingValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGaugeQualifyingValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGaugeQualifyingValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGaugeQualifyingValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifyingValue", wireType)
			}
			m.QualifyingValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QualifyingValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGaugesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGaugesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGaugesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= GaugeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGaugesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGaugesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGaugesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gauges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gauges = append(m.Gauges, &Gauge{})
			if err := m.Gauges[len(m.Gauges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeId", wireType)
			}
			m.StakeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stake == nil {
				m.Stake = &Stake{}
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakes = append(m.Stakes, &Stake{})
			if err := m.Stakes[len(m.Stakes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFutureRewardEstimateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFutureRewardEstimateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFutureRewardEstimateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StakeIds = append(m.StakeIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StakeIds) == 0 {
					m.StakeIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StakeIds = append(m.StakeIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEpochs", wireType)
			}
			m.NumEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEpochs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFutureRewardEstimateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFutureRewardEstimateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFutureRewardEstimateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
