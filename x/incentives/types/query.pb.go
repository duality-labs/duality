// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: duality/incentives/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetGaugesRequest_Filter_StatusFilter int32

const (
	GetGaugesRequest_Filter_ACTIVE_UPCOMING GetGaugesRequest_Filter_StatusFilter = 0
	GetGaugesRequest_Filter_ACTIVE          GetGaugesRequest_Filter_StatusFilter = 1
	GetGaugesRequest_Filter_UPCOMING        GetGaugesRequest_Filter_StatusFilter = 2
	GetGaugesRequest_Filter_FINISHED        GetGaugesRequest_Filter_StatusFilter = 3
)

var GetGaugesRequest_Filter_StatusFilter_name = map[int32]string{
	0: "ACTIVE_UPCOMING",
	1: "ACTIVE",
	2: "UPCOMING",
	3: "FINISHED",
}

var GetGaugesRequest_Filter_StatusFilter_value = map[string]int32{
	"ACTIVE_UPCOMING": 0,
	"ACTIVE":          1,
	"UPCOMING":        2,
	"FINISHED":        3,
}

func (x GetGaugesRequest_Filter_StatusFilter) String() string {
	return proto.EnumName(GetGaugesRequest_Filter_StatusFilter_name, int32(x))
}

func (GetGaugesRequest_Filter_StatusFilter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{4, 0, 0}
}

type GetModuleStatusRequest struct {
}

func (m *GetModuleStatusRequest) Reset()         { *m = GetModuleStatusRequest{} }
func (m *GetModuleStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetModuleStatusRequest) ProtoMessage()    {}
func (*GetModuleStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{0}
}
func (m *GetModuleStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetModuleStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetModuleStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetModuleStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetModuleStatusRequest.Merge(m, src)
}
func (m *GetModuleStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetModuleStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetModuleStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetModuleStatusRequest proto.InternalMessageInfo

type GetModuleStatusResponse struct {
	// Coins that have yet to be distributed
	RewardCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=rewardCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewardCoins"`
	LockCoins   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=lockCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"lockCoins"`
	Params      Params                                   `protobuf:"bytes,3,opt,name=params,proto3" json:"params"`
}

func (m *GetModuleStatusResponse) Reset()         { *m = GetModuleStatusResponse{} }
func (m *GetModuleStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetModuleStatusResponse) ProtoMessage()    {}
func (*GetModuleStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{1}
}
func (m *GetModuleStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetModuleStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetModuleStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetModuleStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetModuleStatusResponse.Merge(m, src)
}
func (m *GetModuleStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetModuleStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetModuleStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetModuleStatusResponse proto.InternalMessageInfo

func (m *GetModuleStatusResponse) GetRewardCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RewardCoins
	}
	return nil
}

func (m *GetModuleStatusResponse) GetLockCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.LockCoins
	}
	return nil
}

func (m *GetModuleStatusResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type GetGaugeByIDRequest struct {
	// Gague ID being queried
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetGaugeByIDRequest) Reset()         { *m = GetGaugeByIDRequest{} }
func (m *GetGaugeByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetGaugeByIDRequest) ProtoMessage()    {}
func (*GetGaugeByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{2}
}
func (m *GetGaugeByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGaugeByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGaugeByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGaugeByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGaugeByIDRequest.Merge(m, src)
}
func (m *GetGaugeByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetGaugeByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGaugeByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGaugeByIDRequest proto.InternalMessageInfo

func (m *GetGaugeByIDRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetGaugeByIDResponse struct {
	// Gauge that corresponds to provided gague ID
	Gauge *Gauge `protobuf:"bytes,1,opt,name=gauge,proto3" json:"gauge,omitempty"`
}

func (m *GetGaugeByIDResponse) Reset()         { *m = GetGaugeByIDResponse{} }
func (m *GetGaugeByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetGaugeByIDResponse) ProtoMessage()    {}
func (*GetGaugeByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{3}
}
func (m *GetGaugeByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGaugeByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGaugeByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGaugeByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGaugeByIDResponse.Merge(m, src)
}
func (m *GetGaugeByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetGaugeByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGaugeByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGaugeByIDResponse proto.InternalMessageInfo

func (m *GetGaugeByIDResponse) GetGauge() *Gauge {
	if m != nil {
		return m.Gauge
	}
	return nil
}

type GetGaugesRequest struct {
	// Pagination defines pagination for the request
	Pagination *query.PageRequest      `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Filter     GetGaugesRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter"`
}

func (m *GetGaugesRequest) Reset()         { *m = GetGaugesRequest{} }
func (m *GetGaugesRequest) String() string { return proto.CompactTextString(m) }
func (*GetGaugesRequest) ProtoMessage()    {}
func (*GetGaugesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{4}
}
func (m *GetGaugesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGaugesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGaugesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGaugesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGaugesRequest.Merge(m, src)
}
func (m *GetGaugesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetGaugesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGaugesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGaugesRequest proto.InternalMessageInfo

func (m *GetGaugesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetGaugesRequest) GetFilter() GetGaugesRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return GetGaugesRequest_Filter{}
}

type GetGaugesRequest_Filter struct {
	Status GetGaugesRequest_Filter_StatusFilter `protobuf:"varint,1,opt,name=status,proto3,enum=duality.incentives.GetGaugesRequest_Filter_StatusFilter" json:"status,omitempty"`
	Denom  string                               `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetGaugesRequest_Filter) Reset()         { *m = GetGaugesRequest_Filter{} }
func (m *GetGaugesRequest_Filter) String() string { return proto.CompactTextString(m) }
func (*GetGaugesRequest_Filter) ProtoMessage()    {}
func (*GetGaugesRequest_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{4, 0}
}
func (m *GetGaugesRequest_Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGaugesRequest_Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGaugesRequest_Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGaugesRequest_Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGaugesRequest_Filter.Merge(m, src)
}
func (m *GetGaugesRequest_Filter) XXX_Size() int {
	return m.Size()
}
func (m *GetGaugesRequest_Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGaugesRequest_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_GetGaugesRequest_Filter proto.InternalMessageInfo

func (m *GetGaugesRequest_Filter) GetStatus() GetGaugesRequest_Filter_StatusFilter {
	if m != nil {
		return m.Status
	}
	return GetGaugesRequest_Filter_ACTIVE_UPCOMING
}

func (m *GetGaugesRequest_Filter) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type GetGaugesResponse struct {
	// Upcoming and active gauges
	Gauges []*Gauge `protobuf:"bytes,1,rep,name=gauges,proto3" json:"gauges,omitempty"`
	// Pagination defines pagination for the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *GetGaugesResponse) Reset()         { *m = GetGaugesResponse{} }
func (m *GetGaugesResponse) String() string { return proto.CompactTextString(m) }
func (*GetGaugesResponse) ProtoMessage()    {}
func (*GetGaugesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{5}
}
func (m *GetGaugesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGaugesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGaugesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGaugesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGaugesResponse.Merge(m, src)
}
func (m *GetGaugesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetGaugesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGaugesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGaugesResponse proto.InternalMessageInfo

func (m *GetGaugesResponse) GetGauges() []*Gauge {
	if m != nil {
		return m.Gauges
	}
	return nil
}

func (m *GetGaugesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type GetLockByIDRequest struct {
	LockId uint64 `protobuf:"varint,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
}

func (m *GetLockByIDRequest) Reset()         { *m = GetLockByIDRequest{} }
func (m *GetLockByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetLockByIDRequest) ProtoMessage()    {}
func (*GetLockByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{6}
}
func (m *GetLockByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLockByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLockByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLockByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLockByIDRequest.Merge(m, src)
}
func (m *GetLockByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLockByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLockByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLockByIDRequest proto.InternalMessageInfo

func (m *GetLockByIDRequest) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

type GetLockByIDResponse struct {
	Lock *Lock `protobuf:"bytes,1,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (m *GetLockByIDResponse) Reset()         { *m = GetLockByIDResponse{} }
func (m *GetLockByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetLockByIDResponse) ProtoMessage()    {}
func (*GetLockByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{7}
}
func (m *GetLockByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLockByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLockByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLockByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLockByIDResponse.Merge(m, src)
}
func (m *GetLockByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLockByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLockByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLockByIDResponse proto.InternalMessageInfo

func (m *GetLockByIDResponse) GetLock() *Lock {
	if m != nil {
		return m.Lock
	}
	return nil
}

type GetFutureRewardEstimateRequest struct {
	// Address that is being queried for future estimated rewards
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	// Lock IDs included in future reward estimation
	LockIds []uint64 `protobuf:"varint,2,rep,packed,name=lock_ids,json=lockIds,proto3" json:"lock_ids,omitempty"`
	// Upper time limit of reward estimation
	// Lower limit is current epoch
	EndEpoch int64 `protobuf:"varint,3,opt,name=end_epoch,json=endEpoch,proto3" json:"end_epoch,omitempty"`
}

func (m *GetFutureRewardEstimateRequest) Reset()         { *m = GetFutureRewardEstimateRequest{} }
func (m *GetFutureRewardEstimateRequest) String() string { return proto.CompactTextString(m) }
func (*GetFutureRewardEstimateRequest) ProtoMessage()    {}
func (*GetFutureRewardEstimateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{8}
}
func (m *GetFutureRewardEstimateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFutureRewardEstimateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFutureRewardEstimateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFutureRewardEstimateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFutureRewardEstimateRequest.Merge(m, src)
}
func (m *GetFutureRewardEstimateRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFutureRewardEstimateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFutureRewardEstimateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFutureRewardEstimateRequest proto.InternalMessageInfo

func (m *GetFutureRewardEstimateRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *GetFutureRewardEstimateRequest) GetLockIds() []uint64 {
	if m != nil {
		return m.LockIds
	}
	return nil
}

func (m *GetFutureRewardEstimateRequest) GetEndEpoch() int64 {
	if m != nil {
		return m.EndEpoch
	}
	return 0
}

type GetFutureRewardEstimateResponse struct {
	// Estimated coin rewards that will be recieved at provided address
	// from specified locks between current time and end epoch
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *GetFutureRewardEstimateResponse) Reset()         { *m = GetFutureRewardEstimateResponse{} }
func (m *GetFutureRewardEstimateResponse) String() string { return proto.CompactTextString(m) }
func (*GetFutureRewardEstimateResponse) ProtoMessage()    {}
func (*GetFutureRewardEstimateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27b4715672276428, []int{9}
}
func (m *GetFutureRewardEstimateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFutureRewardEstimateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFutureRewardEstimateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFutureRewardEstimateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFutureRewardEstimateResponse.Merge(m, src)
}
func (m *GetFutureRewardEstimateResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFutureRewardEstimateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFutureRewardEstimateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFutureRewardEstimateResponse proto.InternalMessageInfo

func (m *GetFutureRewardEstimateResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func init() {
	proto.RegisterEnum("duality.incentives.GetGaugesRequest_Filter_StatusFilter", GetGaugesRequest_Filter_StatusFilter_name, GetGaugesRequest_Filter_StatusFilter_value)
	proto.RegisterType((*GetModuleStatusRequest)(nil), "duality.incentives.GetModuleStatusRequest")
	proto.RegisterType((*GetModuleStatusResponse)(nil), "duality.incentives.GetModuleStatusResponse")
	proto.RegisterType((*GetGaugeByIDRequest)(nil), "duality.incentives.GetGaugeByIDRequest")
	proto.RegisterType((*GetGaugeByIDResponse)(nil), "duality.incentives.GetGaugeByIDResponse")
	proto.RegisterType((*GetGaugesRequest)(nil), "duality.incentives.GetGaugesRequest")
	proto.RegisterType((*GetGaugesRequest_Filter)(nil), "duality.incentives.GetGaugesRequest.Filter")
	proto.RegisterType((*GetGaugesResponse)(nil), "duality.incentives.GetGaugesResponse")
	proto.RegisterType((*GetLockByIDRequest)(nil), "duality.incentives.GetLockByIDRequest")
	proto.RegisterType((*GetLockByIDResponse)(nil), "duality.incentives.GetLockByIDResponse")
	proto.RegisterType((*GetFutureRewardEstimateRequest)(nil), "duality.incentives.GetFutureRewardEstimateRequest")
	proto.RegisterType((*GetFutureRewardEstimateResponse)(nil), "duality.incentives.GetFutureRewardEstimateResponse")
}

func init() { proto.RegisterFile("duality/incentives/query.proto", fileDescriptor_27b4715672276428) }

var fileDescriptor_27b4715672276428 = []byte{
	// 994 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0x3a, 0xb1, 0x1b, 0xbf, 0x44, 0xad, 0x99, 0x46, 0xd4, 0x35, 0x60, 0x47, 0x2b, 0x9a,
	0x58, 0x2d, 0xd9, 0x6d, 0x5c, 0x21, 0x45, 0xbd, 0x40, 0x9d, 0x26, 0x8b, 0x45, 0x5b, 0xc2, 0x16,
	0x38, 0x70, 0x59, 0x8d, 0xbd, 0x93, 0xed, 0x2a, 0xde, 0x1d, 0x77, 0x67, 0xb6, 0xc5, 0xaa, 0x22,
	0x21, 0xc4, 0x81, 0x1b, 0x48, 0x1c, 0xb9, 0xc0, 0x15, 0x89, 0x8f, 0xc0, 0x11, 0xa9, 0x12, 0x97,
	0x4a, 0x5c, 0x38, 0x15, 0x94, 0xc0, 0x17, 0xe0, 0x13, 0xa0, 0x9d, 0x99, 0x8d, 0xd7, 0xe9, 0xba,
	0x4e, 0x24, 0x38, 0x25, 0xb3, 0xef, 0xf7, 0xde, 0xfb, 0xbd, 0x3f, 0xbf, 0x19, 0x43, 0xc3, 0x8d,
	0xf1, 0xc0, 0xe7, 0x23, 0xd3, 0x0f, 0xfb, 0x24, 0xe4, 0xfe, 0x23, 0xc2, 0xcc, 0x87, 0x31, 0x89,
	0x46, 0xc6, 0x30, 0xa2, 0x9c, 0x22, 0xa4, 0xec, 0xc6, 0xd8, 0x5e, 0x5f, 0xf6, 0xa8, 0x47, 0x85,
	0xd9, 0x4c, 0xfe, 0x93, 0xc8, 0xfa, 0xeb, 0x1e, 0xa5, 0xde, 0x80, 0x98, 0x78, 0xe8, 0x9b, 0x38,
	0x0c, 0x29, 0xc7, 0xdc, 0xa7, 0x21, 0x53, 0xd6, 0x86, 0xb2, 0x8a, 0x53, 0x2f, 0xde, 0x33, 0xdd,
	0x38, 0x12, 0x80, 0xd4, 0xde, 0xa7, 0x2c, 0xa0, 0xcc, 0xec, 0x61, 0x46, 0xcc, 0x47, 0x1b, 0x3d,
	0xc2, 0xf1, 0x86, 0xd9, 0xa7, 0x7e, 0x6a, 0xbf, 0x9a, 0xb5, 0x0b, 0x82, 0xc7, 0xa8, 0x21, 0xf6,
	0xfc, 0x70, 0x22, 0x56, 0x4e, 0x4d, 0x1e, 0x8e, 0x3d, 0xa2, 0xec, 0x6f, 0xe4, 0xd8, 0x07, 0xb4,
	0xbf, 0xaf, 0xcc, 0xcd, 0x93, 0x54, 0xb9, 0x1f, 0x10, 0xc6, 0x71, 0x30, 0x4c, 0x01, 0x39, 0xfe,
	0x43, 0x1c, 0xe1, 0x40, 0x15, 0xab, 0xd7, 0xe0, 0x55, 0x8b, 0xf0, 0xbb, 0xd4, 0x8d, 0x07, 0xe4,
	0x3e, 0xc7, 0x3c, 0x66, 0x36, 0x79, 0x18, 0x13, 0xc6, 0xf5, 0x9f, 0x8a, 0x70, 0xe9, 0x05, 0x13,
	0x1b, 0xd2, 0x90, 0x11, 0x14, 0xc0, 0x62, 0x44, 0x1e, 0xe3, 0xc8, 0xdd, 0xa2, 0x7e, 0xc8, 0x6a,
	0xda, 0xca, 0x5c, 0x6b, 0xb1, 0x7d, 0xd9, 0x90, 0x85, 0x1b, 0x49, 0xe1, 0x86, 0x2a, 0xd9, 0x48,
	0x10, 0x9d, 0xeb, 0x4f, 0x9f, 0x37, 0x0b, 0x3f, 0xfe, 0xd1, 0x6c, 0x79, 0x3e, 0x7f, 0x10, 0xf7,
	0x8c, 0x3e, 0x0d, 0x4c, 0xd5, 0x25, 0xf9, 0x67, 0x9d, 0xb9, 0xfb, 0x26, 0x1f, 0x0d, 0x09, 0x13,
	0x0e, 0xcc, 0xce, 0xc6, 0x47, 0x3e, 0x54, 0x92, 0xa2, 0x65, 0xb2, 0xe2, 0x7f, 0x9f, 0x6c, 0x1c,
	0x1d, 0x6d, 0x42, 0x59, 0xf6, 0xa7, 0x36, 0xb7, 0xa2, 0xb5, 0x16, 0xdb, 0x75, 0xe3, 0xc5, 0xad,
	0x32, 0x76, 0x05, 0xa2, 0x33, 0x9f, 0x24, 0xb2, 0x15, 0x5e, 0xbf, 0x02, 0x17, 0x2d, 0xc2, 0xad,
	0x64, 0x78, 0x9d, 0x51, 0xf7, 0xb6, 0x6a, 0x23, 0x3a, 0x0f, 0x45, 0xdf, 0xad, 0x69, 0x2b, 0x5a,
	0x6b, 0xde, 0x2e, 0xfa, 0xae, 0x6e, 0xc1, 0xf2, 0x24, 0x4c, 0xb5, 0xd4, 0x84, 0x92, 0x18, 0xbc,
	0x80, 0x26, 0xf5, 0xe5, 0xe4, 0x15, 0x5e, 0xb6, 0xc4, 0xe9, 0x7f, 0x17, 0xa1, 0x9a, 0x46, 0x4a,
	0x87, 0x86, 0x76, 0x00, 0xc6, 0x3b, 0xa6, 0x42, 0xad, 0x4e, 0xb4, 0x4a, 0x2a, 0x26, 0x6d, 0xd8,
	0x2e, 0xf6, 0x88, 0xf2, 0xb5, 0x33, 0x9e, 0xa8, 0x0b, 0xe5, 0x3d, 0x7f, 0xc0, 0x49, 0x54, 0x2b,
	0x8a, 0x18, 0xd7, 0x72, 0xe9, 0x9c, 0xc8, 0x6e, 0xec, 0x08, 0x97, 0xb4, 0x2f, 0x32, 0x40, 0xfd,
	0x67, 0x0d, 0xca, 0xd2, 0x80, 0x76, 0xa1, 0xcc, 0xc4, 0x22, 0x09, 0x66, 0xe7, 0xdb, 0x9b, 0x67,
	0x88, 0x6a, 0xc8, 0x15, 0x94, 0x07, 0x5b, 0xc5, 0x41, 0xcb, 0x50, 0x72, 0x49, 0x48, 0x03, 0x41,
	0xb3, 0x62, 0xcb, 0x83, 0xfe, 0x3e, 0x2c, 0x65, 0xd1, 0xe8, 0x22, 0x5c, 0xb8, 0xb5, 0xf5, 0x51,
	0xf7, 0x93, 0x6d, 0xe7, 0xe3, 0xdd, 0xad, 0x0f, 0xee, 0x76, 0xef, 0x59, 0xd5, 0x02, 0x02, 0x28,
	0xcb, 0x8f, 0x55, 0x0d, 0x2d, 0xc1, 0xc2, 0xb1, 0xa5, 0x98, 0x9c, 0x76, 0xba, 0xf7, 0xba, 0xf7,
	0xdf, 0xdb, 0xbe, 0x5d, 0x9d, 0xd3, 0xbf, 0xd6, 0xe0, 0x95, 0x0c, 0x27, 0x35, 0xae, 0x0d, 0x28,
	0x8b, 0x31, 0x8c, 0x97, 0x7f, 0xea, 0xbc, 0x14, 0x10, 0x59, 0x13, 0xb3, 0x91, 0x7d, 0x5d, 0x9b,
	0x39, 0x1b, 0x99, 0x2f, 0x3b, 0x1c, 0x7d, 0x1d, 0x90, 0x45, 0xf8, 0x1d, 0xda, 0xdf, 0xcf, 0x2e,
	0xda, 0x25, 0x38, 0x97, 0xac, 0xb1, 0x73, 0xbc, 0x6d, 0xe5, 0xe4, 0xd8, 0x75, 0xf5, 0x2d, 0xb1,
	0x98, 0x63, 0xb8, 0xaa, 0xe0, 0x2d, 0x98, 0x4f, 0x00, 0x6a, 0x49, 0x6a, 0x79, 0xfc, 0x13, 0x1f,
	0x5b, 0xa0, 0xf4, 0xcf, 0x35, 0x68, 0x58, 0x84, 0xef, 0xc4, 0x3c, 0x8e, 0x88, 0x2d, 0xb4, 0xb9,
	0xcd, 0xb8, 0x1f, 0x60, 0x9e, 0xee, 0x0f, 0x5a, 0x85, 0x12, 0x7d, 0x1c, 0x92, 0x48, 0x44, 0xac,
	0x74, 0xaa, 0xff, 0x3c, 0x6f, 0x2e, 0x8d, 0x70, 0x30, 0xb8, 0xa9, 0x8b, 0xcf, 0xba, 0x2d, 0xcd,
	0xe8, 0x32, 0x2c, 0x28, 0xa2, 0x52, 0xcc, 0xf3, 0xf6, 0x39, 0xc9, 0x94, 0xa1, 0xd7, 0xa0, 0x42,
	0x42, 0xd7, 0x21, 0x43, 0xda, 0x7f, 0x20, 0x04, 0x38, 0x67, 0x2f, 0x90, 0xd0, 0xdd, 0x4e, 0xce,
	0xfa, 0x97, 0x1a, 0x34, 0xa7, 0x52, 0x50, 0x45, 0x61, 0x28, 0xf5, 0xff, 0xaf, 0x2b, 0x49, 0x46,
	0x6e, 0xff, 0x52, 0x86, 0xd2, 0x87, 0xc9, 0xa0, 0xd0, 0x0f, 0x1a, 0x5c, 0x38, 0x71, 0x43, 0xa2,
	0xab, 0x53, 0x56, 0x3a, 0xe7, 0x86, 0xad, 0x5f, 0x3b, 0x15, 0x56, 0x56, 0xa6, 0xbf, 0xfd, 0xc5,
	0x6f, 0x7f, 0x7d, 0x5b, 0x34, 0xd1, 0xba, 0x99, 0x73, 0xa5, 0xa7, 0xef, 0x8b, 0x47, 0xb8, 0x13,
	0x08, 0x6f, 0x47, 0x09, 0xe4, 0x3b, 0x0d, 0x96, 0xb2, 0xf7, 0x0d, 0x5a, 0x7b, 0x99, 0xe6, 0x32,
	0xfb, 0x54, 0x6f, 0xcd, 0x06, 0x2a, 0x6a, 0x9b, 0x82, 0x5a, 0x1b, 0x5d, 0x9f, 0x45, 0x4d, 0x08,
	0xc1, 0xe9, 0x8d, 0x1c, 0xdf, 0x35, 0x9f, 0xf8, 0xee, 0x01, 0xfa, 0x4a, 0x83, 0xca, 0xb1, 0xb6,
	0xd0, 0x9b, 0xa7, 0xb9, 0x0e, 0xea, 0x57, 0x66, 0xa0, 0x14, 0x29, 0x43, 0x90, 0x6a, 0xa1, 0xd5,
	0x53, 0x91, 0x62, 0xe8, 0x7b, 0x0d, 0x16, 0x33, 0x32, 0x41, 0xab, 0x53, 0xd2, 0x9c, 0x90, 0x5d,
	0x7d, 0x6d, 0x26, 0x4e, 0x11, 0x7a, 0x57, 0x10, 0xba, 0x89, 0x36, 0x53, 0x42, 0x03, 0xdc, 0x63,
	0x79, 0xe4, 0x12, 0x52, 0x42, 0x20, 0xaa, 0x51, 0x4a, 0x2c, 0x07, 0xe8, 0x57, 0x4d, 0xbc, 0xc8,
	0x79, 0x02, 0x40, 0xed, 0x29, 0x34, 0x5e, 0x22, 0xd8, 0xfa, 0x8d, 0x33, 0xf9, 0xa8, 0x32, 0x2c,
	0x51, 0xc6, 0x2d, 0xf4, 0xce, 0xac, 0xbe, 0xee, 0x89, 0x28, 0x8e, 0x7c, 0xc7, 0x99, 0x43, 0x54,
	0x20, 0xf3, 0x89, 0xb8, 0x05, 0x0e, 0x3a, 0x77, 0x9e, 0x1e, 0x36, 0xb4, 0x67, 0x87, 0x0d, 0xed,
	0xcf, 0xc3, 0x86, 0xf6, 0xcd, 0x51, 0xa3, 0xf0, 0xec, 0xa8, 0x51, 0xf8, 0xfd, 0xa8, 0x51, 0xf8,
	0xb4, 0x9d, 0x91, 0xa4, 0x4a, 0xb2, 0x3e, 0xd1, 0xac, 0xcf, 0xb2, 0x39, 0x85, 0x44, 0x7b, 0x65,
	0xf1, 0x73, 0xe6, 0xc6, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x7f, 0xbf, 0xa5, 0x25, 0x0a,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetModuleStatus returns a rundown of coins in the module and their status
	GetModuleStatus(ctx context.Context, in *GetModuleStatusRequest, opts ...grpc.CallOption) (*GetModuleStatusResponse, error)
	// GetGaugeByID returns a gauge by its ID
	GetGaugeByID(ctx context.Context, in *GetGaugeByIDRequest, opts ...grpc.CallOption) (*GetGaugeByIDResponse, error)
	// GetGauges returns gauges according to the filter provided
	GetGauges(ctx context.Context, in *GetGaugesRequest, opts ...grpc.CallOption) (*GetGaugesResponse, error)
	// GetLockByID returns a lock by its ID
	GetLockByID(ctx context.Context, in *GetLockByIDRequest, opts ...grpc.CallOption) (*GetLockByIDResponse, error)
	// GetFutureRewardsEstimate returns an estimate of the rewards from now until a specified
	// time in the future. The requestor either provides an address or a set of locks
	// for which they want to find the associated rewards.
	GetFutureRewardEstimate(ctx context.Context, in *GetFutureRewardEstimateRequest, opts ...grpc.CallOption) (*GetFutureRewardEstimateResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetModuleStatus(ctx context.Context, in *GetModuleStatusRequest, opts ...grpc.CallOption) (*GetModuleStatusResponse, error) {
	out := new(GetModuleStatusResponse)
	err := c.cc.Invoke(ctx, "/duality.incentives.Query/GetModuleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetGaugeByID(ctx context.Context, in *GetGaugeByIDRequest, opts ...grpc.CallOption) (*GetGaugeByIDResponse, error) {
	out := new(GetGaugeByIDResponse)
	err := c.cc.Invoke(ctx, "/duality.incentives.Query/GetGaugeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetGauges(ctx context.Context, in *GetGaugesRequest, opts ...grpc.CallOption) (*GetGaugesResponse, error) {
	out := new(GetGaugesResponse)
	err := c.cc.Invoke(ctx, "/duality.incentives.Query/GetGauges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLockByID(ctx context.Context, in *GetLockByIDRequest, opts ...grpc.CallOption) (*GetLockByIDResponse, error) {
	out := new(GetLockByIDResponse)
	err := c.cc.Invoke(ctx, "/duality.incentives.Query/GetLockByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetFutureRewardEstimate(ctx context.Context, in *GetFutureRewardEstimateRequest, opts ...grpc.CallOption) (*GetFutureRewardEstimateResponse, error) {
	out := new(GetFutureRewardEstimateResponse)
	err := c.cc.Invoke(ctx, "/duality.incentives.Query/GetFutureRewardEstimate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetModuleStatus returns a rundown of coins in the module and their status
	GetModuleStatus(context.Context, *GetModuleStatusRequest) (*GetModuleStatusResponse, error)
	// GetGaugeByID returns a gauge by its ID
	GetGaugeByID(context.Context, *GetGaugeByIDRequest) (*GetGaugeByIDResponse, error)
	// GetGauges returns gauges according to the filter provided
	GetGauges(context.Context, *GetGaugesRequest) (*GetGaugesResponse, error)
	// GetLockByID returns a lock by its ID
	GetLockByID(context.Context, *GetLockByIDRequest) (*GetLockByIDResponse, error)
	// GetFutureRewardsEstimate returns an estimate of the rewards from now until a specified
	// time in the future. The requestor either provides an address or a set of locks
	// for which they want to find the associated rewards.
	GetFutureRewardEstimate(context.Context, *GetFutureRewardEstimateRequest) (*GetFutureRewardEstimateResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetModuleStatus(ctx context.Context, req *GetModuleStatusRequest) (*GetModuleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleStatus not implemented")
}
func (*UnimplementedQueryServer) GetGaugeByID(ctx context.Context, req *GetGaugeByIDRequest) (*GetGaugeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGaugeByID not implemented")
}
func (*UnimplementedQueryServer) GetGauges(ctx context.Context, req *GetGaugesRequest) (*GetGaugesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGauges not implemented")
}
func (*UnimplementedQueryServer) GetLockByID(ctx context.Context, req *GetLockByIDRequest) (*GetLockByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockByID not implemented")
}
func (*UnimplementedQueryServer) GetFutureRewardEstimate(ctx context.Context, req *GetFutureRewardEstimateRequest) (*GetFutureRewardEstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFutureRewardEstimate not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetModuleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetModuleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duality.incentives.Query/GetModuleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetModuleStatus(ctx, req.(*GetModuleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetGaugeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGaugeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetGaugeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duality.incentives.Query/GetGaugeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetGaugeByID(ctx, req.(*GetGaugeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetGauges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGaugesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetGauges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duality.incentives.Query/GetGauges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetGauges(ctx, req.(*GetGaugesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLockByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLockByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLockByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duality.incentives.Query/GetLockByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLockByID(ctx, req.(*GetLockByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetFutureRewardEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFutureRewardEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetFutureRewardEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/duality.incentives.Query/GetFutureRewardEstimate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetFutureRewardEstimate(ctx, req.(*GetFutureRewardEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "duality.incentives.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModuleStatus",
			Handler:    _Query_GetModuleStatus_Handler,
		},
		{
			MethodName: "GetGaugeByID",
			Handler:    _Query_GetGaugeByID_Handler,
		},
		{
			MethodName: "GetGauges",
			Handler:    _Query_GetGauges_Handler,
		},
		{
			MethodName: "GetLockByID",
			Handler:    _Query_GetLockByID_Handler,
		},
		{
			MethodName: "GetFutureRewardEstimate",
			Handler:    _Query_GetFutureRewardEstimate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "duality/incentives/query.proto",
}

func (m *GetModuleStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetModuleStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetModuleStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetModuleStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetModuleStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetModuleStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.LockCoins) > 0 {
		for iNdEx := len(m.LockCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RewardCoins) > 0 {
		for iNdEx := len(m.RewardCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetGaugeByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGaugeByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGaugeByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetGaugeByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGaugeByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGaugeByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gauge != nil {
		{
			size, err := m.Gauge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetGaugesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGaugesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGaugesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetGaugesRequest_Filter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGaugesRequest_Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGaugesRequest_Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetGaugesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGaugesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGaugesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Gauges) > 0 {
		for iNdEx := len(m.Gauges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gauges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetLockByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLockByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLockByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LockId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLockByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLockByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLockByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lock != nil {
		{
			size, err := m.Lock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFutureRewardEstimateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFutureRewardEstimateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFutureRewardEstimateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndEpoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndEpoch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LockIds) > 0 {
		dAtA8 := make([]byte, len(m.LockIds)*10)
		var j7 int
		for _, num := range m.LockIds {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintQuery(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFutureRewardEstimateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFutureRewardEstimateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFutureRewardEstimateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetModuleStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetModuleStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardCoins) > 0 {
		for _, e := range m.RewardCoins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.LockCoins) > 0 {
		for _, e := range m.LockCoins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetGaugeByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *GetGaugeByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gauge != nil {
		l = m.Gauge.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetGaugesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Filter.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetGaugesRequest_Filter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetGaugesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gauges) > 0 {
		for _, e := range m.Gauges {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetLockByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockId != 0 {
		n += 1 + sovQuery(uint64(m.LockId))
	}
	return n
}

func (m *GetLockByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lock != nil {
		l = m.Lock.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetFutureRewardEstimateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.LockIds) > 0 {
		l = 0
		for _, e := range m.LockIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if m.EndEpoch != 0 {
		n += 1 + sovQuery(uint64(m.EndEpoch))
	}
	return n
}

func (m *GetFutureRewardEstimateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetModuleStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetModuleStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetModuleStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetModuleStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetModuleStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetModuleStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardCoins = append(m.RewardCoins, types.Coin{})
			if err := m.RewardCoins[len(m.RewardCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockCoins = append(m.LockCoins, types.Coin{})
			if err := m.LockCoins[len(m.LockCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGaugeByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGaugeByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGaugeByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGaugeByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGaugeByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGaugeByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gauge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gauge == nil {
				m.Gauge = &Gauge{}
			}
			if err := m.Gauge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGaugesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGaugesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGaugesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGaugesRequest_Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= GetGaugesRequest_Filter_StatusFilter(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGaugesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGaugesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGaugesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gauges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gauges = append(m.Gauges, &Gauge{})
			if err := m.Gauges[len(m.Gauges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLockByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLockByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLockByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			m.LockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLockByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLockByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLockByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lock == nil {
				m.Lock = &Lock{}
			}
			if err := m.Lock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFutureRewardEstimateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFutureRewardEstimateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFutureRewardEstimateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LockIds = append(m.LockIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LockIds) == 0 {
					m.LockIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LockIds = append(m.LockIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LockIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEpoch", wireType)
			}
			m.EndEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFutureRewardEstimateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFutureRewardEstimateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFutureRewardEstimateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
