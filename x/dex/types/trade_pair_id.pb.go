// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dualitylabs/duality/dex/trade_pair_id.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TradePairID struct {
	MakerDenom string `protobuf:"bytes,2,opt,name=makerDenom,proto3" json:"makerDenom,omitempty"`
	TakerDenom string `protobuf:"bytes,3,opt,name=takerDenom,proto3" json:"takerDenom,omitempty"`
}

func (m *TradePairID) Reset()         { *m = TradePairID{} }
func (m *TradePairID) String() string { return proto.CompactTextString(m) }
func (*TradePairID) ProtoMessage()    {}
func (*TradePairID) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb7b2fecbaf32a0a, []int{0}
}
func (m *TradePairID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradePairID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradePairID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradePairID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradePairID.Merge(m, src)
}
func (m *TradePairID) XXX_Size() int {
	return m.Size()
}
func (m *TradePairID) XXX_DiscardUnknown() {
	xxx_messageInfo_TradePairID.DiscardUnknown(m)
}

var xxx_messageInfo_TradePairID proto.InternalMessageInfo

func (m *TradePairID) GetMakerDenom() string {
	if m != nil {
		return m.MakerDenom
	}
	return ""
}

func (m *TradePairID) GetTakerDenom() string {
	if m != nil {
		return m.TakerDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*TradePairID)(nil), "dualitylabs.duality.dex.TradePairID")
}

func init() {
	proto.RegisterFile("dualitylabs/duality/dex/trade_pair_id.proto", fileDescriptor_fb7b2fecbaf32a0a)
}

var fileDescriptor_fb7b2fecbaf32a0a = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4e, 0x29, 0x4d, 0xcc,
	0xc9, 0x2c, 0xa9, 0xcc, 0x49, 0x4c, 0x2a, 0xd6, 0x87, 0xb2, 0xf5, 0x53, 0x52, 0x2b, 0xf4, 0x4b,
	0x8a, 0x12, 0x53, 0x52, 0xe3, 0x0b, 0x12, 0x33, 0x8b, 0xe2, 0x33, 0x53, 0xf4, 0x0a, 0x8a, 0xf2,
	0x4b, 0xf2, 0x85, 0xc4, 0x91, 0x14, 0xeb, 0x41, 0xd9, 0x7a, 0x29, 0xa9, 0x15, 0x4a, 0xbe, 0x5c,
	0xdc, 0x21, 0x20, 0xf5, 0x01, 0x89, 0x99, 0x45, 0x9e, 0x2e, 0x42, 0x72, 0x5c, 0x5c, 0xb9, 0x89,
	0xd9, 0xa9, 0x45, 0x2e, 0xa9, 0x79, 0xf9, 0xb9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x48,
	0x22, 0x20, 0xf9, 0x12, 0x84, 0x3c, 0x33, 0x44, 0x1e, 0x21, 0xe2, 0xe4, 0x7a, 0xe2, 0x91, 0x1c,
	0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1,
	0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xda, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9,
	0xf9, 0xb9, 0x30, 0xd7, 0xea, 0xa2, 0x38, 0xbd, 0x02, 0xe2, 0xf8, 0xca, 0x82, 0xd4, 0xe2, 0x24,
	0x36, 0xb0, 0xab, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x05, 0xfb, 0x38, 0xbb, 0xe4, 0x00,
	0x00, 0x00,
}

func (m *TradePairID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradePairID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradePairID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TakerDenom) > 0 {
		i -= len(m.TakerDenom)
		copy(dAtA[i:], m.TakerDenom)
		i = encodeVarintTradePairId(dAtA, i, uint64(len(m.TakerDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MakerDenom) > 0 {
		i -= len(m.MakerDenom)
		copy(dAtA[i:], m.MakerDenom)
		i = encodeVarintTradePairId(dAtA, i, uint64(len(m.MakerDenom)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintTradePairId(dAtA []byte, offset int, v uint64) int {
	offset -= sovTradePairId(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TradePairID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MakerDenom)
	if l > 0 {
		n += 1 + l + sovTradePairId(uint64(l))
	}
	l = len(m.TakerDenom)
	if l > 0 {
		n += 1 + l + sovTradePairId(uint64(l))
	}
	return n
}

func sovTradePairId(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTradePairId(x uint64) (n int) {
	return sovTradePairId(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TradePairID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradePairId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradePairID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradePairID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradePairId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradePairId
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradePairId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradePairId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradePairId
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradePairId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradePairId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradePairId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTradePairId(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTradePairId
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradePairId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradePairId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTradePairId
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTradePairId
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTradePairId
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTradePairId        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTradePairId          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTradePairId = fmt.Errorf("proto: unexpected end of group")
)
