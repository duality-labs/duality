// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: duality/dex/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetFeeTierRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetFeeTierRequest) Reset()         { *m = QueryGetFeeTierRequest{} }
func (m *QueryGetFeeTierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeTierRequest) ProtoMessage()    {}
func (*QueryGetFeeTierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{2}
}
func (m *QueryGetFeeTierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeTierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeTierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeTierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeTierRequest.Merge(m, src)
}
func (m *QueryGetFeeTierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeTierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeTierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeTierRequest proto.InternalMessageInfo

func (m *QueryGetFeeTierRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetFeeTierResponse struct {
	FeeTier FeeTier `protobuf:"bytes,1,opt,name=FeeTier,proto3" json:"FeeTier"`
}

func (m *QueryGetFeeTierResponse) Reset()         { *m = QueryGetFeeTierResponse{} }
func (m *QueryGetFeeTierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeTierResponse) ProtoMessage()    {}
func (*QueryGetFeeTierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{3}
}
func (m *QueryGetFeeTierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeTierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeTierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeTierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeTierResponse.Merge(m, src)
}
func (m *QueryGetFeeTierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeTierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeTierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeTierResponse proto.InternalMessageInfo

func (m *QueryGetFeeTierResponse) GetFeeTier() FeeTier {
	if m != nil {
		return m.FeeTier
	}
	return FeeTier{}
}

type QueryAllFeeTierRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeeTierRequest) Reset()         { *m = QueryAllFeeTierRequest{} }
func (m *QueryAllFeeTierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFeeTierRequest) ProtoMessage()    {}
func (*QueryAllFeeTierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{4}
}
func (m *QueryAllFeeTierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeeTierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeeTierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeeTierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeeTierRequest.Merge(m, src)
}
func (m *QueryAllFeeTierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeeTierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeeTierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeeTierRequest proto.InternalMessageInfo

func (m *QueryAllFeeTierRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFeeTierResponse struct {
	FeeTier    []FeeTier           `protobuf:"bytes,1,rep,name=FeeTier,proto3" json:"FeeTier"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeeTierResponse) Reset()         { *m = QueryAllFeeTierResponse{} }
func (m *QueryAllFeeTierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFeeTierResponse) ProtoMessage()    {}
func (*QueryAllFeeTierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{5}
}
func (m *QueryAllFeeTierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeeTierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeeTierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeeTierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeeTierResponse.Merge(m, src)
}
func (m *QueryAllFeeTierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeeTierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeeTierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeeTierResponse proto.InternalMessageInfo

func (m *QueryAllFeeTierResponse) GetFeeTier() []FeeTier {
	if m != nil {
		return m.FeeTier
	}
	return nil
}

func (m *QueryAllFeeTierResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLimitOrderTrancheUserRequest struct {
	PairId     string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TickIndex  int64  `protobuf:"varint,2,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	Token      string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	TrancheKey string `protobuf:"bytes,4,opt,name=trancheKey,proto3" json:"trancheKey,omitempty"`
	Address    string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetLimitOrderTrancheUserRequest) Reset()         { *m = QueryGetLimitOrderTrancheUserRequest{} }
func (m *QueryGetLimitOrderTrancheUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderTrancheUserRequest) ProtoMessage()    {}
func (*QueryGetLimitOrderTrancheUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{6}
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderTrancheUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderTrancheUserRequest.Merge(m, src)
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderTrancheUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderTrancheUserRequest proto.InternalMessageInfo

func (m *QueryGetLimitOrderTrancheUserRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetLimitOrderTrancheUserRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetLimitOrderTrancheUserRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *QueryGetLimitOrderTrancheUserRequest) GetTrancheKey() string {
	if m != nil {
		return m.TrancheKey
	}
	return ""
}

func (m *QueryGetLimitOrderTrancheUserRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetLimitOrderTrancheUserResponse struct {
	LimitOrderTrancheUser LimitOrderTrancheUser `protobuf:"bytes,1,opt,name=LimitOrderTrancheUser,proto3" json:"LimitOrderTrancheUser"`
}

func (m *QueryGetLimitOrderTrancheUserResponse) Reset()         { *m = QueryGetLimitOrderTrancheUserResponse{} }
func (m *QueryGetLimitOrderTrancheUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderTrancheUserResponse) ProtoMessage()    {}
func (*QueryGetLimitOrderTrancheUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{7}
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderTrancheUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderTrancheUserResponse.Merge(m, src)
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderTrancheUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderTrancheUserResponse proto.InternalMessageInfo

func (m *QueryGetLimitOrderTrancheUserResponse) GetLimitOrderTrancheUser() LimitOrderTrancheUser {
	if m != nil {
		return m.LimitOrderTrancheUser
	}
	return LimitOrderTrancheUser{}
}

type QueryAllLimitOrderTrancheUserRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheUserRequest) Reset()         { *m = QueryAllLimitOrderTrancheUserRequest{} }
func (m *QueryAllLimitOrderTrancheUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderTrancheUserRequest) ProtoMessage()    {}
func (*QueryAllLimitOrderTrancheUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{8}
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserRequest.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheUserRequest proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheUserRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLimitOrderTrancheUserResponse struct {
	LimitOrderTrancheUser []LimitOrderTrancheUser `protobuf:"bytes,1,rep,name=LimitOrderTrancheUser,proto3" json:"LimitOrderTrancheUser"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheUserResponse) Reset()         { *m = QueryAllLimitOrderTrancheUserResponse{} }
func (m *QueryAllLimitOrderTrancheUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderTrancheUserResponse) ProtoMessage()    {}
func (*QueryAllLimitOrderTrancheUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{9}
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserResponse.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheUserResponse proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheUserResponse) GetLimitOrderTrancheUser() []LimitOrderTrancheUser {
	if m != nil {
		return m.LimitOrderTrancheUser
	}
	return nil
}

func (m *QueryAllLimitOrderTrancheUserResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLimitOrderTrancheRequest struct {
	PairId     string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TickIndex  int64  `protobuf:"varint,2,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	TokenIn    string `protobuf:"bytes,3,opt,name=tokenIn,proto3" json:"tokenIn,omitempty"`
	TrancheKey string `protobuf:"bytes,4,opt,name=trancheKey,proto3" json:"trancheKey,omitempty"`
}

func (m *QueryGetLimitOrderTrancheRequest) Reset()         { *m = QueryGetLimitOrderTrancheRequest{} }
func (m *QueryGetLimitOrderTrancheRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderTrancheRequest) ProtoMessage()    {}
func (*QueryGetLimitOrderTrancheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{10}
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderTrancheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderTrancheRequest.Merge(m, src)
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderTrancheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderTrancheRequest proto.InternalMessageInfo

func (m *QueryGetLimitOrderTrancheRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetLimitOrderTrancheRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetLimitOrderTrancheRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *QueryGetLimitOrderTrancheRequest) GetTrancheKey() string {
	if m != nil {
		return m.TrancheKey
	}
	return ""
}

type QueryGetLimitOrderTrancheResponse struct {
	LimitOrderTranche LimitOrderTranche `protobuf:"bytes,1,opt,name=LimitOrderTranche,proto3" json:"LimitOrderTranche"`
}

func (m *QueryGetLimitOrderTrancheResponse) Reset()         { *m = QueryGetLimitOrderTrancheResponse{} }
func (m *QueryGetLimitOrderTrancheResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderTrancheResponse) ProtoMessage()    {}
func (*QueryGetLimitOrderTrancheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{11}
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderTrancheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderTrancheResponse.Merge(m, src)
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderTrancheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderTrancheResponse proto.InternalMessageInfo

func (m *QueryGetLimitOrderTrancheResponse) GetLimitOrderTranche() LimitOrderTranche {
	if m != nil {
		return m.LimitOrderTranche
	}
	return LimitOrderTranche{}
}

type QueryAllLimitOrderTrancheRequest struct {
	PairId     string             `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TokenIn    string             `protobuf:"bytes,2,opt,name=tokenIn,proto3" json:"tokenIn,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheRequest) Reset()         { *m = QueryAllLimitOrderTrancheRequest{} }
func (m *QueryAllLimitOrderTrancheRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderTrancheRequest) ProtoMessage()    {}
func (*QueryAllLimitOrderTrancheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{12}
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheRequest.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheRequest proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryAllLimitOrderTrancheRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *QueryAllLimitOrderTrancheRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLimitOrderTrancheResponse struct {
	LimitOrderTranche []LimitOrderTranche `protobuf:"bytes,1,rep,name=LimitOrderTranche,proto3" json:"LimitOrderTranche"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheResponse) Reset()         { *m = QueryAllLimitOrderTrancheResponse{} }
func (m *QueryAllLimitOrderTrancheResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderTrancheResponse) ProtoMessage()    {}
func (*QueryAllLimitOrderTrancheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{13}
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheResponse.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheResponse proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheResponse) GetLimitOrderTranche() []LimitOrderTranche {
	if m != nil {
		return m.LimitOrderTranche
	}
	return nil
}

func (m *QueryAllLimitOrderTrancheResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetUserPositionsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetUserPositionsRequest) Reset()         { *m = QueryGetUserPositionsRequest{} }
func (m *QueryGetUserPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserPositionsRequest) ProtoMessage()    {}
func (*QueryGetUserPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{14}
}
func (m *QueryGetUserPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserPositionsRequest.Merge(m, src)
}
func (m *QueryGetUserPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserPositionsRequest proto.InternalMessageInfo

func (m *QueryGetUserPositionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetUserPositionsResponse struct {
	UserPositions UserPositions `protobuf:"bytes,1,opt,name=UserPositions,proto3" json:"UserPositions"`
}

func (m *QueryGetUserPositionsResponse) Reset()         { *m = QueryGetUserPositionsResponse{} }
func (m *QueryGetUserPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserPositionsResponse) ProtoMessage()    {}
func (*QueryGetUserPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{15}
}
func (m *QueryGetUserPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserPositionsResponse.Merge(m, src)
}
func (m *QueryGetUserPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserPositionsResponse proto.InternalMessageInfo

func (m *QueryGetUserPositionsResponse) GetUserPositions() UserPositions {
	if m != nil {
		return m.UserPositions
	}
	return UserPositions{}
}

type QueryAllUserDepositsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAllUserDepositsRequest) Reset()         { *m = QueryAllUserDepositsRequest{} }
func (m *QueryAllUserDepositsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserDepositsRequest) ProtoMessage()    {}
func (*QueryAllUserDepositsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{16}
}
func (m *QueryAllUserDepositsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserDepositsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserDepositsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserDepositsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserDepositsRequest.Merge(m, src)
}
func (m *QueryAllUserDepositsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserDepositsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserDepositsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserDepositsRequest proto.InternalMessageInfo

func (m *QueryAllUserDepositsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryAllUserDepositsResponse struct {
	Deposits []DepositRecord `protobuf:"bytes,1,rep,name=Deposits,proto3" json:"Deposits"`
}

func (m *QueryAllUserDepositsResponse) Reset()         { *m = QueryAllUserDepositsResponse{} }
func (m *QueryAllUserDepositsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserDepositsResponse) ProtoMessage()    {}
func (*QueryAllUserDepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{17}
}
func (m *QueryAllUserDepositsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserDepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserDepositsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserDepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserDepositsResponse.Merge(m, src)
}
func (m *QueryAllUserDepositsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserDepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserDepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserDepositsResponse proto.InternalMessageInfo

func (m *QueryAllUserDepositsResponse) GetDeposits() []DepositRecord {
	if m != nil {
		return m.Deposits
	}
	return nil
}

type QueryAllUserLimitOrdersRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAllUserLimitOrdersRequest) Reset()         { *m = QueryAllUserLimitOrdersRequest{} }
func (m *QueryAllUserLimitOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserLimitOrdersRequest) ProtoMessage()    {}
func (*QueryAllUserLimitOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{18}
}
func (m *QueryAllUserLimitOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserLimitOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserLimitOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserLimitOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserLimitOrdersRequest.Merge(m, src)
}
func (m *QueryAllUserLimitOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserLimitOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserLimitOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserLimitOrdersRequest proto.InternalMessageInfo

func (m *QueryAllUserLimitOrdersRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryAllUserLimitOrdersResponse struct {
	LimitOrders []LimitOrderTrancheUser `protobuf:"bytes,1,rep,name=limitOrders,proto3" json:"limitOrders"`
}

func (m *QueryAllUserLimitOrdersResponse) Reset()         { *m = QueryAllUserLimitOrdersResponse{} }
func (m *QueryAllUserLimitOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserLimitOrdersResponse) ProtoMessage()    {}
func (*QueryAllUserLimitOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{19}
}
func (m *QueryAllUserLimitOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserLimitOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserLimitOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserLimitOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserLimitOrdersResponse.Merge(m, src)
}
func (m *QueryAllUserLimitOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserLimitOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserLimitOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserLimitOrdersResponse proto.InternalMessageInfo

func (m *QueryAllUserLimitOrdersResponse) GetLimitOrders() []LimitOrderTrancheUser {
	if m != nil {
		return m.LimitOrders
	}
	return nil
}

type QueryAllTickLiquidityRequest struct {
	PairId     string             `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TokenIn    string             `protobuf:"bytes,2,opt,name=tokenIn,proto3" json:"tokenIn,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTickLiquidityRequest) Reset()         { *m = QueryAllTickLiquidityRequest{} }
func (m *QueryAllTickLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTickLiquidityRequest) ProtoMessage()    {}
func (*QueryAllTickLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{20}
}
func (m *QueryAllTickLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTickLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTickLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTickLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTickLiquidityRequest.Merge(m, src)
}
func (m *QueryAllTickLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTickLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTickLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTickLiquidityRequest proto.InternalMessageInfo

func (m *QueryAllTickLiquidityRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryAllTickLiquidityRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *QueryAllTickLiquidityRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTickLiquidityResponse struct {
	TickLiquidity []TickLiquidity     `protobuf:"bytes,1,rep,name=tickLiquidity,proto3" json:"tickLiquidity"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTickLiquidityResponse) Reset()         { *m = QueryAllTickLiquidityResponse{} }
func (m *QueryAllTickLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTickLiquidityResponse) ProtoMessage()    {}
func (*QueryAllTickLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{21}
}
func (m *QueryAllTickLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTickLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTickLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTickLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTickLiquidityResponse.Merge(m, src)
}
func (m *QueryAllTickLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTickLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTickLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTickLiquidityResponse proto.InternalMessageInfo

func (m *QueryAllTickLiquidityResponse) GetTickLiquidity() []TickLiquidity {
	if m != nil {
		return m.TickLiquidity
	}
	return nil
}

func (m *QueryAllTickLiquidityResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFilledLimitOrderTrancheRequest struct {
	PairId     string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TokenIn    string `protobuf:"bytes,2,opt,name=tokenIn,proto3" json:"tokenIn,omitempty"`
	TickIndex  int64  `protobuf:"varint,3,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	TrancheKey string `protobuf:"bytes,4,opt,name=trancheKey,proto3" json:"trancheKey,omitempty"`
}

func (m *QueryGetFilledLimitOrderTrancheRequest) Reset() {
	*m = QueryGetFilledLimitOrderTrancheRequest{}
}
func (m *QueryGetFilledLimitOrderTrancheRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFilledLimitOrderTrancheRequest) ProtoMessage()    {}
func (*QueryGetFilledLimitOrderTrancheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{22}
}
func (m *QueryGetFilledLimitOrderTrancheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFilledLimitOrderTrancheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFilledLimitOrderTrancheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFilledLimitOrderTrancheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFilledLimitOrderTrancheRequest.Merge(m, src)
}
func (m *QueryGetFilledLimitOrderTrancheRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFilledLimitOrderTrancheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFilledLimitOrderTrancheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFilledLimitOrderTrancheRequest proto.InternalMessageInfo

func (m *QueryGetFilledLimitOrderTrancheRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetFilledLimitOrderTrancheRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *QueryGetFilledLimitOrderTrancheRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetFilledLimitOrderTrancheRequest) GetTrancheKey() string {
	if m != nil {
		return m.TrancheKey
	}
	return ""
}

type QueryGetFilledLimitOrderTrancheResponse struct {
	FilledLimitOrderTranche FilledLimitOrderTranche `protobuf:"bytes,1,opt,name=filledLimitOrderTranche,proto3" json:"filledLimitOrderTranche"`
}

func (m *QueryGetFilledLimitOrderTrancheResponse) Reset() {
	*m = QueryGetFilledLimitOrderTrancheResponse{}
}
func (m *QueryGetFilledLimitOrderTrancheResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFilledLimitOrderTrancheResponse) ProtoMessage()    {}
func (*QueryGetFilledLimitOrderTrancheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{23}
}
func (m *QueryGetFilledLimitOrderTrancheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFilledLimitOrderTrancheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFilledLimitOrderTrancheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFilledLimitOrderTrancheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFilledLimitOrderTrancheResponse.Merge(m, src)
}
func (m *QueryGetFilledLimitOrderTrancheResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFilledLimitOrderTrancheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFilledLimitOrderTrancheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFilledLimitOrderTrancheResponse proto.InternalMessageInfo

func (m *QueryGetFilledLimitOrderTrancheResponse) GetFilledLimitOrderTranche() FilledLimitOrderTranche {
	if m != nil {
		return m.FilledLimitOrderTranche
	}
	return FilledLimitOrderTranche{}
}

type QueryAllFilledLimitOrderTrancheRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFilledLimitOrderTrancheRequest) Reset() {
	*m = QueryAllFilledLimitOrderTrancheRequest{}
}
func (m *QueryAllFilledLimitOrderTrancheRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFilledLimitOrderTrancheRequest) ProtoMessage()    {}
func (*QueryAllFilledLimitOrderTrancheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{24}
}
func (m *QueryAllFilledLimitOrderTrancheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFilledLimitOrderTrancheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFilledLimitOrderTrancheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFilledLimitOrderTrancheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFilledLimitOrderTrancheRequest.Merge(m, src)
}
func (m *QueryAllFilledLimitOrderTrancheRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFilledLimitOrderTrancheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFilledLimitOrderTrancheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFilledLimitOrderTrancheRequest proto.InternalMessageInfo

func (m *QueryAllFilledLimitOrderTrancheRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFilledLimitOrderTrancheResponse struct {
	FilledLimitOrderTranche []FilledLimitOrderTranche `protobuf:"bytes,1,rep,name=filledLimitOrderTranche,proto3" json:"filledLimitOrderTranche"`
	Pagination              *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFilledLimitOrderTrancheResponse) Reset() {
	*m = QueryAllFilledLimitOrderTrancheResponse{}
}
func (m *QueryAllFilledLimitOrderTrancheResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFilledLimitOrderTrancheResponse) ProtoMessage()    {}
func (*QueryAllFilledLimitOrderTrancheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{25}
}
func (m *QueryAllFilledLimitOrderTrancheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFilledLimitOrderTrancheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFilledLimitOrderTrancheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFilledLimitOrderTrancheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFilledLimitOrderTrancheResponse.Merge(m, src)
}
func (m *QueryAllFilledLimitOrderTrancheResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFilledLimitOrderTrancheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFilledLimitOrderTrancheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFilledLimitOrderTrancheResponse proto.InternalMessageInfo

func (m *QueryAllFilledLimitOrderTrancheResponse) GetFilledLimitOrderTranche() []FilledLimitOrderTranche {
	if m != nil {
		return m.FilledLimitOrderTranche
	}
	return nil
}

func (m *QueryAllFilledLimitOrderTrancheResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPoolReservesRequest struct {
	PairId     string             `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TokenIn    string             `protobuf:"bytes,2,opt,name=tokenIn,proto3" json:"tokenIn,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolReservesRequest) Reset()         { *m = QueryAllPoolReservesRequest{} }
func (m *QueryAllPoolReservesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolReservesRequest) ProtoMessage()    {}
func (*QueryAllPoolReservesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{26}
}
func (m *QueryAllPoolReservesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolReservesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolReservesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolReservesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolReservesRequest.Merge(m, src)
}
func (m *QueryAllPoolReservesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolReservesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolReservesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolReservesRequest proto.InternalMessageInfo

func (m *QueryAllPoolReservesRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryAllPoolReservesRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *QueryAllPoolReservesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPoolReservesResponse struct {
	PoolReserves []PoolReserves      `protobuf:"bytes,1,rep,name=poolReserves,proto3" json:"poolReserves"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolReservesResponse) Reset()         { *m = QueryAllPoolReservesResponse{} }
func (m *QueryAllPoolReservesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolReservesResponse) ProtoMessage()    {}
func (*QueryAllPoolReservesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{27}
}
func (m *QueryAllPoolReservesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolReservesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolReservesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolReservesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolReservesResponse.Merge(m, src)
}
func (m *QueryAllPoolReservesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolReservesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolReservesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolReservesResponse proto.InternalMessageInfo

func (m *QueryAllPoolReservesResponse) GetPoolReserves() []PoolReserves {
	if m != nil {
		return m.PoolReserves
	}
	return nil
}

func (m *QueryAllPoolReservesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPoolReservesRequest struct {
	PairId    string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TokenIn   string `protobuf:"bytes,2,opt,name=tokenIn,proto3" json:"tokenIn,omitempty"`
	TickIndex int64  `protobuf:"varint,3,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	Fee       uint64 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *QueryGetPoolReservesRequest) Reset()         { *m = QueryGetPoolReservesRequest{} }
func (m *QueryGetPoolReservesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolReservesRequest) ProtoMessage()    {}
func (*QueryGetPoolReservesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{28}
}
func (m *QueryGetPoolReservesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolReservesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolReservesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolReservesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolReservesRequest.Merge(m, src)
}
func (m *QueryGetPoolReservesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolReservesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolReservesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolReservesRequest proto.InternalMessageInfo

func (m *QueryGetPoolReservesRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetPoolReservesRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *QueryGetPoolReservesRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetPoolReservesRequest) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type QueryGetPoolReservesResponse struct {
	PoolReserves PoolReserves `protobuf:"bytes,1,opt,name=poolReserves,proto3" json:"poolReserves"`
}

func (m *QueryGetPoolReservesResponse) Reset()         { *m = QueryGetPoolReservesResponse{} }
func (m *QueryGetPoolReservesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolReservesResponse) ProtoMessage()    {}
func (*QueryGetPoolReservesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{29}
}
func (m *QueryGetPoolReservesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolReservesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolReservesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolReservesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolReservesResponse.Merge(m, src)
}
func (m *QueryGetPoolReservesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolReservesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolReservesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolReservesResponse proto.InternalMessageInfo

func (m *QueryGetPoolReservesResponse) GetPoolReserves() PoolReserves {
	if m != nil {
		return m.PoolReserves
	}
	return PoolReserves{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "dualitylabs.duality.dex.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "dualitylabs.duality.dex.QueryParamsResponse")
	proto.RegisterType((*QueryGetFeeTierRequest)(nil), "dualitylabs.duality.dex.QueryGetFeeTierRequest")
	proto.RegisterType((*QueryGetFeeTierResponse)(nil), "dualitylabs.duality.dex.QueryGetFeeTierResponse")
	proto.RegisterType((*QueryAllFeeTierRequest)(nil), "dualitylabs.duality.dex.QueryAllFeeTierRequest")
	proto.RegisterType((*QueryAllFeeTierResponse)(nil), "dualitylabs.duality.dex.QueryAllFeeTierResponse")
	proto.RegisterType((*QueryGetLimitOrderTrancheUserRequest)(nil), "dualitylabs.duality.dex.QueryGetLimitOrderTrancheUserRequest")
	proto.RegisterType((*QueryGetLimitOrderTrancheUserResponse)(nil), "dualitylabs.duality.dex.QueryGetLimitOrderTrancheUserResponse")
	proto.RegisterType((*QueryAllLimitOrderTrancheUserRequest)(nil), "dualitylabs.duality.dex.QueryAllLimitOrderTrancheUserRequest")
	proto.RegisterType((*QueryAllLimitOrderTrancheUserResponse)(nil), "dualitylabs.duality.dex.QueryAllLimitOrderTrancheUserResponse")
	proto.RegisterType((*QueryGetLimitOrderTrancheRequest)(nil), "dualitylabs.duality.dex.QueryGetLimitOrderTrancheRequest")
	proto.RegisterType((*QueryGetLimitOrderTrancheResponse)(nil), "dualitylabs.duality.dex.QueryGetLimitOrderTrancheResponse")
	proto.RegisterType((*QueryAllLimitOrderTrancheRequest)(nil), "dualitylabs.duality.dex.QueryAllLimitOrderTrancheRequest")
	proto.RegisterType((*QueryAllLimitOrderTrancheResponse)(nil), "dualitylabs.duality.dex.QueryAllLimitOrderTrancheResponse")
	proto.RegisterType((*QueryGetUserPositionsRequest)(nil), "dualitylabs.duality.dex.QueryGetUserPositionsRequest")
	proto.RegisterType((*QueryGetUserPositionsResponse)(nil), "dualitylabs.duality.dex.QueryGetUserPositionsResponse")
	proto.RegisterType((*QueryAllUserDepositsRequest)(nil), "dualitylabs.duality.dex.QueryAllUserDepositsRequest")
	proto.RegisterType((*QueryAllUserDepositsResponse)(nil), "dualitylabs.duality.dex.QueryAllUserDepositsResponse")
	proto.RegisterType((*QueryAllUserLimitOrdersRequest)(nil), "dualitylabs.duality.dex.QueryAllUserLimitOrdersRequest")
	proto.RegisterType((*QueryAllUserLimitOrdersResponse)(nil), "dualitylabs.duality.dex.QueryAllUserLimitOrdersResponse")
	proto.RegisterType((*QueryAllTickLiquidityRequest)(nil), "dualitylabs.duality.dex.QueryAllTickLiquidityRequest")
	proto.RegisterType((*QueryAllTickLiquidityResponse)(nil), "dualitylabs.duality.dex.QueryAllTickLiquidityResponse")
	proto.RegisterType((*QueryGetFilledLimitOrderTrancheRequest)(nil), "dualitylabs.duality.dex.QueryGetFilledLimitOrderTrancheRequest")
	proto.RegisterType((*QueryGetFilledLimitOrderTrancheResponse)(nil), "dualitylabs.duality.dex.QueryGetFilledLimitOrderTrancheResponse")
	proto.RegisterType((*QueryAllFilledLimitOrderTrancheRequest)(nil), "dualitylabs.duality.dex.QueryAllFilledLimitOrderTrancheRequest")
	proto.RegisterType((*QueryAllFilledLimitOrderTrancheResponse)(nil), "dualitylabs.duality.dex.QueryAllFilledLimitOrderTrancheResponse")
	proto.RegisterType((*QueryAllPoolReservesRequest)(nil), "dualitylabs.duality.dex.QueryAllPoolReservesRequest")
	proto.RegisterType((*QueryAllPoolReservesResponse)(nil), "dualitylabs.duality.dex.QueryAllPoolReservesResponse")
	proto.RegisterType((*QueryGetPoolReservesRequest)(nil), "dualitylabs.duality.dex.QueryGetPoolReservesRequest")
	proto.RegisterType((*QueryGetPoolReservesResponse)(nil), "dualitylabs.duality.dex.QueryGetPoolReservesResponse")
}

func init() { proto.RegisterFile("duality/dex/query.proto", fileDescriptor_4664128fddcf2b7a) }

var fileDescriptor_4664128fddcf2b7a = []byte{
	// 1509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcf, 0x6f, 0xdc, 0xc4,
	0x17, 0xcf, 0xec, 0xa6, 0xed, 0xb7, 0xaf, 0xfd, 0xd2, 0x32, 0x84, 0x66, 0x65, 0xca, 0x26, 0x35,
	0xf4, 0x07, 0x6d, 0xb1, 0xfb, 0x2b, 0x6d, 0xd3, 0x1f, 0xb4, 0xa9, 0xa0, 0x21, 0x6a, 0x51, 0xc3,
	0x12, 0x10, 0x2a, 0x12, 0x5b, 0x27, 0x9e, 0x6c, 0x4d, 0x9d, 0xf5, 0xd6, 0x76, 0xaa, 0x44, 0x51,
	0x84, 0x00, 0xf5, 0xc6, 0x01, 0xd1, 0x03, 0x15, 0xf4, 0xc8, 0x91, 0x3f, 0xa0, 0x87, 0x5e, 0x38,
	0x20, 0xf5, 0xc0, 0xa1, 0x12, 0x08, 0x71, 0xa8, 0x10, 0x6a, 0x7b, 0xe4, 0x8f, 0x40, 0x1e, 0x3f,
	0xef, 0x8e, 0x63, 0x8f, 0xed, 0xdd, 0x2c, 0xea, 0x69, 0xd7, 0x9e, 0xf7, 0xde, 0x7c, 0x3e, 0x9f,
	0xf7, 0x66, 0x3c, 0xcf, 0x86, 0x61, 0x73, 0xd1, 0xb0, 0x2d, 0x7f, 0x59, 0x37, 0xd9, 0x92, 0x7e,
	0x73, 0x91, 0xb9, 0xcb, 0x5a, 0xcb, 0x75, 0x7c, 0x87, 0x46, 0x03, 0xb6, 0x31, 0xeb, 0x69, 0xf8,
	0x5f, 0x33, 0xd9, 0x92, 0x32, 0xd4, 0x70, 0x1a, 0x0e, 0xb7, 0xd1, 0x83, 0x7f, 0xa1, 0xb9, 0xb2,
	0xb3, 0xe1, 0x38, 0x0d, 0x9b, 0xe9, 0x46, 0xcb, 0xd2, 0x8d, 0x66, 0xd3, 0xf1, 0x0d, 0xdf, 0x72,
	0x9a, 0x1e, 0x8e, 0xee, 0x9f, 0x73, 0xbc, 0x05, 0xc7, 0xd3, 0x67, 0x0d, 0x8f, 0x85, 0xb3, 0xe8,
	0xb7, 0x0e, 0xcf, 0x32, 0xdf, 0x38, 0xac, 0xb7, 0x8c, 0x86, 0xd5, 0xe4, 0xc6, 0x68, 0x5b, 0x11,
	0x11, 0xb5, 0x0c, 0xd7, 0x58, 0x88, 0xa2, 0x28, 0xe2, 0xc8, 0x3c, 0x63, 0x75, 0xdf, 0x62, 0x6e,
	0x34, 0x83, 0x38, 0x66, 0x5b, 0x0b, 0x96, 0x5f, 0x77, 0x5c, 0x93, 0xb9, 0x75, 0xdf, 0x35, 0x9a,
	0x73, 0xd7, 0x59, 0x7d, 0xd1, 0x6b, 0xdb, 0xee, 0xce, 0xb1, 0x45, 0xb3, 0x51, 0xd1, 0x2c, 0x70,
	0xaf, 0xb7, 0x1c, 0xcf, 0x12, 0x69, 0xc5, 0x2c, 0x4c, 0xc6, 0x87, 0xeb, 0x2e, 0x9b, 0x73, 0x5c,
	0x33, 0xcd, 0xc2, 0xb7, 0xe6, 0x6e, 0xd4, 0x6d, 0xeb, 0xe6, 0xa2, 0x65, 0x06, 0x62, 0x86, 0x16,
	0x07, 0x63, 0xa4, 0x2c, 0xdb, 0x66, 0x66, 0x5d, 0x8e, 0x69, 0x24, 0x26, 0x8e, 0xe3, 0xd8, 0x75,
	0x97, 0x79, 0xcc, 0xbd, 0xc5, 0x10, 0x92, 0x3a, 0x04, 0xf4, 0xfd, 0x40, 0xdf, 0x69, 0x2e, 0x5c,
	0x8d, 0xdd, 0x5c, 0x64, 0x9e, 0xaf, 0xce, 0xc0, 0x4b, 0xb1, 0xbb, 0x5e, 0xcb, 0x69, 0x7a, 0x8c,
	0x9e, 0x85, 0x8d, 0xa1, 0xc0, 0x15, 0x32, 0x4a, 0xf6, 0x6d, 0x39, 0x32, 0xa2, 0x49, 0x92, 0xae,
	0x85, 0x8e, 0x17, 0x06, 0x1f, 0xfe, 0x35, 0x32, 0x50, 0x43, 0x27, 0x75, 0x1f, 0xec, 0xe0, 0x51,
	0x27, 0x99, 0x7f, 0x91, 0xb1, 0x19, 0x8b, 0xb9, 0x38, 0x1f, 0x7d, 0x01, 0x4a, 0x96, 0xc9, 0x83,
	0x0e, 0xd6, 0x4a, 0x96, 0xa9, 0x7e, 0x02, 0xc3, 0x09, 0x4b, 0xc4, 0x70, 0x1e, 0x36, 0xe1, 0x2d,
	0x04, 0x31, 0x2a, 0x05, 0x81, 0x76, 0x88, 0x22, 0x72, 0x53, 0xaf, 0x21, 0x8c, 0x09, 0xdb, 0x5e,
	0x03, 0xe3, 0x22, 0x40, 0xa7, 0xbc, 0x30, 0xfc, 0x1e, 0x2d, 0xac, 0x45, 0x2d, 0xa8, 0x45, 0x2d,
	0xac, 0x78, 0xac, 0x45, 0x6d, 0xda, 0x68, 0x30, 0xf4, 0xad, 0x09, 0x9e, 0xea, 0x8f, 0x04, 0xf1,
	0x8b, 0x53, 0xa4, 0xe1, 0x2f, 0xf7, 0x80, 0x9f, 0x4e, 0xc6, 0x50, 0x96, 0x38, 0xca, 0xbd, 0xb9,
	0x28, 0xc3, 0xe9, 0x63, 0x30, 0x7f, 0x22, 0xf0, 0x7a, 0x24, 0xf3, 0xe5, 0xa0, 0x84, 0xae, 0x04,
	0x15, 0x34, 0x13, 0x16, 0xd0, 0x87, 0x5e, 0x47, 0x97, 0x1d, 0x41, 0xde, 0x2d, 0x77, 0x2a, 0x4c,
	0xd1, 0xe6, 0x1a, 0x5e, 0xd1, 0x9d, 0xb0, 0x39, 0xa8, 0xd1, 0xa9, 0xa6, 0xc9, 0x96, 0x38, 0x90,
	0x72, 0xad, 0x73, 0x83, 0x0e, 0xc1, 0x06, 0xdf, 0xb9, 0xc1, 0x9a, 0x95, 0x32, 0x77, 0x0a, 0x2f,
	0x68, 0x15, 0x00, 0x4b, 0xf4, 0x12, 0x5b, 0xae, 0x0c, 0xf2, 0x21, 0xe1, 0x0e, 0xad, 0xc0, 0x26,
	0xc3, 0x34, 0x5d, 0xe6, 0x79, 0x95, 0x0d, 0x7c, 0x30, 0xba, 0x54, 0xef, 0x10, 0xd8, 0x9d, 0x03,
	0x17, 0x35, 0xfe, 0x0c, 0x5e, 0x4e, 0x35, 0xc0, 0x94, 0x6a, 0x52, 0xc5, 0x53, 0xbd, 0x50, 0xff,
	0xf4, 0x90, 0x6a, 0x13, 0x35, 0x9c, 0xb0, 0xed, 0x4c, 0x0d, 0xfb, 0x55, 0x5b, 0x8f, 0x23, 0x15,
	0xe4, 0x13, 0xe6, 0xab, 0x50, 0xee, 0xb3, 0x0a, 0xfd, 0xab, 0xc9, 0x6f, 0x09, 0x8c, 0x4a, 0x93,
	0xbc, 0xbe, 0x7a, 0xac, 0xc0, 0x26, 0x5e, 0x82, 0x53, 0x51, 0x45, 0x46, 0x97, 0x79, 0x35, 0xa9,
	0x7e, 0x45, 0x60, 0x57, 0x06, 0x28, 0xd4, 0xfb, 0x53, 0x78, 0x31, 0x31, 0x88, 0x89, 0xde, 0x5f,
	0x5c, 0x6b, 0xd4, 0x39, 0x19, 0x4a, 0xbd, 0x17, 0x49, 0x93, 0x96, 0xf9, 0x3c, 0x69, 0x04, 0xf2,
	0xa5, 0x38, 0xf9, 0x78, 0x61, 0x96, 0x7b, 0x2e, 0xcc, 0x5f, 0x23, 0x91, 0xd2, 0xe1, 0x65, 0x8b,
	0x54, 0xee, 0x93, 0x48, 0xfd, 0x2b, 0xc4, 0x93, 0xb0, 0x33, 0x4a, 0x79, 0x50, 0xe1, 0xd3, 0xd1,
	0xa3, 0x3c, 0x12, 0x5a, 0xd8, 0xa7, 0x48, 0x7c, 0x9f, 0xf2, 0xe0, 0x55, 0x89, 0x27, 0x6a, 0x50,
	0x83, 0xff, 0xc7, 0x06, 0xda, 0xbb, 0x81, 0x8c, 0x7f, 0xcc, 0x1a, 0xb9, 0xc7, 0x43, 0xa8, 0x27,
	0xe0, 0x95, 0x48, 0xfc, 0x60, 0xe0, 0xed, 0xf0, 0x70, 0x51, 0x00, 0xed, 0x75, 0xe4, 0x99, 0x70,
	0x44, 0xb0, 0xef, 0xc2, 0xff, 0xa2, 0x7b, 0x98, 0x27, 0x39, 0x4e, 0x34, 0xac, 0xf1, 0x13, 0x0d,
	0xe2, 0x6c, 0x7b, 0xab, 0xa7, 0xa0, 0x2a, 0xce, 0xd4, 0xc9, 0x5d, 0x01, 0x94, 0xcb, 0x30, 0x22,
	0xf5, 0x45, 0xa0, 0x1f, 0xc1, 0x16, 0xbb, 0x73, 0x7b, 0x5d, 0x9b, 0x9c, 0x18, 0x48, 0xbd, 0x4b,
	0x3a, 0x0a, 0xcd, 0x58, 0x73, 0x37, 0x2e, 0x47, 0x07, 0xb2, 0xe7, 0xbf, 0xe4, 0x1e, 0x10, 0x2c,
	0xb5, 0x24, 0xb4, 0x4e, 0xa9, 0xf9, 0xe2, 0x40, 0x6e, 0x0a, 0x63, 0x61, 0xa2, 0x52, 0x8b, 0x85,
	0xe8, 0xdf, 0x12, 0xbb, 0x4b, 0x60, 0x4f, 0xfb, 0x98, 0xc7, 0x4f, 0xb2, 0x7d, 0xdc, 0xd6, 0x62,
	0xcf, 0x82, 0xf2, 0xda, 0x67, 0x41, 0xde, 0x8e, 0xff, 0x03, 0x81, 0xbd, 0xb9, 0xd0, 0x50, 0xe3,
	0x16, 0x0c, 0xcf, 0xa7, 0x9b, 0xe0, 0xc2, 0x3e, 0x24, 0x3f, 0xe1, 0xa5, 0xfb, 0xa1, 0xee, 0xb2,
	0xb0, 0x6a, 0x0b, 0x75, 0x0b, 0x8e, 0x97, 0xd9, 0xba, 0xf5, 0xeb, 0xd4, 0xf1, 0x2c, 0xd2, 0x23,
	0x6b, 0xca, 0x22, 0x7a, 0x94, 0xff, 0x03, 0x3d, 0xfa, 0x57, 0x91, 0xdf, 0x91, 0xce, 0x36, 0x3a,
	0xed, 0x38, 0x76, 0x0d, 0x9b, 0xa5, 0xe7, 0xbf, 0xd4, 0xef, 0x0b, 0xbb, 0x50, 0x1c, 0x19, 0xaa,
	0x7e, 0x05, 0xb6, 0xb6, 0x84, 0xfb, 0x28, 0xf5, 0x6e, 0x79, 0x87, 0x26, 0x18, 0xa3, 0xbe, 0xb1,
	0x00, 0xfd, 0x13, 0xf5, 0x73, 0xd4, 0x74, 0x92, 0xf9, 0xfd, 0xd1, 0x34, 0x7b, 0x69, 0x6f, 0x87,
	0xf2, 0x3c, 0x63, 0x7c, 0x4d, 0x0f, 0xd6, 0x82, 0xbf, 0xaa, 0xd3, 0x79, 0x94, 0x17, 0x94, 0x8e,
	0xac, 0x4b, 0xba, 0x23, 0x5f, 0x54, 0x60, 0x03, 0x9f, 0x91, 0x7e, 0x4d, 0x60, 0x63, 0xd8, 0x0b,
	0xd3, 0x03, 0xd2, 0x78, 0xc9, 0x06, 0x5c, 0x39, 0x58, 0xcc, 0x38, 0x24, 0xa0, 0xee, 0xfd, 0xf2,
	0xb7, 0x67, 0x77, 0x4a, 0xbb, 0xe8, 0x88, 0x2e, 0x78, 0xe9, 0xc9, 0xf7, 0x22, 0xf4, 0x1e, 0x69,
	0x77, 0x9f, 0x54, 0xcf, 0x9e, 0x22, 0xd1, 0xa4, 0x2b, 0x87, 0x8a, 0x3b, 0x20, 0x2e, 0x8d, 0xe3,
	0xda, 0x47, 0xf7, 0x48, 0x71, 0x45, 0x6f, 0x65, 0xf4, 0x15, 0xcb, 0x5c, 0xa5, 0xdf, 0x13, 0x00,
	0x8c, 0x31, 0x61, 0xdb, 0x79, 0x08, 0x13, 0xfd, 0x7b, 0x1e, 0xc2, 0x64, 0x37, 0xae, 0xbe, 0xc1,
	0x11, 0xbe, 0x46, 0x77, 0xe5, 0x22, 0xa4, 0xb7, 0x4b, 0x92, 0x7e, 0x8a, 0x9e, 0xcd, 0x15, 0x26,
	0xab, 0x33, 0x54, 0xde, 0xea, 0xd5, 0x1d, 0x39, 0x2c, 0x70, 0x0e, 0x0d, 0xca, 0xa4, 0x1c, 0x64,
	0xef, 0xb7, 0xf4, 0x95, 0x70, 0xad, 0xad, 0xea, 0x2b, 0x7c, 0x6d, 0x05, 0xbf, 0xd1, 0x3a, 0x0a,
	0xfe, 0xb7, 0x9f, 0x87, 0xab, 0xfa, 0x0a, 0x9e, 0xc4, 0x56, 0xe9, 0xef, 0x04, 0x2a, 0xa9, 0x80,
	0x82, 0x94, 0x9d, 0xcd, 0xcd, 0xc0, 0x7a, 0xa4, 0xc8, 0x6b, 0x79, 0xd5, 0x71, 0x2e, 0xc5, 0x51,
	0x7a, 0xb8, 0x6b, 0x29, 0xe8, 0x3f, 0x24, 0xa5, 0x33, 0xa1, 0xe3, 0xdd, 0xe7, 0x26, 0xe2, 0x72,
	0xaa, 0x17, 0x57, 0xe4, 0x71, 0x8d, 0xf3, 0xb8, 0x4a, 0x3f, 0xee, 0x86, 0xc7, 0xda, 0x6c, 0x4e,
	0x65, 0xe4, 0x93, 0xfe, 0x41, 0x60, 0x28, 0x31, 0x7f, 0x90, 0xc1, 0xf1, 0xee, 0x53, 0x50, 0x90,
	0x71, 0x56, 0x5f, 0xa8, 0x4e, 0x72, 0xc6, 0x13, 0xf4, 0xdc, 0x3a, 0x19, 0xd3, 0x07, 0x04, 0xb6,
	0xaf, 0xed, 0xbc, 0xe8, 0x58, 0x6e, 0x2e, 0xd2, 0x7a, 0x3c, 0xe5, 0x78, 0xb7, 0x6e, 0x85, 0xcb,
	0x90, 0xaf, 0xbe, 0xf6, 0xeb, 0x61, 0x61, 0x75, 0xdd, 0x27, 0xb0, 0x4d, 0xec, 0xc3, 0x82, 0x94,
	0x1c, 0xcb, 0xd5, 0x35, 0xa5, 0xe5, 0x53, 0xc6, 0xba, 0xf4, 0x42, 0xec, 0x27, 0x39, 0xf6, 0x23,
	0xf4, 0x50, 0x36, 0x76, 0x7c, 0x7b, 0x2d, 0x42, 0xff, 0x85, 0x00, 0x5d, 0xd3, 0x9c, 0x05, 0xe8,
	0x4f, 0x14, 0xc2, 0x91, 0xec, 0x06, 0x95, 0x93, 0xdd, 0x3b, 0x22, 0x87, 0x33, 0x9c, 0xc3, 0x71,
	0x7a, 0x2c, 0x9b, 0x83, 0x50, 0x51, 0x6b, 0x78, 0x6c, 0x8f, 0xb5, 0x41, 0x01, 0x8b, 0x7c, 0x35,
	0xd3, 0x7a, 0xc3, 0xbc, 0x0a, 0x92, 0xf5, 0x6d, 0xea, 0x05, 0xce, 0xe0, 0x0c, 0x3d, 0x25, 0x65,
	0x10, 0xff, 0x38, 0x90, 0xb6, 0x12, 0x6e, 0x97, 0x60, 0x58, 0x72, 0xa0, 0xa6, 0xe7, 0xf2, 0x9f,
	0xe5, 0x99, 0x8d, 0x85, 0x72, 0xbe, 0xf7, 0x00, 0x48, 0xb1, 0xc1, 0x29, 0x1a, 0xb4, 0x2e, 0x7f,
	0xf4, 0x4a, 0xbf, 0x6e, 0x74, 0xb5, 0xd5, 0x3d, 0x26, 0xa0, 0x48, 0xc0, 0x04, 0x99, 0x3d, 0x97,
	0x7f, 0x68, 0x58, 0x97, 0x14, 0xf9, 0x1d, 0x93, 0x7a, 0x9a, 0x4b, 0x31, 0x46, 0x8f, 0xf6, 0x20,
	0x05, 0xfd, 0x99, 0xc0, 0x36, 0xf1, 0x44, 0x5a, 0x6c, 0xc7, 0x48, 0x39, 0x89, 0x17, 0xd8, 0x31,
	0xd2, 0x8e, 0xcf, 0xea, 0x04, 0x47, 0x7f, 0x9a, 0x8e, 0xcb, 0x4f, 0x9f, 0xe2, 0x87, 0xa7, 0xb4,
	0x52, 0x7d, 0x44, 0x60, 0xab, 0x18, 0x3b, 0x8f, 0x40, 0x7a, 0x2b, 0xa1, 0x8c, 0x75, 0xe9, 0x85,
	0x04, 0x3e, 0xe0, 0x04, 0xde, 0xa3, 0x97, 0x7a, 0x26, 0x10, 0x2f, 0xbe, 0x79, 0xc6, 0x56, 0x2f,
	0xbc, 0xf3, 0xf0, 0x49, 0x95, 0x3c, 0x7a, 0x52, 0x25, 0x7f, 0x3f, 0xa9, 0x92, 0x6f, 0x9e, 0x56,
	0x07, 0x1e, 0x3d, 0xad, 0x0e, 0xfc, 0xf9, 0xb4, 0x3a, 0x70, 0xf5, 0x40, 0xc3, 0xf2, 0xaf, 0x2f,
	0xce, 0x6a, 0x73, 0xce, 0x42, 0x34, 0xc9, 0x9b, 0xb1, 0x19, 0x97, 0xc2, 0x05, 0xbe, 0xdc, 0x62,
	0xde, 0xec, 0x46, 0xfe, 0x99, 0xee, 0xe8, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x41, 0xb3,
	0xc6, 0x78, 0x1d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a FeeTier by id.
	FeeTier(ctx context.Context, in *QueryGetFeeTierRequest, opts ...grpc.CallOption) (*QueryGetFeeTierResponse, error)
	// Queries a list of FeeTier items.
	FeeTierAll(ctx context.Context, in *QueryAllFeeTierRequest, opts ...grpc.CallOption) (*QueryAllFeeTierResponse, error)
	// Queries a LimitOrderTrancheUser by index.
	LimitOrderTrancheUser(ctx context.Context, in *QueryGetLimitOrderTrancheUserRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderTrancheUserResponse, error)
	// Queries a list of LimitOrderTrancheMap items.
	LimitOrderTrancheUserAll(ctx context.Context, in *QueryAllLimitOrderTrancheUserRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheUserResponse, error)
	// Queries a LimitOrderTranche by index.
	LimitOrderTranche(ctx context.Context, in *QueryGetLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderTrancheResponse, error)
	// Queries a list of LimitOrderTranche items for a given pairId / TokenIn combination.
	LimitOrderTrancheAll(ctx context.Context, in *QueryAllLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheResponse, error)
	// Queries a list of GetUserPositions items.
	GetUserPositions(ctx context.Context, in *QueryGetUserPositionsRequest, opts ...grpc.CallOption) (*QueryGetUserPositionsResponse, error)
	// Queries a list of UserDeposits items.
	UserDepositsAll(ctx context.Context, in *QueryAllUserDepositsRequest, opts ...grpc.CallOption) (*QueryAllUserDepositsResponse, error)
	// Queries a list of UserLimitOrders items.
	UserLimitOrdersAll(ctx context.Context, in *QueryAllUserLimitOrdersRequest, opts ...grpc.CallOption) (*QueryAllUserLimitOrdersResponse, error)
	// Queries a list of TickLiquidity items.
	TickLiquidityAll(ctx context.Context, in *QueryAllTickLiquidityRequest, opts ...grpc.CallOption) (*QueryAllTickLiquidityResponse, error)
	// Queries a FilledLimitOrderTranche by index.
	FilledLimitOrderTranche(ctx context.Context, in *QueryGetFilledLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryGetFilledLimitOrderTrancheResponse, error)
	// Queries a list of FilledLimitOrderTranche items.
	FilledLimitOrderTrancheAll(ctx context.Context, in *QueryAllFilledLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryAllFilledLimitOrderTrancheResponse, error)
	// Queries a list of PoolReserves items.
	PoolReservesAll(ctx context.Context, in *QueryAllPoolReservesRequest, opts ...grpc.CallOption) (*QueryAllPoolReservesResponse, error)
	// Queries a PoolReserve by index
	PoolReserves(ctx context.Context, in *QueryGetPoolReservesRequest, opts ...grpc.CallOption) (*QueryGetPoolReservesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeTier(ctx context.Context, in *QueryGetFeeTierRequest, opts ...grpc.CallOption) (*QueryGetFeeTierResponse, error) {
	out := new(QueryGetFeeTierResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/FeeTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeTierAll(ctx context.Context, in *QueryAllFeeTierRequest, opts ...grpc.CallOption) (*QueryAllFeeTierResponse, error) {
	out := new(QueryAllFeeTierResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/FeeTierAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderTrancheUser(ctx context.Context, in *QueryGetLimitOrderTrancheUserRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderTrancheUserResponse, error) {
	out := new(QueryGetLimitOrderTrancheUserResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/LimitOrderTrancheUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderTrancheUserAll(ctx context.Context, in *QueryAllLimitOrderTrancheUserRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheUserResponse, error) {
	out := new(QueryAllLimitOrderTrancheUserResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/LimitOrderTrancheUserAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderTranche(ctx context.Context, in *QueryGetLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderTrancheResponse, error) {
	out := new(QueryGetLimitOrderTrancheResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/LimitOrderTranche", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderTrancheAll(ctx context.Context, in *QueryAllLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheResponse, error) {
	out := new(QueryAllLimitOrderTrancheResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/LimitOrderTrancheAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUserPositions(ctx context.Context, in *QueryGetUserPositionsRequest, opts ...grpc.CallOption) (*QueryGetUserPositionsResponse, error) {
	out := new(QueryGetUserPositionsResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/GetUserPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserDepositsAll(ctx context.Context, in *QueryAllUserDepositsRequest, opts ...grpc.CallOption) (*QueryAllUserDepositsResponse, error) {
	out := new(QueryAllUserDepositsResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/UserDepositsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserLimitOrdersAll(ctx context.Context, in *QueryAllUserLimitOrdersRequest, opts ...grpc.CallOption) (*QueryAllUserLimitOrdersResponse, error) {
	out := new(QueryAllUserLimitOrdersResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/UserLimitOrdersAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TickLiquidityAll(ctx context.Context, in *QueryAllTickLiquidityRequest, opts ...grpc.CallOption) (*QueryAllTickLiquidityResponse, error) {
	out := new(QueryAllTickLiquidityResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/TickLiquidityAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FilledLimitOrderTranche(ctx context.Context, in *QueryGetFilledLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryGetFilledLimitOrderTrancheResponse, error) {
	out := new(QueryGetFilledLimitOrderTrancheResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/FilledLimitOrderTranche", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FilledLimitOrderTrancheAll(ctx context.Context, in *QueryAllFilledLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryAllFilledLimitOrderTrancheResponse, error) {
	out := new(QueryAllFilledLimitOrderTrancheResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/FilledLimitOrderTrancheAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolReservesAll(ctx context.Context, in *QueryAllPoolReservesRequest, opts ...grpc.CallOption) (*QueryAllPoolReservesResponse, error) {
	out := new(QueryAllPoolReservesResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/PoolReservesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolReserves(ctx context.Context, in *QueryGetPoolReservesRequest, opts ...grpc.CallOption) (*QueryGetPoolReservesResponse, error) {
	out := new(QueryGetPoolReservesResponse)
	err := c.cc.Invoke(ctx, "/dualitylabs.duality.dex.Query/PoolReserves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a FeeTier by id.
	FeeTier(context.Context, *QueryGetFeeTierRequest) (*QueryGetFeeTierResponse, error)
	// Queries a list of FeeTier items.
	FeeTierAll(context.Context, *QueryAllFeeTierRequest) (*QueryAllFeeTierResponse, error)
	// Queries a LimitOrderTrancheUser by index.
	LimitOrderTrancheUser(context.Context, *QueryGetLimitOrderTrancheUserRequest) (*QueryGetLimitOrderTrancheUserResponse, error)
	// Queries a list of LimitOrderTrancheMap items.
	LimitOrderTrancheUserAll(context.Context, *QueryAllLimitOrderTrancheUserRequest) (*QueryAllLimitOrderTrancheUserResponse, error)
	// Queries a LimitOrderTranche by index.
	LimitOrderTranche(context.Context, *QueryGetLimitOrderTrancheRequest) (*QueryGetLimitOrderTrancheResponse, error)
	// Queries a list of LimitOrderTranche items for a given pairId / TokenIn combination.
	LimitOrderTrancheAll(context.Context, *QueryAllLimitOrderTrancheRequest) (*QueryAllLimitOrderTrancheResponse, error)
	// Queries a list of GetUserPositions items.
	GetUserPositions(context.Context, *QueryGetUserPositionsRequest) (*QueryGetUserPositionsResponse, error)
	// Queries a list of UserDeposits items.
	UserDepositsAll(context.Context, *QueryAllUserDepositsRequest) (*QueryAllUserDepositsResponse, error)
	// Queries a list of UserLimitOrders items.
	UserLimitOrdersAll(context.Context, *QueryAllUserLimitOrdersRequest) (*QueryAllUserLimitOrdersResponse, error)
	// Queries a list of TickLiquidity items.
	TickLiquidityAll(context.Context, *QueryAllTickLiquidityRequest) (*QueryAllTickLiquidityResponse, error)
	// Queries a FilledLimitOrderTranche by index.
	FilledLimitOrderTranche(context.Context, *QueryGetFilledLimitOrderTrancheRequest) (*QueryGetFilledLimitOrderTrancheResponse, error)
	// Queries a list of FilledLimitOrderTranche items.
	FilledLimitOrderTrancheAll(context.Context, *QueryAllFilledLimitOrderTrancheRequest) (*QueryAllFilledLimitOrderTrancheResponse, error)
	// Queries a list of PoolReserves items.
	PoolReservesAll(context.Context, *QueryAllPoolReservesRequest) (*QueryAllPoolReservesResponse, error)
	// Queries a PoolReserve by index
	PoolReserves(context.Context, *QueryGetPoolReservesRequest) (*QueryGetPoolReservesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) FeeTier(ctx context.Context, req *QueryGetFeeTierRequest) (*QueryGetFeeTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeTier not implemented")
}
func (*UnimplementedQueryServer) FeeTierAll(ctx context.Context, req *QueryAllFeeTierRequest) (*QueryAllFeeTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeTierAll not implemented")
}
func (*UnimplementedQueryServer) LimitOrderTrancheUser(ctx context.Context, req *QueryGetLimitOrderTrancheUserRequest) (*QueryGetLimitOrderTrancheUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderTrancheUser not implemented")
}
func (*UnimplementedQueryServer) LimitOrderTrancheUserAll(ctx context.Context, req *QueryAllLimitOrderTrancheUserRequest) (*QueryAllLimitOrderTrancheUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderTrancheUserAll not implemented")
}
func (*UnimplementedQueryServer) LimitOrderTranche(ctx context.Context, req *QueryGetLimitOrderTrancheRequest) (*QueryGetLimitOrderTrancheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderTranche not implemented")
}
func (*UnimplementedQueryServer) LimitOrderTrancheAll(ctx context.Context, req *QueryAllLimitOrderTrancheRequest) (*QueryAllLimitOrderTrancheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderTrancheAll not implemented")
}
func (*UnimplementedQueryServer) GetUserPositions(ctx context.Context, req *QueryGetUserPositionsRequest) (*QueryGetUserPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPositions not implemented")
}
func (*UnimplementedQueryServer) UserDepositsAll(ctx context.Context, req *QueryAllUserDepositsRequest) (*QueryAllUserDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDepositsAll not implemented")
}
func (*UnimplementedQueryServer) UserLimitOrdersAll(ctx context.Context, req *QueryAllUserLimitOrdersRequest) (*QueryAllUserLimitOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLimitOrdersAll not implemented")
}
func (*UnimplementedQueryServer) TickLiquidityAll(ctx context.Context, req *QueryAllTickLiquidityRequest) (*QueryAllTickLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TickLiquidityAll not implemented")
}
func (*UnimplementedQueryServer) FilledLimitOrderTranche(ctx context.Context, req *QueryGetFilledLimitOrderTrancheRequest) (*QueryGetFilledLimitOrderTrancheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilledLimitOrderTranche not implemented")
}
func (*UnimplementedQueryServer) FilledLimitOrderTrancheAll(ctx context.Context, req *QueryAllFilledLimitOrderTrancheRequest) (*QueryAllFilledLimitOrderTrancheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilledLimitOrderTrancheAll not implemented")
}
func (*UnimplementedQueryServer) PoolReservesAll(ctx context.Context, req *QueryAllPoolReservesRequest) (*QueryAllPoolReservesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolReservesAll not implemented")
}
func (*UnimplementedQueryServer) PoolReserves(ctx context.Context, req *QueryGetPoolReservesRequest) (*QueryGetPoolReservesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolReserves not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFeeTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/FeeTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeTier(ctx, req.(*QueryGetFeeTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeTierAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFeeTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeTierAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/FeeTierAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeTierAll(ctx, req.(*QueryAllFeeTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderTrancheUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLimitOrderTrancheUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderTrancheUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/LimitOrderTrancheUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderTrancheUser(ctx, req.(*QueryGetLimitOrderTrancheUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderTrancheUserAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLimitOrderTrancheUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderTrancheUserAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/LimitOrderTrancheUserAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderTrancheUserAll(ctx, req.(*QueryAllLimitOrderTrancheUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderTranche_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLimitOrderTrancheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderTranche(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/LimitOrderTranche",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderTranche(ctx, req.(*QueryGetLimitOrderTrancheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderTrancheAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLimitOrderTrancheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderTrancheAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/LimitOrderTrancheAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderTrancheAll(ctx, req.(*QueryAllLimitOrderTrancheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUserPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUserPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/GetUserPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUserPositions(ctx, req.(*QueryGetUserPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserDepositsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserDepositsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/UserDepositsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserDepositsAll(ctx, req.(*QueryAllUserDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserLimitOrdersAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserLimitOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserLimitOrdersAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/UserLimitOrdersAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserLimitOrdersAll(ctx, req.(*QueryAllUserLimitOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TickLiquidityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTickLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TickLiquidityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/TickLiquidityAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TickLiquidityAll(ctx, req.(*QueryAllTickLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FilledLimitOrderTranche_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFilledLimitOrderTrancheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FilledLimitOrderTranche(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/FilledLimitOrderTranche",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FilledLimitOrderTranche(ctx, req.(*QueryGetFilledLimitOrderTrancheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FilledLimitOrderTrancheAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFilledLimitOrderTrancheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FilledLimitOrderTrancheAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/FilledLimitOrderTrancheAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FilledLimitOrderTrancheAll(ctx, req.(*QueryAllFilledLimitOrderTrancheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolReservesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPoolReservesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolReservesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/PoolReservesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolReservesAll(ctx, req.(*QueryAllPoolReservesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolReserves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolReservesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolReserves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dualitylabs.duality.dex.Query/PoolReserves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolReserves(ctx, req.(*QueryGetPoolReservesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dualitylabs.duality.dex.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "FeeTier",
			Handler:    _Query_FeeTier_Handler,
		},
		{
			MethodName: "FeeTierAll",
			Handler:    _Query_FeeTierAll_Handler,
		},
		{
			MethodName: "LimitOrderTrancheUser",
			Handler:    _Query_LimitOrderTrancheUser_Handler,
		},
		{
			MethodName: "LimitOrderTrancheUserAll",
			Handler:    _Query_LimitOrderTrancheUserAll_Handler,
		},
		{
			MethodName: "LimitOrderTranche",
			Handler:    _Query_LimitOrderTranche_Handler,
		},
		{
			MethodName: "LimitOrderTrancheAll",
			Handler:    _Query_LimitOrderTrancheAll_Handler,
		},
		{
			MethodName: "GetUserPositions",
			Handler:    _Query_GetUserPositions_Handler,
		},
		{
			MethodName: "UserDepositsAll",
			Handler:    _Query_UserDepositsAll_Handler,
		},
		{
			MethodName: "UserLimitOrdersAll",
			Handler:    _Query_UserLimitOrdersAll_Handler,
		},
		{
			MethodName: "TickLiquidityAll",
			Handler:    _Query_TickLiquidityAll_Handler,
		},
		{
			MethodName: "FilledLimitOrderTranche",
			Handler:    _Query_FilledLimitOrderTranche_Handler,
		},
		{
			MethodName: "FilledLimitOrderTrancheAll",
			Handler:    _Query_FilledLimitOrderTrancheAll_Handler,
		},
		{
			MethodName: "PoolReservesAll",
			Handler:    _Query_PoolReservesAll_Handler,
		},
		{
			MethodName: "PoolReserves",
			Handler:    _Query_PoolReserves_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "duality/dex/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeTierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeTierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeTierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeTierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeTierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeTierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeTier.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFeeTierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeeTierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeeTierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFeeTierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeeTierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeeTierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeeTier) > 0 {
		for iNdEx := len(m.FeeTier) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeTier[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderTrancheUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderTrancheUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderTrancheUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TrancheKey) > 0 {
		i -= len(m.TrancheKey)
		copy(dAtA[i:], m.TrancheKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TrancheKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderTrancheUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderTrancheUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderTrancheUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LimitOrderTrancheUser.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LimitOrderTrancheUser) > 0 {
		for iNdEx := len(m.LimitOrderTrancheUser) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderTrancheUser[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderTrancheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderTrancheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderTrancheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrancheKey) > 0 {
		i -= len(m.TrancheKey)
		copy(dAtA[i:], m.TrancheKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TrancheKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderTrancheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderTrancheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderTrancheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LimitOrderTranche.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LimitOrderTranche) > 0 {
		for iNdEx := len(m.LimitOrderTranche) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderTranche[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserPositions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUserDepositsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserDepositsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserDepositsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUserDepositsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserDepositsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserDepositsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUserLimitOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserLimitOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserLimitOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUserLimitOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserLimitOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserLimitOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LimitOrders) > 0 {
		for iNdEx := len(m.LimitOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTickLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTickLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTickLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTickLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTickLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTickLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TickLiquidity) > 0 {
		for iNdEx := len(m.TickLiquidity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TickLiquidity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFilledLimitOrderTrancheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFilledLimitOrderTrancheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFilledLimitOrderTrancheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrancheKey) > 0 {
		i -= len(m.TrancheKey)
		copy(dAtA[i:], m.TrancheKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TrancheKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFilledLimitOrderTrancheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFilledLimitOrderTrancheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFilledLimitOrderTrancheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FilledLimitOrderTranche.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFilledLimitOrderTrancheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFilledLimitOrderTrancheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFilledLimitOrderTrancheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFilledLimitOrderTrancheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFilledLimitOrderTrancheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFilledLimitOrderTrancheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FilledLimitOrderTranche) > 0 {
		for iNdEx := len(m.FilledLimitOrderTranche) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FilledLimitOrderTranche[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolReservesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolReservesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolReservesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolReservesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolReservesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolReservesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolReserves) > 0 {
		for iNdEx := len(m.PoolReserves) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolReserves[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolReservesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolReservesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolReservesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x20
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolReservesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolReservesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolReservesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolReserves.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetFeeTierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetFeeTierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeTier.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFeeTierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFeeTierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeTier) > 0 {
		for _, e := range m.FeeTier {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderTrancheUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TrancheKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderTrancheUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LimitOrderTrancheUser.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLimitOrderTrancheUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderTrancheUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrderTrancheUser) > 0 {
		for _, e := range m.LimitOrderTrancheUser {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderTrancheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TrancheKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderTrancheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LimitOrderTranche.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLimitOrderTrancheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderTrancheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrderTranche) > 0 {
		for _, e := range m.LimitOrderTranche {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UserPositions.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUserDepositsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUserDepositsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllUserLimitOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUserLimitOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrders) > 0 {
		for _, e := range m.LimitOrders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllTickLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTickLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TickLiquidity) > 0 {
		for _, e := range m.TickLiquidity {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFilledLimitOrderTrancheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.TrancheKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFilledLimitOrderTrancheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FilledLimitOrderTranche.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFilledLimitOrderTrancheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFilledLimitOrderTrancheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FilledLimitOrderTranche) > 0 {
		for _, e := range m.FilledLimitOrderTranche {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPoolReservesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPoolReservesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolReserves) > 0 {
		for _, e := range m.PoolReserves {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolReservesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	if m.Fee != 0 {
		n += 1 + sovQuery(uint64(m.Fee))
	}
	return n
}

func (m *QueryGetPoolReservesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PoolReserves.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeTierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeTierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeTierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeTierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeTierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeTierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeTier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeeTierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeeTierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeeTierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeeTierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeeTierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeeTierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeTier = append(m.FeeTier, FeeTier{})
			if err := m.FeeTier[len(m.FeeTier)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderTrancheUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrancheKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderTrancheUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderTrancheUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitOrderTrancheUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderTrancheUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderTrancheUser = append(m.LimitOrderTrancheUser, LimitOrderTrancheUser{})
			if err := m.LimitOrderTrancheUser[len(m.LimitOrderTrancheUser)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderTrancheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrancheKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderTrancheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderTranche", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitOrderTranche.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderTranche", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderTranche = append(m.LimitOrderTranche, LimitOrderTranche{})
			if err := m.LimitOrderTranche[len(m.LimitOrderTranche)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPositions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserPositions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserDepositsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserDepositsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserDepositsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserDepositsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserDepositsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserDepositsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, DepositRecord{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserLimitOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserLimitOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserLimitOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserLimitOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserLimitOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserLimitOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrders = append(m.LimitOrders, LimitOrderTrancheUser{})
			if err := m.LimitOrders[len(m.LimitOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTickLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTickLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTickLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTickLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTickLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTickLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickLiquidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TickLiquidity = append(m.TickLiquidity, TickLiquidity{})
			if err := m.TickLiquidity[len(m.TickLiquidity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFilledLimitOrderTrancheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFilledLimitOrderTrancheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFilledLimitOrderTrancheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrancheKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFilledLimitOrderTrancheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFilledLimitOrderTrancheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFilledLimitOrderTrancheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledLimitOrderTranche", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FilledLimitOrderTranche.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFilledLimitOrderTrancheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFilledLimitOrderTrancheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFilledLimitOrderTrancheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFilledLimitOrderTrancheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFilledLimitOrderTrancheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFilledLimitOrderTrancheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledLimitOrderTranche", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilledLimitOrderTranche = append(m.FilledLimitOrderTranche, FilledLimitOrderTranche{})
			if err := m.FilledLimitOrderTranche[len(m.FilledLimitOrderTranche)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolReservesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolReservesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolReservesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolReservesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolReservesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolReservesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolReserves", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolReserves = append(m.PoolReserves, PoolReserves{})
			if err := m.PoolReserves[len(m.PoolReserves)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolReservesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolReservesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolReservesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolReservesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolReservesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolReservesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolReserves", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolReserves.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
