// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: duality/dex/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetTickRequest struct {
	TickIndex int64  `protobuf:"varint,1,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	PairId    string `protobuf:"bytes,2,opt,name=pairId,proto3" json:"pairId,omitempty"`
}

func (m *QueryGetTickRequest) Reset()         { *m = QueryGetTickRequest{} }
func (m *QueryGetTickRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTickRequest) ProtoMessage()    {}
func (*QueryGetTickRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{2}
}
func (m *QueryGetTickRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTickRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTickRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTickRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTickRequest.Merge(m, src)
}
func (m *QueryGetTickRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTickRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTickRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTickRequest proto.InternalMessageInfo

func (m *QueryGetTickRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetTickRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

type QueryGetTickResponse struct {
	Tick Tick `protobuf:"bytes,1,opt,name=Tick,proto3" json:"Tick"`
}

func (m *QueryGetTickResponse) Reset()         { *m = QueryGetTickResponse{} }
func (m *QueryGetTickResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTickResponse) ProtoMessage()    {}
func (*QueryGetTickResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{3}
}
func (m *QueryGetTickResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTickResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTickResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTickResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTickResponse.Merge(m, src)
}
func (m *QueryGetTickResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTickResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTickResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTickResponse proto.InternalMessageInfo

func (m *QueryGetTickResponse) GetTick() Tick {
	if m != nil {
		return m.Tick
	}
	return Tick{}
}

type QueryAllTickRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTickRequest) Reset()         { *m = QueryAllTickRequest{} }
func (m *QueryAllTickRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTickRequest) ProtoMessage()    {}
func (*QueryAllTickRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{4}
}
func (m *QueryAllTickRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTickRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTickRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTickRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTickRequest.Merge(m, src)
}
func (m *QueryAllTickRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTickRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTickRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTickRequest proto.InternalMessageInfo

func (m *QueryAllTickRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTickResponse struct {
	Tick       []Tick              `protobuf:"bytes,1,rep,name=Tick,proto3" json:"Tick"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTickResponse) Reset()         { *m = QueryAllTickResponse{} }
func (m *QueryAllTickResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTickResponse) ProtoMessage()    {}
func (*QueryAllTickResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{5}
}
func (m *QueryAllTickResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTickResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTickResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTickResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTickResponse.Merge(m, src)
}
func (m *QueryAllTickResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTickResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTickResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTickResponse proto.InternalMessageInfo

func (m *QueryAllTickResponse) GetTick() []Tick {
	if m != nil {
		return m.Tick
	}
	return nil
}

func (m *QueryAllTickResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTradingPairRequest struct {
	PairId string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
}

func (m *QueryGetTradingPairRequest) Reset()         { *m = QueryGetTradingPairRequest{} }
func (m *QueryGetTradingPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradingPairRequest) ProtoMessage()    {}
func (*QueryGetTradingPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{6}
}
func (m *QueryGetTradingPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradingPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradingPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradingPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradingPairRequest.Merge(m, src)
}
func (m *QueryGetTradingPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradingPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradingPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradingPairRequest proto.InternalMessageInfo

func (m *QueryGetTradingPairRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

type QueryGetTradingPairResponse struct {
	TradingPair TradingPair `protobuf:"bytes,1,opt,name=TradingPair,proto3" json:"TradingPair"`
}

func (m *QueryGetTradingPairResponse) Reset()         { *m = QueryGetTradingPairResponse{} }
func (m *QueryGetTradingPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradingPairResponse) ProtoMessage()    {}
func (*QueryGetTradingPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{7}
}
func (m *QueryGetTradingPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradingPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradingPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradingPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradingPairResponse.Merge(m, src)
}
func (m *QueryGetTradingPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradingPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradingPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradingPairResponse proto.InternalMessageInfo

func (m *QueryGetTradingPairResponse) GetTradingPair() TradingPair {
	if m != nil {
		return m.TradingPair
	}
	return TradingPair{}
}

type QueryAllTradingPairRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTradingPairRequest) Reset()         { *m = QueryAllTradingPairRequest{} }
func (m *QueryAllTradingPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTradingPairRequest) ProtoMessage()    {}
func (*QueryAllTradingPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{8}
}
func (m *QueryAllTradingPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTradingPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTradingPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTradingPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTradingPairRequest.Merge(m, src)
}
func (m *QueryAllTradingPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTradingPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTradingPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTradingPairRequest proto.InternalMessageInfo

func (m *QueryAllTradingPairRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTradingPairResponse struct {
	TradingPair []TradingPair       `protobuf:"bytes,1,rep,name=TradingPair,proto3" json:"TradingPair"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTradingPairResponse) Reset()         { *m = QueryAllTradingPairResponse{} }
func (m *QueryAllTradingPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTradingPairResponse) ProtoMessage()    {}
func (*QueryAllTradingPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{9}
}
func (m *QueryAllTradingPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTradingPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTradingPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTradingPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTradingPairResponse.Merge(m, src)
}
func (m *QueryAllTradingPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTradingPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTradingPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTradingPairResponse proto.InternalMessageInfo

func (m *QueryAllTradingPairResponse) GetTradingPair() []TradingPair {
	if m != nil {
		return m.TradingPair
	}
	return nil
}

func (m *QueryAllTradingPairResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTokensRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTokensRequest) Reset()         { *m = QueryGetTokensRequest{} }
func (m *QueryGetTokensRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokensRequest) ProtoMessage()    {}
func (*QueryGetTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{10}
}
func (m *QueryGetTokensRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokensRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokensRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokensRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokensRequest.Merge(m, src)
}
func (m *QueryGetTokensRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokensRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokensRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokensRequest proto.InternalMessageInfo

func (m *QueryGetTokensRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetTokensResponse struct {
	Tokens Tokens `protobuf:"bytes,1,opt,name=Tokens,proto3" json:"Tokens"`
}

func (m *QueryGetTokensResponse) Reset()         { *m = QueryGetTokensResponse{} }
func (m *QueryGetTokensResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokensResponse) ProtoMessage()    {}
func (*QueryGetTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{11}
}
func (m *QueryGetTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokensResponse.Merge(m, src)
}
func (m *QueryGetTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokensResponse proto.InternalMessageInfo

func (m *QueryGetTokensResponse) GetTokens() Tokens {
	if m != nil {
		return m.Tokens
	}
	return Tokens{}
}

type QueryAllTokensRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokensRequest) Reset()         { *m = QueryAllTokensRequest{} }
func (m *QueryAllTokensRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokensRequest) ProtoMessage()    {}
func (*QueryAllTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{12}
}
func (m *QueryAllTokensRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokensRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokensRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokensRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokensRequest.Merge(m, src)
}
func (m *QueryAllTokensRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokensRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokensRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokensRequest proto.InternalMessageInfo

func (m *QueryAllTokensRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTokensResponse struct {
	Tokens     []Tokens            `protobuf:"bytes,1,rep,name=Tokens,proto3" json:"Tokens"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokensResponse) Reset()         { *m = QueryAllTokensResponse{} }
func (m *QueryAllTokensResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokensResponse) ProtoMessage()    {}
func (*QueryAllTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{13}
}
func (m *QueryAllTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokensResponse.Merge(m, src)
}
func (m *QueryAllTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokensResponse proto.InternalMessageInfo

func (m *QueryAllTokensResponse) GetTokens() []Tokens {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *QueryAllTokensResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTokenMapRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetTokenMapRequest) Reset()         { *m = QueryGetTokenMapRequest{} }
func (m *QueryGetTokenMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenMapRequest) ProtoMessage()    {}
func (*QueryGetTokenMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{14}
}
func (m *QueryGetTokenMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenMapRequest.Merge(m, src)
}
func (m *QueryGetTokenMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenMapRequest proto.InternalMessageInfo

func (m *QueryGetTokenMapRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetTokenMapResponse struct {
	TokenMap TokenMap `protobuf:"bytes,1,opt,name=tokenMap,proto3" json:"tokenMap"`
}

func (m *QueryGetTokenMapResponse) Reset()         { *m = QueryGetTokenMapResponse{} }
func (m *QueryGetTokenMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenMapResponse) ProtoMessage()    {}
func (*QueryGetTokenMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{15}
}
func (m *QueryGetTokenMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenMapResponse.Merge(m, src)
}
func (m *QueryGetTokenMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenMapResponse proto.InternalMessageInfo

func (m *QueryGetTokenMapResponse) GetTokenMap() TokenMap {
	if m != nil {
		return m.TokenMap
	}
	return TokenMap{}
}

type QueryAllTokenMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenMapRequest) Reset()         { *m = QueryAllTokenMapRequest{} }
func (m *QueryAllTokenMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenMapRequest) ProtoMessage()    {}
func (*QueryAllTokenMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{16}
}
func (m *QueryAllTokenMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenMapRequest.Merge(m, src)
}
func (m *QueryAllTokenMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenMapRequest proto.InternalMessageInfo

func (m *QueryAllTokenMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTokenMapResponse struct {
	TokenMap   []TokenMap          `protobuf:"bytes,1,rep,name=tokenMap,proto3" json:"tokenMap"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenMapResponse) Reset()         { *m = QueryAllTokenMapResponse{} }
func (m *QueryAllTokenMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenMapResponse) ProtoMessage()    {}
func (*QueryAllTokenMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{17}
}
func (m *QueryAllTokenMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenMapResponse.Merge(m, src)
}
func (m *QueryAllTokenMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenMapResponse proto.InternalMessageInfo

func (m *QueryAllTokenMapResponse) GetTokenMap() []TokenMap {
	if m != nil {
		return m.TokenMap
	}
	return nil
}

func (m *QueryAllTokenMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFeeTierRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetFeeTierRequest) Reset()         { *m = QueryGetFeeTierRequest{} }
func (m *QueryGetFeeTierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeTierRequest) ProtoMessage()    {}
func (*QueryGetFeeTierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{18}
}
func (m *QueryGetFeeTierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeTierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeTierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeTierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeTierRequest.Merge(m, src)
}
func (m *QueryGetFeeTierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeTierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeTierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeTierRequest proto.InternalMessageInfo

func (m *QueryGetFeeTierRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetFeeTierResponse struct {
	FeeTier FeeTier `protobuf:"bytes,1,opt,name=FeeTier,proto3" json:"FeeTier"`
}

func (m *QueryGetFeeTierResponse) Reset()         { *m = QueryGetFeeTierResponse{} }
func (m *QueryGetFeeTierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeTierResponse) ProtoMessage()    {}
func (*QueryGetFeeTierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{19}
}
func (m *QueryGetFeeTierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeTierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeTierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeTierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeTierResponse.Merge(m, src)
}
func (m *QueryGetFeeTierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeTierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeTierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeTierResponse proto.InternalMessageInfo

func (m *QueryGetFeeTierResponse) GetFeeTier() FeeTier {
	if m != nil {
		return m.FeeTier
	}
	return FeeTier{}
}

type QueryAllFeeTierRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeeTierRequest) Reset()         { *m = QueryAllFeeTierRequest{} }
func (m *QueryAllFeeTierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFeeTierRequest) ProtoMessage()    {}
func (*QueryAllFeeTierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{20}
}
func (m *QueryAllFeeTierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeeTierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeeTierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeeTierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeeTierRequest.Merge(m, src)
}
func (m *QueryAllFeeTierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeeTierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeeTierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeeTierRequest proto.InternalMessageInfo

func (m *QueryAllFeeTierRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFeeTierResponse struct {
	FeeTier    []FeeTier           `protobuf:"bytes,1,rep,name=FeeTier,proto3" json:"FeeTier"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeeTierResponse) Reset()         { *m = QueryAllFeeTierResponse{} }
func (m *QueryAllFeeTierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFeeTierResponse) ProtoMessage()    {}
func (*QueryAllFeeTierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{21}
}
func (m *QueryAllFeeTierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeeTierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeeTierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeeTierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeeTierResponse.Merge(m, src)
}
func (m *QueryAllFeeTierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeeTierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeeTierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeeTierResponse proto.InternalMessageInfo

func (m *QueryAllFeeTierResponse) GetFeeTier() []FeeTier {
	if m != nil {
		return m.FeeTier
	}
	return nil
}

func (m *QueryAllFeeTierResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLimitOrderTrancheUserRequest struct {
	PairId    string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TickIndex int64  `protobuf:"varint,2,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Count     uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Address   string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetLimitOrderTrancheUserRequest) Reset()         { *m = QueryGetLimitOrderTrancheUserRequest{} }
func (m *QueryGetLimitOrderTrancheUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderTrancheUserRequest) ProtoMessage()    {}
func (*QueryGetLimitOrderTrancheUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{22}
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderTrancheUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderTrancheUserRequest.Merge(m, src)
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderTrancheUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderTrancheUserRequest proto.InternalMessageInfo

func (m *QueryGetLimitOrderTrancheUserRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetLimitOrderTrancheUserRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetLimitOrderTrancheUserRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *QueryGetLimitOrderTrancheUserRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryGetLimitOrderTrancheUserRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetLimitOrderTrancheUserResponse struct {
	LimitOrderTrancheUser LimitOrderTrancheUser `protobuf:"bytes,1,opt,name=LimitOrderTrancheUser,proto3" json:"LimitOrderTrancheUser"`
}

func (m *QueryGetLimitOrderTrancheUserResponse) Reset()         { *m = QueryGetLimitOrderTrancheUserResponse{} }
func (m *QueryGetLimitOrderTrancheUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderTrancheUserResponse) ProtoMessage()    {}
func (*QueryGetLimitOrderTrancheUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{23}
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderTrancheUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderTrancheUserResponse.Merge(m, src)
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderTrancheUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderTrancheUserResponse proto.InternalMessageInfo

func (m *QueryGetLimitOrderTrancheUserResponse) GetLimitOrderTrancheUser() LimitOrderTrancheUser {
	if m != nil {
		return m.LimitOrderTrancheUser
	}
	return LimitOrderTrancheUser{}
}

type QueryAllLimitOrderTrancheUserRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheUserRequest) Reset()         { *m = QueryAllLimitOrderTrancheUserRequest{} }
func (m *QueryAllLimitOrderTrancheUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderTrancheUserRequest) ProtoMessage()    {}
func (*QueryAllLimitOrderTrancheUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{24}
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserRequest.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheUserRequest proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheUserRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLimitOrderTrancheUserResponse struct {
	LimitOrderTrancheUser []LimitOrderTrancheUser `protobuf:"bytes,1,rep,name=LimitOrderTrancheUser,proto3" json:"LimitOrderTrancheUser"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheUserResponse) Reset()         { *m = QueryAllLimitOrderTrancheUserResponse{} }
func (m *QueryAllLimitOrderTrancheUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderTrancheUserResponse) ProtoMessage()    {}
func (*QueryAllLimitOrderTrancheUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{25}
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserResponse.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheUserResponse proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheUserResponse) GetLimitOrderTrancheUser() []LimitOrderTrancheUser {
	if m != nil {
		return m.LimitOrderTrancheUser
	}
	return nil
}

func (m *QueryAllLimitOrderTrancheUserResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLimitOrderTrancheRequest struct {
	PairId       string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TickIndex    int64  `protobuf:"varint,2,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	Token        string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	TrancheIndex uint64 `protobuf:"varint,4,opt,name=trancheIndex,proto3" json:"trancheIndex,omitempty"`
}

func (m *QueryGetLimitOrderTrancheRequest) Reset()         { *m = QueryGetLimitOrderTrancheRequest{} }
func (m *QueryGetLimitOrderTrancheRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderTrancheRequest) ProtoMessage()    {}
func (*QueryGetLimitOrderTrancheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{26}
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderTrancheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderTrancheRequest.Merge(m, src)
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderTrancheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderTrancheRequest proto.InternalMessageInfo

func (m *QueryGetLimitOrderTrancheRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetLimitOrderTrancheRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetLimitOrderTrancheRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *QueryGetLimitOrderTrancheRequest) GetTrancheIndex() uint64 {
	if m != nil {
		return m.TrancheIndex
	}
	return 0
}

type QueryGetLimitOrderTrancheResponse struct {
	LimitOrderTranche LimitOrderTranche `protobuf:"bytes,1,opt,name=LimitOrderTranche,proto3" json:"LimitOrderTranche"`
}

func (m *QueryGetLimitOrderTrancheResponse) Reset()         { *m = QueryGetLimitOrderTrancheResponse{} }
func (m *QueryGetLimitOrderTrancheResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderTrancheResponse) ProtoMessage()    {}
func (*QueryGetLimitOrderTrancheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{27}
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderTrancheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderTrancheResponse.Merge(m, src)
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderTrancheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderTrancheResponse proto.InternalMessageInfo

func (m *QueryGetLimitOrderTrancheResponse) GetLimitOrderTranche() LimitOrderTranche {
	if m != nil {
		return m.LimitOrderTranche
	}
	return LimitOrderTranche{}
}

type QueryAllLimitOrderTrancheRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheRequest) Reset()         { *m = QueryAllLimitOrderTrancheRequest{} }
func (m *QueryAllLimitOrderTrancheRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderTrancheRequest) ProtoMessage()    {}
func (*QueryAllLimitOrderTrancheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{28}
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheRequest.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheRequest proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLimitOrderTrancheResponse struct {
	LimitOrderTranche []LimitOrderTranche `protobuf:"bytes,1,rep,name=LimitOrderTranche,proto3" json:"LimitOrderTranche"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheResponse) Reset()         { *m = QueryAllLimitOrderTrancheResponse{} }
func (m *QueryAllLimitOrderTrancheResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderTrancheResponse) ProtoMessage()    {}
func (*QueryAllLimitOrderTrancheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4664128fddcf2b7a, []int{29}
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheResponse.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheResponse proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheResponse) GetLimitOrderTranche() []LimitOrderTranche {
	if m != nil {
		return m.LimitOrderTranche
	}
	return nil
}

func (m *QueryAllLimitOrderTrancheResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "nicholasdotsol.duality.dex.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "nicholasdotsol.duality.dex.QueryParamsResponse")
	proto.RegisterType((*QueryGetTickRequest)(nil), "nicholasdotsol.duality.dex.QueryGetTickRequest")
	proto.RegisterType((*QueryGetTickResponse)(nil), "nicholasdotsol.duality.dex.QueryGetTickResponse")
	proto.RegisterType((*QueryAllTickRequest)(nil), "nicholasdotsol.duality.dex.QueryAllTickRequest")
	proto.RegisterType((*QueryAllTickResponse)(nil), "nicholasdotsol.duality.dex.QueryAllTickResponse")
	proto.RegisterType((*QueryGetTradingPairRequest)(nil), "nicholasdotsol.duality.dex.QueryGetTradingPairRequest")
	proto.RegisterType((*QueryGetTradingPairResponse)(nil), "nicholasdotsol.duality.dex.QueryGetTradingPairResponse")
	proto.RegisterType((*QueryAllTradingPairRequest)(nil), "nicholasdotsol.duality.dex.QueryAllTradingPairRequest")
	proto.RegisterType((*QueryAllTradingPairResponse)(nil), "nicholasdotsol.duality.dex.QueryAllTradingPairResponse")
	proto.RegisterType((*QueryGetTokensRequest)(nil), "nicholasdotsol.duality.dex.QueryGetTokensRequest")
	proto.RegisterType((*QueryGetTokensResponse)(nil), "nicholasdotsol.duality.dex.QueryGetTokensResponse")
	proto.RegisterType((*QueryAllTokensRequest)(nil), "nicholasdotsol.duality.dex.QueryAllTokensRequest")
	proto.RegisterType((*QueryAllTokensResponse)(nil), "nicholasdotsol.duality.dex.QueryAllTokensResponse")
	proto.RegisterType((*QueryGetTokenMapRequest)(nil), "nicholasdotsol.duality.dex.QueryGetTokenMapRequest")
	proto.RegisterType((*QueryGetTokenMapResponse)(nil), "nicholasdotsol.duality.dex.QueryGetTokenMapResponse")
	proto.RegisterType((*QueryAllTokenMapRequest)(nil), "nicholasdotsol.duality.dex.QueryAllTokenMapRequest")
	proto.RegisterType((*QueryAllTokenMapResponse)(nil), "nicholasdotsol.duality.dex.QueryAllTokenMapResponse")
	proto.RegisterType((*QueryGetFeeTierRequest)(nil), "nicholasdotsol.duality.dex.QueryGetFeeTierRequest")
	proto.RegisterType((*QueryGetFeeTierResponse)(nil), "nicholasdotsol.duality.dex.QueryGetFeeTierResponse")
	proto.RegisterType((*QueryAllFeeTierRequest)(nil), "nicholasdotsol.duality.dex.QueryAllFeeTierRequest")
	proto.RegisterType((*QueryAllFeeTierResponse)(nil), "nicholasdotsol.duality.dex.QueryAllFeeTierResponse")
	proto.RegisterType((*QueryGetLimitOrderTrancheUserRequest)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderTrancheUserRequest")
	proto.RegisterType((*QueryGetLimitOrderTrancheUserResponse)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderTrancheUserResponse")
	proto.RegisterType((*QueryAllLimitOrderTrancheUserRequest)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderTrancheUserRequest")
	proto.RegisterType((*QueryAllLimitOrderTrancheUserResponse)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderTrancheUserResponse")
	proto.RegisterType((*QueryGetLimitOrderTrancheRequest)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderTrancheRequest")
	proto.RegisterType((*QueryGetLimitOrderTrancheResponse)(nil), "nicholasdotsol.duality.dex.QueryGetLimitOrderTrancheResponse")
	proto.RegisterType((*QueryAllLimitOrderTrancheRequest)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderTrancheRequest")
	proto.RegisterType((*QueryAllLimitOrderTrancheResponse)(nil), "nicholasdotsol.duality.dex.QueryAllLimitOrderTrancheResponse")
}

func init() { proto.RegisterFile("duality/dex/query.proto", fileDescriptor_4664128fddcf2b7a) }

var fileDescriptor_4664128fddcf2b7a = []byte{
	// 1389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x99, 0x4d, 0x6f, 0x1b, 0x55,
	0x17, 0xc7, 0x73, 0xed, 0xbc, 0x34, 0xb7, 0x8f, 0x2a, 0x3d, 0x97, 0x24, 0xb5, 0xa6, 0x95, 0x09,
	0x97, 0xa4, 0x49, 0x03, 0xf1, 0xd4, 0x71, 0x48, 0x04, 0x4a, 0xa5, 0xa4, 0xa0, 0x44, 0x15, 0x94,
	0x06, 0x13, 0x84, 0x54, 0x54, 0xcc, 0xc4, 0x73, 0x71, 0x86, 0x8c, 0x67, 0xdc, 0x99, 0x31, 0x4a,
	0x14, 0x79, 0xc3, 0x02, 0x89, 0x1d, 0x02, 0xd1, 0x0d, 0x12, 0x42, 0x54, 0xa8, 0x48, 0x48, 0x6c,
	0x58, 0x20, 0xbe, 0x41, 0x17, 0x48, 0x54, 0x62, 0xc3, 0x86, 0x17, 0x25, 0x7c, 0x85, 0xee, 0xd1,
	0xdc, 0x7b, 0xc6, 0x9e, 0xc9, 0x8c, 0xc7, 0x63, 0x67, 0xd8, 0x65, 0xee, 0x9c, 0x73, 0xee, 0xef,
	0xfc, 0xcf, 0xb9, 0xf6, 0x3d, 0x0e, 0xbe, 0xa8, 0x36, 0x15, 0x5d, 0x73, 0x0e, 0x65, 0x95, 0x1d,
	0xc8, 0xf7, 0x9a, 0xcc, 0x3a, 0x2c, 0x34, 0x2c, 0xd3, 0x31, 0x89, 0x64, 0x68, 0xd5, 0x3d, 0x53,
	0x57, 0x6c, 0xd5, 0x74, 0x6c, 0x53, 0x2f, 0x80, 0x5d, 0x41, 0x65, 0x07, 0xd2, 0x44, 0xcd, 0xac,
	0x99, 0xdc, 0x4c, 0x76, 0xff, 0x12, 0x1e, 0xd2, 0xe5, 0x9a, 0x69, 0xd6, 0x74, 0x26, 0x2b, 0x0d,
	0x4d, 0x56, 0x0c, 0xc3, 0x74, 0x14, 0x47, 0x33, 0x0d, 0x1b, 0xde, 0x2e, 0x54, 0x4d, 0xbb, 0x6e,
	0xda, 0xf2, 0xae, 0x62, 0x33, 0xb1, 0x91, 0xfc, 0x61, 0x71, 0x97, 0x39, 0x4a, 0x51, 0x6e, 0x28,
	0x35, 0xcd, 0xe0, 0xc6, 0x60, 0x9b, 0xf3, 0x43, 0x35, 0x14, 0x4b, 0xa9, 0x7b, 0x51, 0xa6, 0xfc,
	0x6f, 0x1c, 0xad, 0xba, 0x0f, 0xeb, 0xf9, 0xc0, 0xba, 0xa5, 0xa8, 0x9a, 0x51, 0xab, 0x34, 0x14,
	0xcd, 0x8a, 0x8a, 0xe8, 0x98, 0xfb, 0xac, 0xcd, 0x75, 0x29, 0xf4, 0xa6, 0x52, 0x57, 0x1a, 0xf0,
	0x52, 0xf2, 0xbf, 0x7c, 0x9f, 0xb1, 0x8a, 0xa3, 0x31, 0x2f, 0xe4, 0x82, 0xff, 0x9d, 0xae, 0xd5,
	0x35, 0xa7, 0x62, 0x5a, 0x2a, 0xb3, 0x2a, 0x8e, 0xa5, 0x18, 0xd5, 0x3d, 0x56, 0x69, 0xda, 0x6d,
	0xdb, 0xd9, 0x1e, 0xb6, 0xc2, 0x8c, 0x4e, 0x60, 0xf2, 0x86, 0xab, 0xcc, 0x36, 0x4f, 0xb9, 0xcc,
	0xee, 0x35, 0x99, 0xed, 0xd0, 0xb7, 0xf1, 0x53, 0x81, 0x55, 0xbb, 0x61, 0x1a, 0x36, 0x23, 0xeb,
	0x78, 0x54, 0x48, 0x93, 0x43, 0xd3, 0x68, 0xfe, 0xfc, 0x12, 0x2d, 0x74, 0xaf, 0x58, 0x41, 0xf8,
	0xde, 0x18, 0x7e, 0xf4, 0xe7, 0xd3, 0x43, 0x65, 0xf0, 0xa3, 0xaf, 0x42, 0xe0, 0x2d, 0xe6, 0xec,
	0x68, 0xd5, 0x7d, 0xd8, 0x8f, 0x5c, 0xc6, 0xe3, 0xae, 0xb2, 0x37, 0x0d, 0x95, 0x1d, 0xf0, 0xd8,
	0xd9, 0x72, 0x67, 0x81, 0x4c, 0xb9, 0xdb, 0x6a, 0xd6, 0x4d, 0x35, 0x97, 0x99, 0x46, 0xf3, 0xe3,
	0x65, 0x78, 0xa2, 0x65, 0x3c, 0x11, 0x0c, 0x06, 0x98, 0x2f, 0xe1, 0x61, 0xf7, 0x19, 0x20, 0xa7,
	0xe3, 0x20, 0x5d, 0x3b, 0x40, 0xe4, 0x3e, 0xf4, 0x2e, 0x00, 0x6e, 0xe8, 0xba, 0x1f, 0x70, 0x13,
	0xe3, 0x4e, 0xcb, 0x40, 0xe0, 0x2b, 0x05, 0xd1, 0x5f, 0x05, 0xb7, 0xbf, 0x0a, 0xa2, 0x91, 0xa1,
	0xbf, 0x0a, 0xdb, 0x4a, 0x8d, 0x81, 0x6f, 0xd9, 0xe7, 0x49, 0xbf, 0x44, 0xc0, 0xdc, 0x8e, 0x1f,
	0x62, 0xce, 0xf6, 0xcb, 0x4c, 0xb6, 0x02, 0x70, 0x19, 0x0e, 0x37, 0xd7, 0x13, 0x4e, 0x6c, 0x1c,
	0xa0, 0x5b, 0xc6, 0x52, 0x5b, 0x50, 0xd1, 0xd0, 0xdb, 0x8a, 0x66, 0x79, 0x1a, 0x74, 0xca, 0x80,
	0x02, 0x65, 0x30, 0xf0, 0xa5, 0x48, 0x2f, 0xc8, 0xec, 0x36, 0x3e, 0xef, 0x5b, 0x06, 0xed, 0xe6,
	0x62, 0x13, 0xec, 0x98, 0x43, 0x9e, 0xfe, 0x08, 0x54, 0x05, 0x4a, 0x57, 0xc2, 0x30, 0x65, 0x5a,
	0x95, 0xfa, 0x09, 0x41, 0x5a, 0xa7, 0xb7, 0xe9, 0x96, 0x56, 0xf6, 0x6c, 0x69, 0xa5, 0x57, 0xc5,
	0x39, 0x3c, 0xd9, 0xae, 0x07, 0xff, 0xd8, 0xf1, 0xa4, 0xb9, 0x80, 0x33, 0x9a, 0x28, 0xde, 0x70,
	0x39, 0xa3, 0xa9, 0xf4, 0x0e, 0x9e, 0x3a, 0x6d, 0xd8, 0x39, 0xe8, 0x62, 0x25, 0xc9, 0x41, 0x17,
	0x96, 0xde, 0x41, 0x17, 0x4f, 0xb4, 0x02, 0x10, 0xae, 0x7a, 0x01, 0x88, 0xb4, 0xea, 0xf3, 0x00,
	0x01, 0xbd, 0x6f, 0x87, 0x08, 0xfa, 0xec, 0x20, 0xf4, 0xe9, 0xd5, 0xa2, 0x84, 0x2f, 0x06, 0x24,
	0xbe, 0xa5, 0x34, 0x3c, 0x21, 0x72, 0x78, 0x4c, 0x51, 0x55, 0x8b, 0xd9, 0x36, 0x9c, 0x27, 0xef,
	0x91, 0xee, 0xe2, 0x5c, 0xd8, 0x09, 0x72, 0xdb, 0xc4, 0xe7, 0x1c, 0x58, 0x03, 0xf1, 0x66, 0x7a,
	0x66, 0x77, 0x4b, 0x69, 0x40, 0x7e, 0x6d, 0x5f, 0xaa, 0x00, 0x98, 0xa7, 0x9e, 0x0f, 0x2c, 0xad,
	0x0a, 0x7d, 0x8f, 0x20, 0x8f, 0xc0, 0x1e, 0x91, 0x79, 0x64, 0x07, 0xcd, 0x23, 0xbd, 0x4a, 0xcd,
	0x77, 0x0e, 0xc3, 0x26, 0x63, 0x3b, 0x1a, 0xb3, 0xba, 0x1d, 0x9b, 0x77, 0x3b, 0x35, 0x6d, 0x5b,
	0x42, 0x56, 0x2f, 0xe3, 0x31, 0x58, 0x02, 0xdd, 0x9e, 0x8d, 0x4b, 0x0a, 0x4c, 0x21, 0x27, 0xcf,
	0x93, 0xbe, 0xd7, 0x69, 0xec, 0x53, 0x24, 0x69, 0x55, 0xe6, 0x21, 0xea, 0x54, 0x3f, 0x36, 0x85,
	0xec, 0x60, 0x29, 0xa4, 0x57, 0x95, 0x6f, 0x10, 0x9e, 0xf1, 0xc4, 0x7e, 0xcd, 0xbd, 0xc4, 0xdc,
	0x76, 0xef, 0x30, 0x3b, 0xe2, 0x0a, 0xf3, 0x96, 0xcd, 0x7a, 0x7d, 0x39, 0x05, 0x6f, 0x16, 0x99,
	0xd3, 0x37, 0x8b, 0x09, 0x3c, 0xc2, 0x3b, 0x29, 0x97, 0xe5, 0x4e, 0xe2, 0xc1, 0x5d, 0xad, 0x9a,
	0x4d, 0xc3, 0xc9, 0x0d, 0xf3, 0x9a, 0x8b, 0x07, 0xff, 0x79, 0x1d, 0x09, 0x9e, 0xd7, 0xfb, 0x08,
	0xcf, 0xf6, 0x80, 0x04, 0x71, 0xeb, 0x78, 0x32, 0xd2, 0x00, 0x6a, 0x59, 0x8c, 0x93, 0x3a, 0xd2,
	0x11, 0x84, 0x8f, 0x8e, 0x4a, 0x0d, 0x10, 0x6f, 0x43, 0xd7, 0x63, 0xc5, 0x4b, 0xab, 0xaf, 0xfe,
	0xf2, 0x84, 0xe8, 0xbe, 0x61, 0x6f, 0x21, 0xb2, 0xe9, 0x0b, 0x91, 0x5e, 0x3f, 0x7e, 0x86, 0xf0,
	0x74, 0xd7, 0x52, 0xff, 0x17, 0xbd, 0x48, 0xf1, 0xff, 0xe0, 0xc2, 0x2e, 0xdc, 0x44, 0x4b, 0x06,
	0xd6, 0xe8, 0xc7, 0x08, 0x3f, 0x13, 0x03, 0x05, 0x92, 0x2b, 0xf8, 0xff, 0xa1, 0x97, 0x50, 0xeb,
	0xc5, 0xbe, 0xe4, 0x06, 0xa9, 0xc3, 0xd1, 0xe8, 0x07, 0x20, 0x4e, 0x54, 0xf9, 0xd3, 0xee, 0xb5,
	0x5f, 0xbd, 0xa4, 0xa3, 0x37, 0x8b, 0x4f, 0x3a, 0x9b, 0x5e, 0xd2, 0xa9, 0xf5, 0xd6, 0xd2, 0x93,
	0x49, 0x3c, 0xc2, 0x33, 0x22, 0x5f, 0x20, 0x3c, 0x2a, 0xc6, 0x27, 0x52, 0x88, 0xa3, 0x0c, 0x4f,
	0x6e, 0x92, 0x9c, 0xd8, 0x5e, 0x10, 0xd0, 0x85, 0x8f, 0x7e, 0xfb, 0xe7, 0xf3, 0xcc, 0x0c, 0xa1,
	0xf2, 0xeb, 0xe0, 0xf8, 0x8a, 0xe9, 0xbc, 0x69, 0xea, 0x72, 0x78, 0x20, 0x26, 0xdf, 0x21, 0x31,
	0xa5, 0x90, 0xde, 0xbb, 0x04, 0x07, 0x3c, 0xe9, 0x5a, 0x72, 0x07, 0xe0, 0xba, 0xce, 0xb9, 0x56,
	0xc9, 0x0b, 0x71, 0x5c, 0xee, 0xe9, 0x91, 0x8f, 0xc4, 0xf1, 0x6a, 0xc9, 0x47, 0xed, 0xc3, 0xd4,
	0x22, 0xf7, 0x11, 0x1e, 0x73, 0xe3, 0x6d, 0xe8, 0x7a, 0x02, 0xda, 0xe0, 0xb4, 0x97, 0x80, 0xf6,
	0xd4, 0xf8, 0x46, 0xe7, 0x39, 0x2d, 0x25, 0xd3, 0xbd, 0x68, 0xc9, 0xcf, 0x28, 0x30, 0x38, 0x90,
	0x95, 0x44, 0xca, 0x84, 0xe6, 0x1c, 0x69, 0xb5, 0x6f, 0x3f, 0x40, 0x7d, 0x91, 0xa3, 0x96, 0x48,
	0x31, 0x16, 0xd5, 0xf7, 0x7b, 0x46, 0x5b, 0x60, 0xf2, 0x23, 0xc2, 0x17, 0x7c, 0x21, 0x5d, 0x6d,
	0x57, 0x12, 0x49, 0x35, 0x08, 0x7e, 0xf4, 0xdc, 0x45, 0xaf, 0x71, 0xfc, 0x05, 0x32, 0x9f, 0x14,
	0x9f, 0x7c, 0x8d, 0xbc, 0x79, 0x80, 0x14, 0x13, 0x89, 0xe6, 0x9f, 0x57, 0xa4, 0xa5, 0x7e, 0x5c,
	0x80, 0x51, 0xe6, 0x8c, 0x57, 0xc9, 0x5c, 0x2c, 0x23, 0xf7, 0x91, 0x8f, 0x34, 0xb5, 0x45, 0xbe,
	0x42, 0x78, 0x5c, 0xc4, 0x70, 0x35, 0x2d, 0x26, 0xd2, 0xa6, 0x4f, 0xca, 0xd0, 0x98, 0x94, 0xec,
	0xe4, 0x0b, 0x4a, 0xf2, 0x03, 0xc2, 0xe7, 0xbc, 0x3b, 0x38, 0x29, 0x25, 0x96, 0xa4, 0x33, 0x55,
	0x48, 0xcb, 0xfd, 0x39, 0x01, 0xe3, 0x2a, 0x67, 0x2c, 0x12, 0xb9, 0x27, 0x63, 0xa5, 0xae, 0x34,
	0xe4, 0x23, 0xb8, 0x92, 0xb5, 0xc8, 0x43, 0xf7, 0x98, 0x41, 0x34, 0x57, 0xd3, 0x52, 0x62, 0x81,
	0xfa, 0x62, 0x8e, 0x18, 0x6d, 0xe8, 0x22, 0x67, 0x9e, 0x23, 0xb3, 0x89, 0x98, 0xc9, 0xb7, 0xa8,
	0x7d, 0xe3, 0x26, 0x89, 0x9a, 0x2d, 0x38, 0x14, 0x48, 0xa5, 0xbe, 0x7c, 0x80, 0xb1, 0xc8, 0x19,
	0x9f, 0x23, 0x57, 0xe3, 0x18, 0xbd, 0x5f, 0x1f, 0x45, 0x8f, 0x3e, 0x40, 0x18, 0x43, 0x18, 0x57,
	0xd0, 0x44, 0x1d, 0xd7, 0x37, 0x6a, 0x78, 0x20, 0xa1, 0xcf, 0x73, 0xd4, 0x2b, 0x64, 0x26, 0x09,
	0x2a, 0xf9, 0x24, 0xd3, 0xe5, 0x66, 0x49, 0xd6, 0x93, 0xe8, 0x14, 0x77, 0x4d, 0x96, 0x36, 0xce,
	0x10, 0x01, 0x92, 0xd9, 0xe7, 0xc9, 0x30, 0x52, 0x8d, 0x4b, 0xa6, 0xdb, 0x2f, 0xbb, 0xfe, 0x6f,
	0x3a, 0xb7, 0x7d, 0x02, 0xdf, 0x78, 0xf2, 0x11, 0x1f, 0x53, 0x5a, 0xbe, 0x33, 0xf0, 0x07, 0xc2,
	0xb9, 0x48, 0x1c, 0xb7, 0x7e, 0xeb, 0x49, 0x6a, 0x71, 0x46, 0x39, 0x7a, 0x8d, 0x01, 0x74, 0x8d,
	0xcb, 0xb1, 0x42, 0x96, 0x07, 0x91, 0x83, 0x3c, 0x41, 0x11, 0xb7, 0x3b, 0xb2, 0x36, 0x50, 0x95,
	0xbc, 0xa4, 0xae, 0x0f, 0xe8, 0x0d, 0x09, 0x55, 0x79, 0x42, 0x77, 0xc9, 0x3b, 0x7d, 0x26, 0xd4,
	0xa3, 0xb4, 0xfe, 0xeb, 0x7e, 0x8b, 0xfc, 0x82, 0xf0, 0x44, 0x08, 0xc1, 0xad, 0xe9, 0xda, 0x40,
	0x15, 0x49, 0x9e, 0x7a, 0xdc, 0x55, 0x3b, 0xd9, 0x47, 0x75, 0x44, 0xea, 0x37, 0xb6, 0x1e, 0x1d,
	0xe7, 0xd1, 0xe3, 0xe3, 0x3c, 0xfa, 0xfb, 0x38, 0x8f, 0x3e, 0x3d, 0xc9, 0x0f, 0x3d, 0x3e, 0xc9,
	0x0f, 0xfd, 0x7e, 0x92, 0x1f, 0xba, 0xb3, 0x58, 0xd3, 0x9c, 0xbd, 0xe6, 0x6e, 0xa1, 0x6a, 0xd6,
	0xbb, 0x05, 0x3d, 0x10, 0x9f, 0xa6, 0x87, 0x0d, 0x66, 0xef, 0x8e, 0xf2, 0x7f, 0x69, 0x94, 0xfe,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x40, 0xfc, 0x81, 0xa7, 0x61, 0x1a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Tick by index.
	Tick(ctx context.Context, in *QueryGetTickRequest, opts ...grpc.CallOption) (*QueryGetTickResponse, error)
	// Queries a list of Tick items.
	TickAll(ctx context.Context, in *QueryAllTickRequest, opts ...grpc.CallOption) (*QueryAllTickResponse, error)
	// Queries a TradingPair by index.
	TradingPair(ctx context.Context, in *QueryGetTradingPairRequest, opts ...grpc.CallOption) (*QueryGetTradingPairResponse, error)
	// Queries a list of TradingPair items.
	TradingPairAll(ctx context.Context, in *QueryAllTradingPairRequest, opts ...grpc.CallOption) (*QueryAllTradingPairResponse, error)
	// Queries a Tokens by id.
	Tokens(ctx context.Context, in *QueryGetTokensRequest, opts ...grpc.CallOption) (*QueryGetTokensResponse, error)
	// Queries a list of Tokens items.
	TokensAll(ctx context.Context, in *QueryAllTokensRequest, opts ...grpc.CallOption) (*QueryAllTokensResponse, error)
	// Queries a TokenMap by index.
	TokenMap(ctx context.Context, in *QueryGetTokenMapRequest, opts ...grpc.CallOption) (*QueryGetTokenMapResponse, error)
	// Queries a list of TokenMap items.
	TokenMapAll(ctx context.Context, in *QueryAllTokenMapRequest, opts ...grpc.CallOption) (*QueryAllTokenMapResponse, error)
	// Queries a FeeTier by id.
	FeeTier(ctx context.Context, in *QueryGetFeeTierRequest, opts ...grpc.CallOption) (*QueryGetFeeTierResponse, error)
	// Queries a list of FeeTier items.
	FeeTierAll(ctx context.Context, in *QueryAllFeeTierRequest, opts ...grpc.CallOption) (*QueryAllFeeTierResponse, error)
	// Queries a LimitOrderTrancheUser by index.
	LimitOrderTrancheUser(ctx context.Context, in *QueryGetLimitOrderTrancheUserRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderTrancheUserResponse, error)
	// Queries a list of LimitOrderTrancheMap items.
	LimitOrderTrancheUserAll(ctx context.Context, in *QueryAllLimitOrderTrancheUserRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheUserResponse, error)
	// Queries a LimitOrderTranche by index.
	LimitOrderTranche(ctx context.Context, in *QueryGetLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderTrancheResponse, error)
	// Queries a list of LimitOrderTranche items.
	LimitOrderTrancheAll(ctx context.Context, in *QueryAllLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Tick(ctx context.Context, in *QueryGetTickRequest, opts ...grpc.CallOption) (*QueryGetTickResponse, error) {
	out := new(QueryGetTickResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/Tick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TickAll(ctx context.Context, in *QueryAllTickRequest, opts ...grpc.CallOption) (*QueryAllTickResponse, error) {
	out := new(QueryAllTickResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/TickAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradingPair(ctx context.Context, in *QueryGetTradingPairRequest, opts ...grpc.CallOption) (*QueryGetTradingPairResponse, error) {
	out := new(QueryGetTradingPairResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/TradingPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradingPairAll(ctx context.Context, in *QueryAllTradingPairRequest, opts ...grpc.CallOption) (*QueryAllTradingPairResponse, error) {
	out := new(QueryAllTradingPairResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/TradingPairAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Tokens(ctx context.Context, in *QueryGetTokensRequest, opts ...grpc.CallOption) (*QueryGetTokensResponse, error) {
	out := new(QueryGetTokensResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/Tokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokensAll(ctx context.Context, in *QueryAllTokensRequest, opts ...grpc.CallOption) (*QueryAllTokensResponse, error) {
	out := new(QueryAllTokensResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/TokensAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenMap(ctx context.Context, in *QueryGetTokenMapRequest, opts ...grpc.CallOption) (*QueryGetTokenMapResponse, error) {
	out := new(QueryGetTokenMapResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/TokenMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenMapAll(ctx context.Context, in *QueryAllTokenMapRequest, opts ...grpc.CallOption) (*QueryAllTokenMapResponse, error) {
	out := new(QueryAllTokenMapResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/TokenMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeTier(ctx context.Context, in *QueryGetFeeTierRequest, opts ...grpc.CallOption) (*QueryGetFeeTierResponse, error) {
	out := new(QueryGetFeeTierResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/FeeTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeTierAll(ctx context.Context, in *QueryAllFeeTierRequest, opts ...grpc.CallOption) (*QueryAllFeeTierResponse, error) {
	out := new(QueryAllFeeTierResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/FeeTierAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderTrancheUser(ctx context.Context, in *QueryGetLimitOrderTrancheUserRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderTrancheUserResponse, error) {
	out := new(QueryGetLimitOrderTrancheUserResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderTrancheUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderTrancheUserAll(ctx context.Context, in *QueryAllLimitOrderTrancheUserRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheUserResponse, error) {
	out := new(QueryAllLimitOrderTrancheUserResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderTrancheUserAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderTranche(ctx context.Context, in *QueryGetLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderTrancheResponse, error) {
	out := new(QueryGetLimitOrderTrancheResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderTranche", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderTrancheAll(ctx context.Context, in *QueryAllLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheResponse, error) {
	out := new(QueryAllLimitOrderTrancheResponse)
	err := c.cc.Invoke(ctx, "/nicholasdotsol.duality.dex.Query/LimitOrderTrancheAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Tick by index.
	Tick(context.Context, *QueryGetTickRequest) (*QueryGetTickResponse, error)
	// Queries a list of Tick items.
	TickAll(context.Context, *QueryAllTickRequest) (*QueryAllTickResponse, error)
	// Queries a TradingPair by index.
	TradingPair(context.Context, *QueryGetTradingPairRequest) (*QueryGetTradingPairResponse, error)
	// Queries a list of TradingPair items.
	TradingPairAll(context.Context, *QueryAllTradingPairRequest) (*QueryAllTradingPairResponse, error)
	// Queries a Tokens by id.
	Tokens(context.Context, *QueryGetTokensRequest) (*QueryGetTokensResponse, error)
	// Queries a list of Tokens items.
	TokensAll(context.Context, *QueryAllTokensRequest) (*QueryAllTokensResponse, error)
	// Queries a TokenMap by index.
	TokenMap(context.Context, *QueryGetTokenMapRequest) (*QueryGetTokenMapResponse, error)
	// Queries a list of TokenMap items.
	TokenMapAll(context.Context, *QueryAllTokenMapRequest) (*QueryAllTokenMapResponse, error)
	// Queries a FeeTier by id.
	FeeTier(context.Context, *QueryGetFeeTierRequest) (*QueryGetFeeTierResponse, error)
	// Queries a list of FeeTier items.
	FeeTierAll(context.Context, *QueryAllFeeTierRequest) (*QueryAllFeeTierResponse, error)
	// Queries a LimitOrderTrancheUser by index.
	LimitOrderTrancheUser(context.Context, *QueryGetLimitOrderTrancheUserRequest) (*QueryGetLimitOrderTrancheUserResponse, error)
	// Queries a list of LimitOrderTrancheMap items.
	LimitOrderTrancheUserAll(context.Context, *QueryAllLimitOrderTrancheUserRequest) (*QueryAllLimitOrderTrancheUserResponse, error)
	// Queries a LimitOrderTranche by index.
	LimitOrderTranche(context.Context, *QueryGetLimitOrderTrancheRequest) (*QueryGetLimitOrderTrancheResponse, error)
	// Queries a list of LimitOrderTranche items.
	LimitOrderTrancheAll(context.Context, *QueryAllLimitOrderTrancheRequest) (*QueryAllLimitOrderTrancheResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Tick(ctx context.Context, req *QueryGetTickRequest) (*QueryGetTickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tick not implemented")
}
func (*UnimplementedQueryServer) TickAll(ctx context.Context, req *QueryAllTickRequest) (*QueryAllTickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TickAll not implemented")
}
func (*UnimplementedQueryServer) TradingPair(ctx context.Context, req *QueryGetTradingPairRequest) (*QueryGetTradingPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingPair not implemented")
}
func (*UnimplementedQueryServer) TradingPairAll(ctx context.Context, req *QueryAllTradingPairRequest) (*QueryAllTradingPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingPairAll not implemented")
}
func (*UnimplementedQueryServer) Tokens(ctx context.Context, req *QueryGetTokensRequest) (*QueryGetTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tokens not implemented")
}
func (*UnimplementedQueryServer) TokensAll(ctx context.Context, req *QueryAllTokensRequest) (*QueryAllTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokensAll not implemented")
}
func (*UnimplementedQueryServer) TokenMap(ctx context.Context, req *QueryGetTokenMapRequest) (*QueryGetTokenMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenMap not implemented")
}
func (*UnimplementedQueryServer) TokenMapAll(ctx context.Context, req *QueryAllTokenMapRequest) (*QueryAllTokenMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenMapAll not implemented")
}
func (*UnimplementedQueryServer) FeeTier(ctx context.Context, req *QueryGetFeeTierRequest) (*QueryGetFeeTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeTier not implemented")
}
func (*UnimplementedQueryServer) FeeTierAll(ctx context.Context, req *QueryAllFeeTierRequest) (*QueryAllFeeTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeTierAll not implemented")
}
func (*UnimplementedQueryServer) LimitOrderTrancheUser(ctx context.Context, req *QueryGetLimitOrderTrancheUserRequest) (*QueryGetLimitOrderTrancheUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderTrancheUser not implemented")
}
func (*UnimplementedQueryServer) LimitOrderTrancheUserAll(ctx context.Context, req *QueryAllLimitOrderTrancheUserRequest) (*QueryAllLimitOrderTrancheUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderTrancheUserAll not implemented")
}
func (*UnimplementedQueryServer) LimitOrderTranche(ctx context.Context, req *QueryGetLimitOrderTrancheRequest) (*QueryGetLimitOrderTrancheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderTranche not implemented")
}
func (*UnimplementedQueryServer) LimitOrderTrancheAll(ctx context.Context, req *QueryAllLimitOrderTrancheRequest) (*QueryAllLimitOrderTrancheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderTrancheAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Tick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Tick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/Tick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Tick(ctx, req.(*QueryGetTickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TickAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TickAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/TickAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TickAll(ctx, req.(*QueryAllTickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradingPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTradingPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradingPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/TradingPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradingPair(ctx, req.(*QueryGetTradingPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradingPairAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTradingPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradingPairAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/TradingPairAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradingPairAll(ctx, req.(*QueryAllTradingPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Tokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Tokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/Tokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Tokens(ctx, req.(*QueryGetTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokensAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokensAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/TokensAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokensAll(ctx, req.(*QueryAllTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/TokenMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenMap(ctx, req.(*QueryGetTokenMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTokenMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/TokenMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenMapAll(ctx, req.(*QueryAllTokenMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFeeTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/FeeTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeTier(ctx, req.(*QueryGetFeeTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeTierAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFeeTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeTierAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/FeeTierAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeTierAll(ctx, req.(*QueryAllFeeTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderTrancheUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLimitOrderTrancheUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderTrancheUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderTrancheUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderTrancheUser(ctx, req.(*QueryGetLimitOrderTrancheUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderTrancheUserAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLimitOrderTrancheUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderTrancheUserAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderTrancheUserAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderTrancheUserAll(ctx, req.(*QueryAllLimitOrderTrancheUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderTranche_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLimitOrderTrancheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderTranche(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderTranche",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderTranche(ctx, req.(*QueryGetLimitOrderTrancheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderTrancheAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLimitOrderTrancheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderTrancheAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicholasdotsol.duality.dex.Query/LimitOrderTrancheAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderTrancheAll(ctx, req.(*QueryAllLimitOrderTrancheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nicholasdotsol.duality.dex.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Tick",
			Handler:    _Query_Tick_Handler,
		},
		{
			MethodName: "TickAll",
			Handler:    _Query_TickAll_Handler,
		},
		{
			MethodName: "TradingPair",
			Handler:    _Query_TradingPair_Handler,
		},
		{
			MethodName: "TradingPairAll",
			Handler:    _Query_TradingPairAll_Handler,
		},
		{
			MethodName: "Tokens",
			Handler:    _Query_Tokens_Handler,
		},
		{
			MethodName: "TokensAll",
			Handler:    _Query_TokensAll_Handler,
		},
		{
			MethodName: "TokenMap",
			Handler:    _Query_TokenMap_Handler,
		},
		{
			MethodName: "TokenMapAll",
			Handler:    _Query_TokenMapAll_Handler,
		},
		{
			MethodName: "FeeTier",
			Handler:    _Query_FeeTier_Handler,
		},
		{
			MethodName: "FeeTierAll",
			Handler:    _Query_FeeTierAll_Handler,
		},
		{
			MethodName: "LimitOrderTrancheUser",
			Handler:    _Query_LimitOrderTrancheUser_Handler,
		},
		{
			MethodName: "LimitOrderTrancheUserAll",
			Handler:    _Query_LimitOrderTrancheUserAll_Handler,
		},
		{
			MethodName: "LimitOrderTranche",
			Handler:    _Query_LimitOrderTranche_Handler,
		},
		{
			MethodName: "LimitOrderTrancheAll",
			Handler:    _Query_LimitOrderTrancheAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "duality/dex/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTickRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTickRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTickRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0x12
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTickResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTickResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTickResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Tick.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTickRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTickRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTickRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTickResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTickResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTickResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tick) > 0 {
		for iNdEx := len(m.Tick) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tick[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTradingPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradingPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradingPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTradingPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradingPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradingPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TradingPair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTradingPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTradingPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTradingPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTradingPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTradingPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTradingPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TradingPair) > 0 {
		for iNdEx := len(m.TradingPair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradingPair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokensRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokensRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokensRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Tokens.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTokensRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokensRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokensRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenMap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenMap) > 0 {
		for iNdEx := len(m.TokenMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeTierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeTierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeTierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeTierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeTierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeTierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeTier.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFeeTierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeeTierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeeTierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFeeTierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeeTierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeeTierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeeTier) > 0 {
		for iNdEx := len(m.FeeTier) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeTier[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderTrancheUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderTrancheUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderTrancheUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderTrancheUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderTrancheUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderTrancheUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LimitOrderTrancheUser.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LimitOrderTrancheUser) > 0 {
		for iNdEx := len(m.LimitOrderTrancheUser) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderTrancheUser[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderTrancheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderTrancheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderTrancheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TrancheIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TrancheIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderTrancheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderTrancheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderTrancheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LimitOrderTranche.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LimitOrderTranche) > 0 {
		for iNdEx := len(m.LimitOrderTranche) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderTranche[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTickRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTickResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tick.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTickRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTickResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tick) > 0 {
		for _, e := range m.Tick {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTradingPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTradingPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TradingPair.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTradingPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTradingPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TradingPair) > 0 {
		for _, e := range m.TradingPair {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokensRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tokens.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTokensRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenMap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTokenMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTokenMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenMap) > 0 {
		for _, e := range m.TokenMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFeeTierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetFeeTierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeTier.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFeeTierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFeeTierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeTier) > 0 {
		for _, e := range m.FeeTier {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderTrancheUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderTrancheUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LimitOrderTrancheUser.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLimitOrderTrancheUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderTrancheUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrderTrancheUser) > 0 {
		for _, e := range m.LimitOrderTrancheUser {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderTrancheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TrancheIndex != 0 {
		n += 1 + sovQuery(uint64(m.TrancheIndex))
	}
	return n
}

func (m *QueryGetLimitOrderTrancheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LimitOrderTranche.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLimitOrderTrancheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderTrancheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrderTranche) > 0 {
		for _, e := range m.LimitOrderTranche {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTickRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTickRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTickRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTickResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTickResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTickResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tick.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTickRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTickRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTickRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTickResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTickResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTickResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tick = append(m.Tick, Tick{})
			if err := m.Tick[len(m.Tick)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradingPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradingPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradingPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradingPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradingPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradingPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradingPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTradingPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTradingPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTradingPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTradingPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTradingPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTradingPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingPair = append(m.TradingPair, TradingPair{})
			if err := m.TradingPair[len(m.TradingPair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokensRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokensRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokensRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokensRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokensRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokensRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, Tokens{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenMap = append(m.TokenMap, TokenMap{})
			if err := m.TokenMap[len(m.TokenMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeTierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeTierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeTierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeTierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeTierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeTierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeTier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeeTierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeeTierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeeTierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeeTierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeeTierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeeTierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeTier = append(m.FeeTier, FeeTier{})
			if err := m.FeeTier[len(m.FeeTier)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderTrancheUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderTrancheUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderTrancheUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitOrderTrancheUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderTrancheUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderTrancheUser = append(m.LimitOrderTrancheUser, LimitOrderTrancheUser{})
			if err := m.LimitOrderTrancheUser[len(m.LimitOrderTrancheUser)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderTrancheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheIndex", wireType)
			}
			m.TrancheIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrancheIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderTrancheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderTranche", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitOrderTranche.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderTranche", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderTranche = append(m.LimitOrderTranche, LimitOrderTranche{})
			if err := m.LimitOrderTranche[len(m.LimitOrderTranche)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
