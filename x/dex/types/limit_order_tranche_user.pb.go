// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dualitylabs/duality/dex/limit_order_tranche_user.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LimitOrderTrancheUser struct {
	TradePairID           *TradePairID                           `protobuf:"bytes,1,opt,name=tradePairID,proto3" json:"tradePairID,omitempty"`
	TickIndexTakerToMaker int64                                  `protobuf:"varint,2,opt,name=tickIndexTakerToMaker,proto3" json:"tickIndexTakerToMaker,omitempty"`
	TrancheKey            string                                 `protobuf:"bytes,3,opt,name=trancheKey,proto3" json:"trancheKey,omitempty"`
	Address               string                                 `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	SharesOwned           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=sharesOwned,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"sharesOwned" yaml:"sharesOwned"`
	SharesWithdrawn       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=sharesWithdrawn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"sharesWithdrawn" yaml:"sharesWithdrawn"`
	SharesCancelled       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=sharesCancelled,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"sharesCancelled" yaml:"sharesCancelled"`
	OrderType             LimitOrderType                         `protobuf:"varint,8,opt,name=orderType,proto3,enum=dualitylabs.duality.dex.LimitOrderType" json:"orderType,omitempty"`
}

func (m *LimitOrderTrancheUser) Reset()         { *m = LimitOrderTrancheUser{} }
func (m *LimitOrderTrancheUser) String() string { return proto.CompactTextString(m) }
func (*LimitOrderTrancheUser) ProtoMessage()    {}
func (*LimitOrderTrancheUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6af7f8ab2902fe6, []int{0}
}
func (m *LimitOrderTrancheUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOrderTrancheUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOrderTrancheUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOrderTrancheUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrderTrancheUser.Merge(m, src)
}
func (m *LimitOrderTrancheUser) XXX_Size() int {
	return m.Size()
}
func (m *LimitOrderTrancheUser) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrderTrancheUser.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrderTrancheUser proto.InternalMessageInfo

func (m *LimitOrderTrancheUser) GetTradePairID() *TradePairID {
	if m != nil {
		return m.TradePairID
	}
	return nil
}

func (m *LimitOrderTrancheUser) GetTickIndexTakerToMaker() int64 {
	if m != nil {
		return m.TickIndexTakerToMaker
	}
	return 0
}

func (m *LimitOrderTrancheUser) GetTrancheKey() string {
	if m != nil {
		return m.TrancheKey
	}
	return ""
}

func (m *LimitOrderTrancheUser) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *LimitOrderTrancheUser) GetOrderType() LimitOrderType {
	if m != nil {
		return m.OrderType
	}
	return LimitOrderType_GOOD_TIL_CANCELLED
}

func init() {
	proto.RegisterType((*LimitOrderTrancheUser)(nil), "dualitylabs.duality.dex.LimitOrderTrancheUser")
}

func init() {
	proto.RegisterFile("dualitylabs/duality/dex/limit_order_tranche_user.proto", fileDescriptor_f6af7f8ab2902fe6)
}

var fileDescriptor_f6af7f8ab2902fe6 = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xcf, 0x6b, 0xd4, 0x40,
	0x14, 0xde, 0x58, 0xdb, 0xda, 0x59, 0x50, 0x18, 0xac, 0x0e, 0x3d, 0x24, 0x61, 0x11, 0x5d, 0x28,
	0x4d, 0xa0, 0x8a, 0x07, 0x8f, 0xd5, 0x0a, 0x8b, 0x4a, 0x25, 0x46, 0x04, 0x3d, 0x84, 0xd9, 0xcc,
	0x63, 0x77, 0xd8, 0x6c, 0x26, 0xcc, 0xcc, 0xd2, 0xe4, 0x0f, 0xf0, 0xee, 0x3f, 0xe0, 0xff, 0xd3,
	0x63, 0x8f, 0xe2, 0x21, 0xc8, 0xee, 0xcd, 0x63, 0xff, 0x02, 0xc9, 0x0f, 0xd3, 0x71, 0x71, 0x0f,
	0xe2, 0x69, 0xde, 0xbc, 0xef, 0x7b, 0xdf, 0xfb, 0x66, 0xf8, 0xd0, 0x53, 0xb6, 0xa0, 0x09, 0xd7,
	0x45, 0x42, 0xc7, 0xca, 0x6f, 0x6b, 0x9f, 0x41, 0xee, 0x27, 0x7c, 0xce, 0x75, 0x24, 0x24, 0x03,
	0x19, 0x69, 0x49, 0xd3, 0x78, 0x0a, 0xd1, 0x42, 0x81, 0xf4, 0x32, 0x29, 0xb4, 0xc0, 0xf7, 0x8d,
	0x39, 0xaf, 0xad, 0x3d, 0x06, 0xf9, 0xc1, 0xdd, 0x89, 0x98, 0x88, 0x9a, 0xe3, 0x57, 0x55, 0x43,
	0x3f, 0x38, 0xdc, 0xb4, 0x46, 0x4b, 0xca, 0x20, 0xca, 0x28, 0x97, 0x11, 0x67, 0x2d, 0xd9, 0xdd,
	0x48, 0xce, 0x1b, 0xc6, 0xe0, 0xeb, 0x36, 0xda, 0x7f, 0x5d, 0x19, 0x3c, 0xab, 0xfc, 0x85, 0x8d,
	0xbd, 0xf7, 0x0a, 0x24, 0x7e, 0x89, 0xfa, 0xb5, 0xe4, 0x5b, 0xca, 0xe5, 0xe8, 0x05, 0xb1, 0x5c,
	0x6b, 0xd8, 0x3f, 0x7e, 0xe0, 0x6d, 0x70, 0xeb, 0x85, 0xd7, 0xdc, 0xc0, 0x1c, 0xc4, 0x4f, 0xd0,
	0xbe, 0xe6, 0xf1, 0x6c, 0x94, 0x32, 0xc8, 0x43, 0x3a, 0x03, 0x19, 0x8a, 0x37, 0xd5, 0x41, 0x6e,
	0xb8, 0xd6, 0x70, 0x2b, 0xf8, 0x3b, 0x88, 0x6d, 0x84, 0xda, 0xbf, 0x7a, 0x05, 0x05, 0xd9, 0x72,
	0xad, 0xe1, 0x5e, 0x60, 0x74, 0x30, 0x41, 0xbb, 0x94, 0x31, 0x09, 0x4a, 0x91, 0x9b, 0x35, 0xf8,
	0xfb, 0x8a, 0x17, 0xa8, 0xaf, 0xa6, 0x54, 0x82, 0x3a, 0x3b, 0x4f, 0x81, 0x91, 0xed, 0x0a, 0x3d,
	0x79, 0x77, 0x51, 0x3a, 0xbd, 0xef, 0xa5, 0xf3, 0x70, 0xc2, 0xf5, 0x74, 0x31, 0xf6, 0x62, 0x31,
	0xf7, 0x63, 0xa1, 0xe6, 0x42, 0xb5, 0xc7, 0x91, 0x62, 0x33, 0x5f, 0x17, 0x19, 0x28, 0x6f, 0x94,
	0xea, 0x9f, 0xa5, 0x63, 0x8a, 0x5c, 0x95, 0x0e, 0x2e, 0xe8, 0x3c, 0x79, 0x36, 0x30, 0x9a, 0x83,
	0xc0, 0xa4, 0xe0, 0xcf, 0x16, 0xba, 0xd3, 0xdc, 0x3f, 0x70, 0x3d, 0x65, 0x92, 0x9e, 0xa7, 0x64,
	0xa7, 0xde, 0xfd, 0xe9, 0x9f, 0x77, 0xaf, 0x0b, 0x5d, 0x95, 0xce, 0x3d, 0x73, 0x7f, 0x07, 0x0c,
	0x82, 0x75, 0xaa, 0xe1, 0xe3, 0x39, 0x4d, 0x63, 0x48, 0x12, 0x60, 0x64, 0xf7, 0xff, 0x7c, 0x74,
	0x42, 0xeb, 0x3e, 0x3a, 0xa0, 0xf3, 0xd1, 0x75, 0xf0, 0x29, 0xda, 0xab, 0x23, 0x1f, 0x16, 0x19,
	0x90, 0x5b, 0xae, 0x35, 0xbc, 0x7d, 0xfc, 0x68, 0x63, 0x78, 0x8c, 0x04, 0x16, 0x19, 0x04, 0xd7,
	0x93, 0x27, 0xa7, 0x17, 0x4b, 0xdb, 0xba, 0x5c, 0xda, 0xd6, 0x8f, 0xa5, 0x6d, 0x7d, 0x59, 0xd9,
	0xbd, 0xcb, 0x95, 0xdd, 0xfb, 0xb6, 0xb2, 0x7b, 0x1f, 0x0f, 0x8d, 0x67, 0xb4, 0x5a, 0x47, 0x7f,
	0xe4, 0x3c, 0x6f, 0x92, 0x5e, 0xbd, 0x67, 0xbc, 0x53, 0xa7, 0xfd, 0xf1, 0xaf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xbb, 0xa8, 0x7e, 0xa5, 0xa5, 0x03, 0x00, 0x00,
}

func (m *LimitOrderTrancheUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOrderTrancheUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitOrderTrancheUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderType != 0 {
		i = encodeVarintLimitOrderTrancheUser(dAtA, i, uint64(m.OrderType))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.SharesCancelled.Size()
		i -= size
		if _, err := m.SharesCancelled.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderTrancheUser(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.SharesWithdrawn.Size()
		i -= size
		if _, err := m.SharesWithdrawn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderTrancheUser(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.SharesOwned.Size()
		i -= size
		if _, err := m.SharesOwned.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderTrancheUser(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLimitOrderTrancheUser(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TrancheKey) > 0 {
		i -= len(m.TrancheKey)
		copy(dAtA[i:], m.TrancheKey)
		i = encodeVarintLimitOrderTrancheUser(dAtA, i, uint64(len(m.TrancheKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickIndexTakerToMaker != 0 {
		i = encodeVarintLimitOrderTrancheUser(dAtA, i, uint64(m.TickIndexTakerToMaker))
		i--
		dAtA[i] = 0x10
	}
	if m.TradePairID != nil {
		{
			size, err := m.TradePairID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLimitOrderTrancheUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLimitOrderTrancheUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovLimitOrderTrancheUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LimitOrderTrancheUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradePairID != nil {
		l = m.TradePairID.Size()
		n += 1 + l + sovLimitOrderTrancheUser(uint64(l))
	}
	if m.TickIndexTakerToMaker != 0 {
		n += 1 + sovLimitOrderTrancheUser(uint64(m.TickIndexTakerToMaker))
	}
	l = len(m.TrancheKey)
	if l > 0 {
		n += 1 + l + sovLimitOrderTrancheUser(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLimitOrderTrancheUser(uint64(l))
	}
	l = m.SharesOwned.Size()
	n += 1 + l + sovLimitOrderTrancheUser(uint64(l))
	l = m.SharesWithdrawn.Size()
	n += 1 + l + sovLimitOrderTrancheUser(uint64(l))
	l = m.SharesCancelled.Size()
	n += 1 + l + sovLimitOrderTrancheUser(uint64(l))
	if m.OrderType != 0 {
		n += 1 + sovLimitOrderTrancheUser(uint64(m.OrderType))
	}
	return n
}

func sovLimitOrderTrancheUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLimitOrderTrancheUser(x uint64) (n int) {
	return sovLimitOrderTrancheUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LimitOrderTrancheUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimitOrderTrancheUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOrderTrancheUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOrderTrancheUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradePairID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTrancheUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimitOrderTrancheUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTrancheUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradePairID == nil {
				m.TradePairID = &TradePairID{}
			}
			if err := m.TradePairID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndexTakerToMaker", wireType)
			}
			m.TickIndexTakerToMaker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTrancheUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndexTakerToMaker |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTrancheUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTrancheUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTrancheUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrancheKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTrancheUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTrancheUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTrancheUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesOwned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTrancheUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTrancheUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTrancheUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesOwned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesWithdrawn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTrancheUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTrancheUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTrancheUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesWithdrawn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesCancelled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTrancheUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTrancheUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTrancheUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesCancelled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTrancheUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= LimitOrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLimitOrderTrancheUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimitOrderTrancheUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLimitOrderTrancheUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimitOrderTrancheUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderTrancheUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderTrancheUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLimitOrderTrancheUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLimitOrderTrancheUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLimitOrderTrancheUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLimitOrderTrancheUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimitOrderTrancheUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLimitOrderTrancheUser = fmt.Errorf("proto: unexpected end of group")
)
