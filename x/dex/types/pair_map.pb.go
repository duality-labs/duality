// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/pair_map.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PairMap struct {
	PairId    string         `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TokenPair *TokenPairType `protobuf:"bytes,2,opt,name=tokenPair,proto3" json:"tokenPair,omitempty"`
	MaxTick   int64          `protobuf:"varint,3,opt,name=maxTick,proto3" json:"maxTick,omitempty"`
	MinTick   int64          `protobuf:"varint,4,opt,name=minTick,proto3" json:"minTick,omitempty"`
}

func (m *PairMap) Reset()         { *m = PairMap{} }
func (m *PairMap) String() string { return proto.CompactTextString(m) }
func (*PairMap) ProtoMessage()    {}
func (*PairMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ff39a06df8ef0c, []int{0}
}
func (m *PairMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairMap.Merge(m, src)
}
func (m *PairMap) XXX_Size() int {
	return m.Size()
}
func (m *PairMap) XXX_DiscardUnknown() {
	xxx_messageInfo_PairMap.DiscardUnknown(m)
}

var xxx_messageInfo_PairMap proto.InternalMessageInfo

func (m *PairMap) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *PairMap) GetTokenPair() *TokenPairType {
	if m != nil {
		return m.TokenPair
	}
	return nil
}

func (m *PairMap) GetMaxTick() int64 {
	if m != nil {
		return m.MaxTick
	}
	return 0
}

func (m *PairMap) GetMinTick() int64 {
	if m != nil {
		return m.MinTick
	}
	return 0
}

func init() {
	proto.RegisterType((*PairMap)(nil), "nicholasdotsol.duality.dex.PairMap")
}

func init() { proto.RegisterFile("dex/pair_map.proto", fileDescriptor_11ff39a06df8ef0c) }

var fileDescriptor_11ff39a06df8ef0c = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x49, 0xad, 0xd0,
	0x2f, 0x48, 0xcc, 0x2c, 0x8a, 0xcf, 0x4d, 0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92,
	0xca, 0xcb, 0x4c, 0xce, 0xc8, 0xcf, 0x49, 0x2c, 0x4e, 0xc9, 0x2f, 0x29, 0xce, 0xcf, 0xd1, 0x4b,
	0x29, 0x4d, 0xcc, 0xc9, 0x2c, 0xa9, 0xd4, 0x4b, 0x49, 0xad, 0x90, 0x92, 0x04, 0xa9, 0x2f, 0xc9,
	0xcf, 0x4e, 0xcd, 0x8b, 0x07, 0xeb, 0x2a, 0xa9, 0x2c, 0x48, 0x85, 0x68, 0x53, 0x9a, 0xc7, 0xc8,
	0xc5, 0x1e, 0x90, 0x98, 0x59, 0xe4, 0x9b, 0x58, 0x20, 0x24, 0xc6, 0xc5, 0x06, 0x92, 0xf6, 0x4c,
	0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x84, 0xdc, 0xb9, 0x38, 0xc1, 0x9a, 0x41,
	0xea, 0x24, 0x98, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0x34, 0xf5, 0x70, 0x5b, 0xa7, 0x17, 0x02, 0x53,
	0x1c, 0x52, 0x59, 0x90, 0x1a, 0x84, 0xd0, 0x2b, 0x24, 0xc1, 0xc5, 0x9e, 0x9b, 0x58, 0x11, 0x92,
	0x99, 0x9c, 0x2d, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x1c, 0x04, 0xe3, 0x82, 0x65, 0x32, 0xf3, 0xc0,
	0x32, 0x2c, 0x50, 0x19, 0x08, 0xd7, 0xc9, 0xfd, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18,
	0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5,
	0x18, 0xa2, 0x74, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xfd, 0xa0,
	0xae, 0x71, 0xc9, 0x2f, 0x09, 0xce, 0xcf, 0xd1, 0x87, 0xba, 0x46, 0xbf, 0x42, 0x1f, 0xec, 0xf3,
	0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0x87, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xef,
	0x0b, 0x85, 0x1e, 0x3d, 0x01, 0x00, 0x00,
}

func (m *PairMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinTick != 0 {
		i = encodeVarintPairMap(dAtA, i, uint64(m.MinTick))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxTick != 0 {
		i = encodeVarintPairMap(dAtA, i, uint64(m.MaxTick))
		i--
		dAtA[i] = 0x18
	}
	if m.TokenPair != nil {
		{
			size, err := m.TokenPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPairMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintPairMap(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPairMap(dAtA []byte, offset int, v uint64) int {
	offset -= sovPairMap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PairMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovPairMap(uint64(l))
	}
	if m.TokenPair != nil {
		l = m.TokenPair.Size()
		n += 1 + l + sovPairMap(uint64(l))
	}
	if m.MaxTick != 0 {
		n += 1 + sovPairMap(uint64(m.MaxTick))
	}
	if m.MinTick != 0 {
		n += 1 + sovPairMap(uint64(m.MinTick))
	}
	return n
}

func sovPairMap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPairMap(x uint64) (n int) {
	return sovPairMap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PairMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPairMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPairMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPairMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenPair == nil {
				m.TokenPair = &TokenPairType{}
			}
			if err := m.TokenPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTick", wireType)
			}
			m.MaxTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTick", wireType)
			}
			m.MinTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinTick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPairMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPairMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPairMap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPairMap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPairMap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPairMap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPairMap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPairMap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPairMap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPairMap = fmt.Errorf("proto: unexpected end of group")
)
