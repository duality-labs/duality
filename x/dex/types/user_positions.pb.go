// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: duality/dex/user_positions.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserPositions struct {
	PoolDeposits []DepositRecord         `protobuf:"bytes,1,rep,name=PoolDeposits,proto3" json:"PoolDeposits"`
	LimitOrders  []LimitOrderTrancheUser `protobuf:"bytes,2,rep,name=LimitOrders,proto3" json:"LimitOrders"`
}

func (m *UserPositions) Reset()         { *m = UserPositions{} }
func (m *UserPositions) String() string { return proto.CompactTextString(m) }
func (*UserPositions) ProtoMessage()    {}
func (*UserPositions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0354e2e0e0a6b6ad, []int{0}
}
func (m *UserPositions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPositions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPositions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPositions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPositions.Merge(m, src)
}
func (m *UserPositions) XXX_Size() int {
	return m.Size()
}
func (m *UserPositions) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPositions.DiscardUnknown(m)
}

var xxx_messageInfo_UserPositions proto.InternalMessageInfo

func (m *UserPositions) GetPoolDeposits() []DepositRecord {
	if m != nil {
		return m.PoolDeposits
	}
	return nil
}

func (m *UserPositions) GetLimitOrders() []LimitOrderTrancheUser {
	if m != nil {
		return m.LimitOrders
	}
	return nil
}

func init() {
	proto.RegisterType((*UserPositions)(nil), "nicholasdotsol.duality.dex.UserPositions")
}

func init() { proto.RegisterFile("duality/dex/user_positions.proto", fileDescriptor_0354e2e0e0a6b6ad) }

var fileDescriptor_0354e2e0e0a6b6ad = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x3f, 0x4e, 0xf3, 0x30,
	0x18, 0xc6, 0x93, 0xef, 0x43, 0x0c, 0x29, 0x2c, 0x11, 0x43, 0x95, 0xc1, 0x54, 0x4c, 0x80, 0x84,
	0x2d, 0xe0, 0x06, 0x55, 0x25, 0x16, 0x04, 0x55, 0x0b, 0x03, 0x2c, 0x56, 0x1a, 0x5b, 0x89, 0x25,
	0x37, 0x6f, 0x64, 0x3b, 0x52, 0x7a, 0x0b, 0x6e, 0xc4, 0xda, 0xb1, 0x23, 0x13, 0x42, 0xc9, 0x45,
	0x90, 0x1d, 0x57, 0xb4, 0x03, 0x6c, 0xaf, 0xac, 0xe7, 0xcf, 0xcf, 0x4f, 0x34, 0x62, 0x75, 0x2a,
	0x85, 0x59, 0x11, 0xc6, 0x1b, 0x52, 0x6b, 0xae, 0x68, 0x05, 0x5a, 0x18, 0x01, 0xa5, 0xc6, 0x95,
	0x02, 0x03, 0x71, 0x52, 0x8a, 0xac, 0x00, 0x99, 0x6a, 0x06, 0x46, 0x83, 0xc4, 0xde, 0x80, 0x19,
	0x6f, 0x92, 0x3d, 0x37, 0xe3, 0xce, 0x4a, 0x15, 0xcf, 0x40, 0xb1, 0xde, 0x9d, 0x5c, 0xee, 0x2a,
	0xa4, 0x58, 0x0a, 0x43, 0x41, 0x31, 0xae, 0xa8, 0x51, 0x69, 0x99, 0x15, 0x9c, 0xda, 0x4e, 0xaf,
	0x3d, 0xc9, 0x21, 0x07, 0x77, 0x12, 0x7b, 0xf5, 0xaf, 0x67, 0xef, 0x61, 0x74, 0xfc, 0xac, 0xb9,
	0x9a, 0x6e, 0xb9, 0xe2, 0x79, 0x74, 0x34, 0x05, 0x90, 0x93, 0xbe, 0x4f, 0x0f, 0xc3, 0xd1, 0xff,
	0xf3, 0xc1, 0xcd, 0x05, 0xfe, 0x1d, 0x14, 0x7b, 0xed, 0xcc, 0xa1, 0x8d, 0x0f, 0xd6, 0x9f, 0xa7,
	0xc1, 0x6c, 0x2f, 0x24, 0x7e, 0x89, 0x06, 0xf7, 0x16, 0xef, 0xd1, 0xd2, 0xe9, 0xe1, 0x3f, 0x97,
	0x79, 0xfd, 0x57, 0xe6, 0x8f, 0xfc, 0xa9, 0xff, 0x8b, 0xa5, 0xf4, 0xd9, 0xbb, 0x59, 0xe3, 0xbb,
	0x75, 0x8b, 0xc2, 0x4d, 0x8b, 0xc2, 0xaf, 0x16, 0x85, 0x6f, 0x1d, 0x0a, 0x36, 0x1d, 0x0a, 0x3e,
	0x3a, 0x14, 0xbc, 0x5e, 0xe5, 0xc2, 0x14, 0xf5, 0x02, 0x67, 0xb0, 0x24, 0x0f, 0xbe, 0x69, 0x02,
	0x66, 0x0e, 0x92, 0x6c, 0x77, 0x6b, 0xdc, 0x72, 0x66, 0x55, 0x71, 0xbd, 0x38, 0x74, 0x8b, 0xdc,
	0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x31, 0x7e, 0x7f, 0xb5, 0x01, 0x00, 0x00,
}

func (m *UserPositions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPositions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPositions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LimitOrders) > 0 {
		for iNdEx := len(m.LimitOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserPositions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PoolDeposits) > 0 {
		for iNdEx := len(m.PoolDeposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolDeposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserPositions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserPositions(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserPositions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserPositions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolDeposits) > 0 {
		for _, e := range m.PoolDeposits {
			l = e.Size()
			n += 1 + l + sovUserPositions(uint64(l))
		}
	}
	if len(m.LimitOrders) > 0 {
		for _, e := range m.LimitOrders {
			l = e.Size()
			n += 1 + l + sovUserPositions(uint64(l))
		}
	}
	return n
}

func sovUserPositions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserPositions(x uint64) (n int) {
	return sovUserPositions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserPositions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserPositions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPositions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPositions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolDeposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserPositions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserPositions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserPositions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolDeposits = append(m.PoolDeposits, DepositRecord{})
			if err := m.PoolDeposits[len(m.PoolDeposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserPositions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserPositions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserPositions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrders = append(m.LimitOrders, LimitOrderTrancheUser{})
			if err := m.LimitOrders[len(m.LimitOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserPositions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserPositions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserPositions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserPositions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserPositions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserPositions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserPositions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserPositions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserPositions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserPositions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserPositions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserPositions = fmt.Errorf("proto: unexpected end of group")
)
