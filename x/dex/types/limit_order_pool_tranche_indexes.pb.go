// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/limit_order_pool_tranche_indexes.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LimitOrderTrancheTrancheIndexes struct {
	FillTrancheIndex  uint64 `protobuf:"varint,1,opt,name=fillTrancheIndex,proto3" json:"fillTrancheIndex,omitempty"`
	PlaceTrancheIndex uint64 `protobuf:"varint,2,opt,name=placeTrancheIndex,proto3" json:"placeTrancheIndex,omitempty"`
}

func (m *LimitOrderTrancheTrancheIndexes) Reset()         { *m = LimitOrderTrancheTrancheIndexes{} }
func (m *LimitOrderTrancheTrancheIndexes) String() string { return proto.CompactTextString(m) }
func (*LimitOrderTrancheTrancheIndexes) ProtoMessage()    {}
func (*LimitOrderTrancheTrancheIndexes) Descriptor() ([]byte, []int) {
	return fileDescriptor_b79f6bbe2d582ac5, []int{0}
}
func (m *LimitOrderTrancheTrancheIndexes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOrderTrancheTrancheIndexes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOrderTrancheTrancheIndexes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOrderTrancheTrancheIndexes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrderTrancheTrancheIndexes.Merge(m, src)
}
func (m *LimitOrderTrancheTrancheIndexes) XXX_Size() int {
	return m.Size()
}
func (m *LimitOrderTrancheTrancheIndexes) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrderTrancheTrancheIndexes.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrderTrancheTrancheIndexes proto.InternalMessageInfo

func (m *LimitOrderTrancheTrancheIndexes) GetFillTrancheIndex() uint64 {
	if m != nil {
		return m.FillTrancheIndex
	}
	return 0
}

func (m *LimitOrderTrancheTrancheIndexes) GetPlaceTrancheIndex() uint64 {
	if m != nil {
		return m.PlaceTrancheIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*LimitOrderTrancheTrancheIndexes)(nil), "nicholasdotsol.duality.dex.LimitOrderTrancheTrancheIndexes")
}

func init() {
	proto.RegisterFile("dex/limit_order_pool_tranche_indexes.proto", fileDescriptor_b79f6bbe2d582ac5)
}

var fileDescriptor_b79f6bbe2d582ac5 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4a, 0x49, 0xad, 0xd0,
	0xcf, 0xc9, 0xcc, 0xcd, 0x2c, 0x89, 0xcf, 0x2f, 0x4a, 0x49, 0x2d, 0x8a, 0x2f, 0xc8, 0xcf, 0xcf,
	0x89, 0x2f, 0x29, 0x4a, 0xcc, 0x4b, 0xce, 0x48, 0x8d, 0xcf, 0xcc, 0x4b, 0x49, 0xad, 0x48, 0x2d,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xca, 0xcb, 0x4c, 0xce, 0xc8, 0xcf, 0x49, 0x2c,
	0x4e, 0xc9, 0x2f, 0x29, 0xce, 0xcf, 0xd1, 0x4b, 0x29, 0x4d, 0xcc, 0xc9, 0x2c, 0xa9, 0xd4, 0x4b,
	0x49, 0xad, 0x50, 0xaa, 0xe6, 0x92, 0xf7, 0x01, 0x99, 0xe2, 0x0f, 0x32, 0x24, 0x04, 0xa2, 0x1d,
	0x4a, 0x79, 0x42, 0x0c, 0x11, 0xd2, 0xe2, 0x12, 0x48, 0xcb, 0xcc, 0xc9, 0x41, 0x16, 0x95, 0x60,
	0x54, 0x60, 0xd4, 0x60, 0x09, 0xc2, 0x10, 0x17, 0xd2, 0xe1, 0x12, 0x2c, 0xc8, 0x49, 0x4c, 0x46,
	0x31, 0x42, 0x82, 0x09, 0xac, 0x18, 0x53, 0xc2, 0xc9, 0xfd, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f,
	0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b,
	0x8f, 0xe5, 0x18, 0xa2, 0x74, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5,
	0xfd, 0xa0, 0xae, 0x77, 0xc9, 0x2f, 0x09, 0xce, 0xcf, 0xd1, 0x87, 0xba, 0x5e, 0xbf, 0x42, 0x1f,
	0x14, 0x04, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x8f, 0x1a, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xfe, 0xc0, 0x3e, 0x44, 0x16, 0x01, 0x00, 0x00,
}

func (m *LimitOrderTrancheTrancheIndexes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOrderTrancheTrancheIndexes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitOrderTrancheTrancheIndexes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlaceTrancheIndex != 0 {
		i = encodeVarintLimitOrderPoolTrancheIndexes(dAtA, i, uint64(m.PlaceTrancheIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.FillTrancheIndex != 0 {
		i = encodeVarintLimitOrderPoolTrancheIndexes(dAtA, i, uint64(m.FillTrancheIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLimitOrderPoolTrancheIndexes(dAtA []byte, offset int, v uint64) int {
	offset -= sovLimitOrderPoolTrancheIndexes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LimitOrderTrancheTrancheIndexes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FillTrancheIndex != 0 {
		n += 1 + sovLimitOrderPoolTrancheIndexes(uint64(m.FillTrancheIndex))
	}
	if m.PlaceTrancheIndex != 0 {
		n += 1 + sovLimitOrderPoolTrancheIndexes(uint64(m.PlaceTrancheIndex))
	}
	return n
}

func sovLimitOrderPoolTrancheIndexes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLimitOrderPoolTrancheIndexes(x uint64) (n int) {
	return sovLimitOrderPoolTrancheIndexes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LimitOrderTrancheTrancheIndexes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimitOrderPoolTrancheIndexes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOrderTrancheTrancheIndexes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOrderTrancheTrancheIndexes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillTrancheIndex", wireType)
			}
			m.FillTrancheIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolTrancheIndexes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FillTrancheIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceTrancheIndex", wireType)
			}
			m.PlaceTrancheIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderPoolTrancheIndexes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlaceTrancheIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLimitOrderPoolTrancheIndexes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimitOrderPoolTrancheIndexes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLimitOrderPoolTrancheIndexes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimitOrderPoolTrancheIndexes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderPoolTrancheIndexes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderPoolTrancheIndexes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLimitOrderPoolTrancheIndexes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLimitOrderPoolTrancheIndexes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLimitOrderPoolTrancheIndexes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLimitOrderPoolTrancheIndexes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimitOrderPoolTrancheIndexes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLimitOrderPoolTrancheIndexes = fmt.Errorf("proto: unexpected end of group")
)
