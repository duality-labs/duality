// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/reserve_0_and_shares_type.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Reserve0AndSharesType struct {
	Reserve0    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=reserve0,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reserve0" yaml:"reserve0"`
	TotalShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=totalShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"totalShares" yaml:"totalShares"`
}

func (m *Reserve0AndSharesType) Reset()         { *m = Reserve0AndSharesType{} }
func (m *Reserve0AndSharesType) String() string { return proto.CompactTextString(m) }
func (*Reserve0AndSharesType) ProtoMessage()    {}
func (*Reserve0AndSharesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e62b6e7debbd5aa, []int{0}
}
func (m *Reserve0AndSharesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reserve0AndSharesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reserve0AndSharesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reserve0AndSharesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reserve0AndSharesType.Merge(m, src)
}
func (m *Reserve0AndSharesType) XXX_Size() int {
	return m.Size()
}
func (m *Reserve0AndSharesType) XXX_DiscardUnknown() {
	xxx_messageInfo_Reserve0AndSharesType.DiscardUnknown(m)
}

var xxx_messageInfo_Reserve0AndSharesType proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Reserve0AndSharesType)(nil), "nicholasdotsol.duality.dex.Reserve0AndSharesType")
}

func init() {
	proto.RegisterFile("dex/reserve_0_and_shares_type.proto", fileDescriptor_6e62b6e7debbd5aa)
}

var fileDescriptor_6e62b6e7debbd5aa = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0x49, 0xad, 0xd0,
	0x2f, 0x4a, 0x2d, 0x4e, 0x2d, 0x2a, 0x4b, 0x8d, 0x37, 0x88, 0x4f, 0xcc, 0x4b, 0x89, 0x2f, 0xce,
	0x48, 0x2c, 0x4a, 0x2d, 0x8e, 0x2f, 0xa9, 0x2c, 0x48, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x92, 0xca, 0xcb, 0x4c, 0xce, 0xc8, 0xcf, 0x49, 0x2c, 0x4e, 0xc9, 0x2f, 0x29, 0xce, 0xcf, 0xd1,
	0x4b, 0x29, 0x4d, 0xcc, 0xc9, 0x2c, 0xa9, 0xd4, 0x4b, 0x49, 0xad, 0x90, 0x12, 0x49, 0xcf, 0x4f,
	0xcf, 0x07, 0x2b, 0xd3, 0x07, 0xb1, 0x20, 0x3a, 0x94, 0x7e, 0x32, 0x72, 0x89, 0x06, 0x41, 0x4c,
	0x35, 0x70, 0xcc, 0x4b, 0x09, 0x06, 0x1b, 0x19, 0x52, 0x59, 0x90, 0x2a, 0x94, 0xc9, 0xc5, 0x01,
	0xb5, 0xce, 0x40, 0x82, 0x51, 0x81, 0x51, 0x83, 0xd3, 0xc9, 0xf7, 0xc4, 0x3d, 0x79, 0x86, 0x5b,
	0xf7, 0xe4, 0xd5, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x93, 0xf3,
	0x8b, 0x73, 0xf3, 0x8b, 0xa1, 0x94, 0x6e, 0x71, 0x4a, 0xb6, 0x3e, 0xc8, 0x39, 0xc5, 0x7a, 0x9e,
	0x79, 0x25, 0xaf, 0xee, 0xc9, 0xc3, 0x4d, 0xf8, 0x74, 0x4f, 0x9e, 0xbf, 0x32, 0x31, 0x37, 0xc7,
	0x4a, 0x09, 0x26, 0xa2, 0x14, 0x04, 0x97, 0x14, 0x2a, 0xe5, 0xe2, 0x2e, 0xc9, 0x2f, 0x49, 0xcc,
	0x81, 0xd8, 0x2e, 0xc1, 0x04, 0xb6, 0x2d, 0x98, 0x04, 0xdb, 0x5c, 0x52, 0x93, 0x5f, 0xdd, 0x93,
	0x47, 0x36, 0xe4, 0xd3, 0x3d, 0x79, 0x21, 0x88, 0x85, 0x48, 0x82, 0x4a, 0x41, 0xc8, 0x4a, 0x9c,
	0xdc, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f,
	0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x17, 0xc9, 0x4e, 0x3f,
	0x68, 0x90, 0xba, 0xe4, 0x97, 0x04, 0xe7, 0xe7, 0xe8, 0x43, 0x83, 0x54, 0xbf, 0x42, 0x1f, 0x14,
	0x21, 0x60, 0xeb, 0x93, 0xd8, 0xc0, 0x61, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x91,
	0x30, 0xa0, 0xa4, 0x01, 0x00, 0x00,
}

func (m *Reserve0AndSharesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reserve0AndSharesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reserve0AndSharesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalShares.Size()
		i -= size
		if _, err := m.TotalShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReserve_0AndSharesType(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Reserve0.Size()
		i -= size
		if _, err := m.Reserve0.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReserve_0AndSharesType(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintReserve_0AndSharesType(dAtA []byte, offset int, v uint64) int {
	offset -= sovReserve_0AndSharesType(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Reserve0AndSharesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Reserve0.Size()
	n += 1 + l + sovReserve_0AndSharesType(uint64(l))
	l = m.TotalShares.Size()
	n += 1 + l + sovReserve_0AndSharesType(uint64(l))
	return n
}

func sovReserve_0AndSharesType(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReserve_0AndSharesType(x uint64) (n int) {
	return sovReserve_0AndSharesType(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Reserve0AndSharesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReserve_0AndSharesType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reserve0AndSharesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reserve0AndSharesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReserve_0AndSharesType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReserve_0AndSharesType
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReserve_0AndSharesType
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reserve0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReserve_0AndSharesType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReserve_0AndSharesType
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReserve_0AndSharesType
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReserve_0AndSharesType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReserve_0AndSharesType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReserve_0AndSharesType(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReserve_0AndSharesType
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReserve_0AndSharesType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReserve_0AndSharesType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReserve_0AndSharesType
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReserve_0AndSharesType
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReserve_0AndSharesType
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReserve_0AndSharesType        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReserve_0AndSharesType          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReserve_0AndSharesType = fmt.Errorf("proto: unexpected end of group")
)
