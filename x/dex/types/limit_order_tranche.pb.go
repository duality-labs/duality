// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: duality/dex/limit_order_tranche.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LimitOrderTranche struct {
	PairId           *PairId                                `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	TokenIn          string                                 `protobuf:"bytes,2,opt,name=tokenIn,proto3" json:"tokenIn,omitempty"`
	TickIndex        int64                                  `protobuf:"varint,3,opt,name=tickIndex,proto3" json:"tickIndex,omitempty"`
	TrancheIndex     uint64                                 `protobuf:"varint,4,opt,name=trancheIndex,proto3" json:"trancheIndex,omitempty"`
	ReservesTokenIn  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=reservesTokenIn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reservesTokenIn" yaml:"reserves"`
	ReservesTokenOut github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=reservesTokenOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reservesTokenOut" yaml:"fill"`
	TotalTokenIn     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=totalTokenIn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalTokenIn" yaml:"totalShares"`
	TotalTokenOut    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=totalTokenOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalTokenOut" yaml:"totalShares"`
}

func (m *LimitOrderTranche) Reset()         { *m = LimitOrderTranche{} }
func (m *LimitOrderTranche) String() string { return proto.CompactTextString(m) }
func (*LimitOrderTranche) ProtoMessage()    {}
func (*LimitOrderTranche) Descriptor() ([]byte, []int) {
	return fileDescriptor_49e73267811ad014, []int{0}
}
func (m *LimitOrderTranche) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOrderTranche) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOrderTranche.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOrderTranche) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrderTranche.Merge(m, src)
}
func (m *LimitOrderTranche) XXX_Size() int {
	return m.Size()
}
func (m *LimitOrderTranche) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrderTranche.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrderTranche proto.InternalMessageInfo

func (m *LimitOrderTranche) GetPairId() *PairId {
	if m != nil {
		return m.PairId
	}
	return nil
}

func (m *LimitOrderTranche) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *LimitOrderTranche) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *LimitOrderTranche) GetTrancheIndex() uint64 {
	if m != nil {
		return m.TrancheIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*LimitOrderTranche)(nil), "nicholasdotsol.duality.dex.LimitOrderTranche")
}

func init() {
	proto.RegisterFile("duality/dex/limit_order_tranche.proto", fileDescriptor_49e73267811ad014)
}

var fileDescriptor_49e73267811ad014 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x33, 0xb6, 0xdd, 0xda, 0x69, 0xa5, 0x3a, 0x78, 0x88, 0x8b, 0x24, 0x21, 0xa0, 0xe4,
	0xd2, 0x04, 0xf4, 0xd6, 0x63, 0x11, 0x24, 0x20, 0x56, 0xd3, 0xf5, 0xe2, 0x65, 0x49, 0x33, 0xe3,
	0x66, 0xd8, 0x49, 0x66, 0x99, 0x99, 0x95, 0x2c, 0xa2, 0x9f, 0xc1, 0xaf, 0xe0, 0xb7, 0xe9, 0xb1,
	0x47, 0xf1, 0x10, 0x64, 0xf7, 0xe6, 0x71, 0x3f, 0x81, 0x64, 0x92, 0xd0, 0xcd, 0x2e, 0x7b, 0xd8,
	0x9e, 0x92, 0x79, 0xef, 0xff, 0xfe, 0xbf, 0xf7, 0x87, 0x07, 0x5f, 0xe0, 0x69, 0xcc, 0xa8, 0x9a,
	0x05, 0x98, 0x14, 0x01, 0xa3, 0x19, 0x55, 0x43, 0x2e, 0x30, 0x11, 0x43, 0x25, 0xe2, 0x3c, 0x49,
	0x89, 0x3f, 0x11, 0x5c, 0x71, 0xd4, 0xcf, 0x69, 0x92, 0x72, 0x16, 0x4b, 0xcc, 0x95, 0xe4, 0xcc,
	0x6f, 0xa6, 0x7c, 0x4c, 0x8a, 0xfe, 0xd3, 0x11, 0x1f, 0x71, 0x2d, 0x0b, 0xaa, 0xbf, 0x7a, 0xa2,
	0xff, 0x6c, 0xd5, 0x78, 0x12, 0x53, 0x31, 0xa4, 0xb8, 0x6e, 0xb9, 0xbf, 0x0e, 0xe0, 0x93, 0x77,
	0x15, 0xea, 0xb2, 0x22, 0x0d, 0x6a, 0x10, 0x3a, 0x87, 0xbd, 0x4a, 0x16, 0x62, 0x13, 0x38, 0xc0,
	0x3b, 0x7e, 0xe5, 0xfa, 0xdb, 0x99, 0xfe, 0x07, 0xad, 0x8c, 0x9a, 0x09, 0x64, 0xc2, 0x43, 0xc5,
	0xc7, 0x24, 0x0f, 0x73, 0xf3, 0x81, 0x03, 0xbc, 0xa3, 0xa8, 0x7d, 0xa2, 0xe7, 0xf0, 0x48, 0xd1,
	0x64, 0x1c, 0xe6, 0x98, 0x14, 0xe6, 0x9e, 0x03, 0xbc, 0xbd, 0xe8, 0xae, 0x80, 0x5c, 0x78, 0xd2,
	0xe4, 0xac, 0x05, 0xfb, 0x0e, 0xf0, 0xf6, 0xa3, 0x4e, 0x0d, 0xfd, 0x80, 0xa7, 0x82, 0x48, 0x22,
	0xbe, 0x12, 0x39, 0x68, 0x18, 0x07, 0x15, 0xe3, 0x62, 0x70, 0x53, 0xda, 0xc6, 0x9f, 0xd2, 0x7e,
	0x39, 0xa2, 0x2a, 0x9d, 0x5e, 0xfb, 0x09, 0xcf, 0x82, 0x84, 0xcb, 0x8c, 0xcb, 0xe6, 0x73, 0x26,
	0xf1, 0x38, 0x50, 0xb3, 0x09, 0x91, 0x7e, 0x98, 0xab, 0x7f, 0xa5, 0xbd, 0x6e, 0xb4, 0x2c, 0xed,
	0xd3, 0x59, 0x9c, 0xb1, 0x73, 0xb7, 0x6d, 0xb8, 0xd1, 0xba, 0x06, 0x7d, 0x87, 0x8f, 0x3b, 0xa5,
	0xcb, 0xa9, 0x32, 0x7b, 0x7a, 0x81, 0x8f, 0x3b, 0x2f, 0xb0, 0xe1, 0xb4, 0x2c, 0xed, 0xe3, 0x7a,
	0x83, 0x2f, 0x94, 0x31, 0x37, 0xda, 0x10, 0xa0, 0x02, 0x9e, 0x28, 0xae, 0x62, 0xd6, 0x66, 0x3f,
	0xbc, 0x67, 0xf6, 0x8e, 0xcb, 0xb2, 0xb4, 0x51, 0x8d, 0xd5, 0xd5, 0xab, 0x34, 0x16, 0x55, 0xf6,
	0x8e, 0x06, 0x7d, 0x83, 0x8f, 0xee, 0xde, 0x55, 0xea, 0x87, 0x1a, 0xfd, 0x69, 0x67, 0x74, 0xd7,
	0x66, 0x0b, 0xbb, 0x2b, 0xba, 0x78, 0x7b, 0x33, 0xb7, 0xc0, 0xed, 0xdc, 0x02, 0x7f, 0xe7, 0x16,
	0xf8, 0xb9, 0xb0, 0x8c, 0xdb, 0x85, 0x65, 0xfc, 0x5e, 0x58, 0xc6, 0xe7, 0xb3, 0x15, 0xee, 0xfb,
	0xe6, 0x42, 0xdf, 0x70, 0x75, 0xc5, 0x59, 0xd0, 0x9e, 0x7c, 0xa1, 0x8f, 0x5e, 0xaf, 0x70, 0xdd,
	0xd3, 0x37, 0xff, 0xfa, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xac, 0x70, 0x10, 0x69, 0x03,
	0x00, 0x00,
}

func (m *LimitOrderTranche) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOrderTranche) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitOrderTranche) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalTokenOut.Size()
		i -= size
		if _, err := m.TotalTokenOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.TotalTokenIn.Size()
		i -= size
		if _, err := m.TotalTokenIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.ReservesTokenOut.Size()
		i -= size
		if _, err := m.ReservesTokenOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.ReservesTokenIn.Size()
		i -= size
		if _, err := m.ReservesTokenIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.TrancheIndex != 0 {
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(m.TrancheIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.TickIndex != 0 {
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintLimitOrderTranche(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if m.PairId != nil {
		{
			size, err := m.PairId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLimitOrderTranche(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLimitOrderTranche(dAtA []byte, offset int, v uint64) int {
	offset -= sovLimitOrderTranche(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LimitOrderTranche) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PairId != nil {
		l = m.PairId.Size()
		n += 1 + l + sovLimitOrderTranche(uint64(l))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovLimitOrderTranche(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovLimitOrderTranche(uint64(m.TickIndex))
	}
	if m.TrancheIndex != 0 {
		n += 1 + sovLimitOrderTranche(uint64(m.TrancheIndex))
	}
	l = m.ReservesTokenIn.Size()
	n += 1 + l + sovLimitOrderTranche(uint64(l))
	l = m.ReservesTokenOut.Size()
	n += 1 + l + sovLimitOrderTranche(uint64(l))
	l = m.TotalTokenIn.Size()
	n += 1 + l + sovLimitOrderTranche(uint64(l))
	l = m.TotalTokenOut.Size()
	n += 1 + l + sovLimitOrderTranche(uint64(l))
	return n
}

func sovLimitOrderTranche(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLimitOrderTranche(x uint64) (n int) {
	return sovLimitOrderTranche(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LimitOrderTranche) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimitOrderTranche
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOrderTranche: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOrderTranche: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PairId == nil {
				m.PairId = &PairId{}
			}
			if err := m.PairId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheIndex", wireType)
			}
			m.TrancheIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrancheIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservesTokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReservesTokenIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservesTokenOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReservesTokenOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTokenIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTokenOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTokenOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimitOrderTranche(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimitOrderTranche
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLimitOrderTranche(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimitOrderTranche
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitOrderTranche
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLimitOrderTranche
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLimitOrderTranche
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLimitOrderTranche
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLimitOrderTranche        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimitOrderTranche          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLimitOrderTranche = fmt.Errorf("proto: unexpected end of group")
)
