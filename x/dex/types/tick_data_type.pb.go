// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/tick_data_type.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TickDataType struct {
	Reserve0AndShares []*Reserve0AndSharesType                 `protobuf:"bytes,1,rep,name=reserve0AndShares,proto3" json:"reserve0AndShares,omitempty"`
	Reserve1          []github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,rep,name=reserve1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reserve1" yaml:"reserve1"`
}

func (m *TickDataType) Reset()         { *m = TickDataType{} }
func (m *TickDataType) String() string { return proto.CompactTextString(m) }
func (*TickDataType) ProtoMessage()    {}
func (*TickDataType) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9948d5db2b1127, []int{0}
}
func (m *TickDataType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickDataType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickDataType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickDataType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickDataType.Merge(m, src)
}
func (m *TickDataType) XXX_Size() int {
	return m.Size()
}
func (m *TickDataType) XXX_DiscardUnknown() {
	xxx_messageInfo_TickDataType.DiscardUnknown(m)
}

var xxx_messageInfo_TickDataType proto.InternalMessageInfo

func (m *TickDataType) GetReserve0AndShares() []*Reserve0AndSharesType {
	if m != nil {
		return m.Reserve0AndShares
	}
	return nil
}

func init() {
	proto.RegisterType((*TickDataType)(nil), "nicholasdotsol.duality.dex.TickDataType")
}

func init() { proto.RegisterFile("dex/tick_data_type.proto", fileDescriptor_9c9948d5db2b1127) }

var fileDescriptor_9c9948d5db2b1127 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0x49, 0xad, 0xd0,
	0x2f, 0xc9, 0x4c, 0xce, 0x8e, 0x4f, 0x49, 0x2c, 0x49, 0x8c, 0x2f, 0xa9, 0x2c, 0x48, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xca, 0xcb, 0x4c, 0xce, 0xc8, 0xcf, 0x49, 0x2c, 0x4e, 0xc9,
	0x2f, 0x29, 0xce, 0xcf, 0xd1, 0x4b, 0x29, 0x4d, 0xcc, 0xc9, 0x2c, 0xa9, 0xd4, 0x4b, 0x49, 0xad,
	0x90, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x2b, 0xd3, 0x07, 0xb1, 0x20, 0x3a, 0xa4, 0x94, 0x41,
	0x66, 0x15, 0xa5, 0x16, 0xa7, 0x16, 0x95, 0xa5, 0xc6, 0x1b, 0xc4, 0x27, 0xe6, 0xa5, 0xc4, 0x17,
	0x67, 0x24, 0x16, 0xa5, 0x16, 0x23, 0x19, 0xab, 0x74, 0x8b, 0x91, 0x8b, 0x27, 0x24, 0x33, 0x39,
	0xdb, 0x25, 0xb1, 0x24, 0x31, 0xa4, 0xb2, 0x20, 0x55, 0x28, 0x9e, 0x4b, 0x10, 0xaa, 0xc7, 0xc0,
	0x31, 0x2f, 0x25, 0x18, 0xac, 0x41, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0xc8, 0x50, 0x0f, 0xb7,
	0x1b, 0xf4, 0x82, 0xd0, 0x35, 0x81, 0x4c, 0x0b, 0xc2, 0x34, 0x4b, 0x28, 0x93, 0x8b, 0x03, 0x2a,
	0x68, 0x28, 0xc1, 0xa4, 0xc0, 0xac, 0xc1, 0xe9, 0xe4, 0x7b, 0xe2, 0x9e, 0x3c, 0xc3, 0xad, 0x7b,
	0xf2, 0x6a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xc9, 0xf9, 0xc5,
	0xb9, 0xf9, 0xc5, 0x50, 0x4a, 0xb7, 0x38, 0x25, 0x5b, 0x1f, 0xe4, 0xe8, 0x62, 0x3d, 0xcf, 0xbc,
	0x92, 0x57, 0xf7, 0xe4, 0xe1, 0x26, 0x7c, 0xba, 0x27, 0xcf, 0x5f, 0x99, 0x98, 0x9b, 0x63, 0xa5,
	0x04, 0x13, 0x51, 0x0a, 0x82, 0x4b, 0x3a, 0xb9, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c,
	0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1,
	0x1c, 0x43, 0x94, 0x2e, 0x92, 0x55, 0x7e, 0x50, 0x4f, 0xb9, 0xe4, 0x97, 0x04, 0xe7, 0xe7, 0xe8,
	0x43, 0x3d, 0xa5, 0x5f, 0xa1, 0x0f, 0x8e, 0x0b, 0x90, 0xad, 0x49, 0x6c, 0xe0, 0xc0, 0x32, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x70, 0xe4, 0xf2, 0xc2, 0x9f, 0x01, 0x00, 0x00,
}

func (m *TickDataType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickDataType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickDataType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reserve1) > 0 {
		for iNdEx := len(m.Reserve1) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Reserve1[iNdEx].Size()
				i -= size
				if _, err := m.Reserve1[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTickDataType(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Reserve0AndShares) > 0 {
		for iNdEx := len(m.Reserve0AndShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reserve0AndShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTickDataType(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTickDataType(dAtA []byte, offset int, v uint64) int {
	offset -= sovTickDataType(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TickDataType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reserve0AndShares) > 0 {
		for _, e := range m.Reserve0AndShares {
			l = e.Size()
			n += 1 + l + sovTickDataType(uint64(l))
		}
	}
	if len(m.Reserve1) > 0 {
		for _, e := range m.Reserve1 {
			l = e.Size()
			n += 1 + l + sovTickDataType(uint64(l))
		}
	}
	return n
}

func sovTickDataType(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTickDataType(x uint64) (n int) {
	return sovTickDataType(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TickDataType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTickDataType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickDataType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickDataType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve0AndShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickDataType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickDataType
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTickDataType
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve0AndShares = append(m.Reserve0AndShares, &Reserve0AndSharesType{})
			if err := m.Reserve0AndShares[len(m.Reserve0AndShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickDataType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickDataType
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTickDataType
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Reserve1 = append(m.Reserve1, v)
			if err := m.Reserve1[len(m.Reserve1)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTickDataType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTickDataType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTickDataType(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTickDataType
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTickDataType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTickDataType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTickDataType
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTickDataType
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTickDataType
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTickDataType        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTickDataType          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTickDataType = fmt.Errorf("proto: unexpected end of group")
)
