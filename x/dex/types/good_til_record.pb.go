// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: duality/dex/good_til_record.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GoodTilRecord struct {
	// see limitOrderTranche.proto for details on goodTilDate
	GoodTilDate time.Time `protobuf:"bytes,1,opt,name=GoodTilDate,proto3,stdtime" json:"GoodTilDate"`
	TrancheRef  []byte    `protobuf:"bytes,2,opt,name=trancheRef,proto3" json:"trancheRef,omitempty"`
}

func (m *GoodTilRecord) Reset()         { *m = GoodTilRecord{} }
func (m *GoodTilRecord) String() string { return proto.CompactTextString(m) }
func (*GoodTilRecord) ProtoMessage()    {}
func (*GoodTilRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec9dbfd0a707dd9d, []int{0}
}
func (m *GoodTilRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodTilRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodTilRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodTilRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodTilRecord.Merge(m, src)
}
func (m *GoodTilRecord) XXX_Size() int {
	return m.Size()
}
func (m *GoodTilRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodTilRecord.DiscardUnknown(m)
}

var xxx_messageInfo_GoodTilRecord proto.InternalMessageInfo

func (m *GoodTilRecord) GetGoodTilDate() time.Time {
	if m != nil {
		return m.GoodTilDate
	}
	return time.Time{}
}

func (m *GoodTilRecord) GetTrancheRef() []byte {
	if m != nil {
		return m.TrancheRef
	}
	return nil
}

func init() {
	proto.RegisterType((*GoodTilRecord)(nil), "dualitylabs.duality.dex.GoodTilRecord")
}

func init() { proto.RegisterFile("duality/dex/good_til_record.proto", fileDescriptor_ec9dbfd0a707dd9d) }

var fileDescriptor_ec9dbfd0a707dd9d = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0x3d, 0x6b, 0xc3, 0x30,
	0x10, 0xb5, 0x3a, 0x94, 0xa2, 0xb4, 0x8b, 0x29, 0x34, 0x78, 0x90, 0xd3, 0x4e, 0x81, 0x52, 0x09,
	0xda, 0x7f, 0x10, 0xfa, 0xb1, 0x9b, 0x4c, 0x5d, 0x82, 0x6c, 0x29, 0x8a, 0x40, 0xee, 0x19, 0xfb,
	0x4c, 0x9d, 0x7f, 0x91, 0x9f, 0x95, 0x31, 0x63, 0xa7, 0xb6, 0xd8, 0x7f, 0x24, 0x44, 0xb6, 0x21,
	0xdb, 0xbb, 0xc7, 0x7b, 0xef, 0xee, 0x1d, 0xbd, 0x57, 0xb5, 0x74, 0x16, 0xb7, 0x42, 0xe9, 0x46,
	0x18, 0x00, 0xb5, 0x42, 0xeb, 0x56, 0xa5, 0xce, 0xa0, 0x54, 0xbc, 0x28, 0x01, 0x21, 0xbc, 0x1b,
	0x24, 0x4e, 0xa6, 0x15, 0x1f, 0x30, 0x57, 0xba, 0x89, 0x62, 0x03, 0x60, 0x9c, 0x16, 0x5e, 0x96,
	0xd6, 0x6b, 0x81, 0x36, 0xd7, 0x15, 0xca, 0xbc, 0xe8, 0x9d, 0xd1, 0xad, 0x01, 0x03, 0x1e, 0x8a,
	0x13, 0xea, 0xd9, 0x87, 0x6f, 0x7a, 0xf3, 0x01, 0xa0, 0x96, 0xd6, 0x25, 0x7e, 0x4d, 0xf8, 0x4e,
	0x27, 0x03, 0xf1, 0x2a, 0x51, 0x4f, 0xc9, 0x8c, 0xcc, 0x27, 0xcf, 0x11, 0xef, 0xd3, 0xf9, 0x98,
	0xce, 0x97, 0x63, 0xfa, 0xe2, 0x6a, 0xff, 0x1b, 0x07, 0xbb, 0xbf, 0x98, 0x24, 0xe7, 0xc6, 0x90,
	0x51, 0x8a, 0xa5, 0xfc, 0xca, 0x36, 0x3a, 0xd1, 0xeb, 0xe9, 0xc5, 0x8c, 0xcc, 0xaf, 0x93, 0x33,
	0x66, 0xf1, 0xb6, 0x6f, 0x19, 0x39, 0xb4, 0x8c, 0xfc, 0xb7, 0x8c, 0xec, 0x3a, 0x16, 0x1c, 0x3a,
	0x16, 0xfc, 0x74, 0x2c, 0xf8, 0x7c, 0x34, 0x16, 0x37, 0x75, 0xca, 0x33, 0xc8, 0xc5, 0xd0, 0xf0,
	0xe9, 0x54, 0x77, 0x1c, 0x44, 0xe3, 0xff, 0x83, 0xdb, 0x42, 0x57, 0xe9, 0xa5, 0xbf, 0xe8, 0xe5,
	0x18, 0x00, 0x00, 0xff, 0xff, 0x01, 0x37, 0x94, 0x39, 0x3b, 0x01, 0x00, 0x00,
}

func (m *GoodTilRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodTilRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodTilRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrancheRef) > 0 {
		i -= len(m.TrancheRef)
		copy(dAtA[i:], m.TrancheRef)
		i = encodeVarintGoodTilRecord(dAtA, i, uint64(len(m.TrancheRef)))
		i--
		dAtA[i] = 0x12
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.GoodTilDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.GoodTilDate):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGoodTilRecord(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGoodTilRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovGoodTilRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GoodTilRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.GoodTilDate)
	n += 1 + l + sovGoodTilRecord(uint64(l))
	l = len(m.TrancheRef)
	if l > 0 {
		n += 1 + l + sovGoodTilRecord(uint64(l))
	}
	return n
}

func sovGoodTilRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGoodTilRecord(x uint64) (n int) {
	return sovGoodTilRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GoodTilRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoodTilRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodTilRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodTilRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodTilDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoodTilRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoodTilRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGoodTilRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.GoodTilDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheRef", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoodTilRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoodTilRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoodTilRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrancheRef = append(m.TrancheRef[:0], dAtA[iNdEx:postIndex]...)
			if m.TrancheRef == nil {
				m.TrancheRef = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoodTilRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGoodTilRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGoodTilRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGoodTilRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGoodTilRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGoodTilRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGoodTilRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGoodTilRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGoodTilRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGoodTilRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGoodTilRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGoodTilRecord = fmt.Errorf("proto: unexpected end of group")
)
