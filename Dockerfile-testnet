# build custom simd command to get testnet configurations
FROM golang:1.18-alpine AS testnetconfig

RUN apk add \
    curl \
    make \
    git \
    libc-dev \
    bash \
    gcc \
    linux-headers \
    eudev-dev \
    python3

WORKDIR /usr/src

RUN git clone --single-branch --branch 'v0.45.4' https://github.com/cosmos/cosmos-sdk.git /usr/src

RUN make build-linux

# generate base chain testnet configurations /root/.testnet
RUN build/simd testnet init-files \
    --v 4 \
    -o /root/.testnet \
    --starting-ip-address 192.168.10.10 \
    --keyring-backend test \
    --chain-id duality \
    --node-daemon-home dualityd

# [Choice] Go version (use -bullseye variants on local arm64/Apple Silicon): 1, 1.16, 1.17, 1-bullseye, 1.16-bullseye, 1.17-bullseye, 1-buster, 1.16-buster, 1.17-buster
FROM golang:1.18-bullseye as commonconfig

# install additional OS packages.
RUN apt update && \
    apt upgrade -y

RUN apt-get install -y \
    build-essential \
    ca-certificates \
    jq \
    curl

WORKDIR /usr/src

# Get Go dependencies
COPY go.mod ./go.mod
COPY go.sum ./go.sum
RUN go mod download

# Copy work files (but not Dockerfile: to avoid invalidating caches while developing)
COPY app ./app
COPY cmd ./cmd
COPY docs ./docs
COPY proto ./proto
COPY testutil ./testutil
COPY vue ./vue
COPY x ./x
COPY config.yml ./config.yml

# compile dualityd
RUN go install ./cmd/dualityd

# create duality chain config files
RUN dualityd init duality

# add test accounts
RUN mkdir /root/.duality/testkeys
# alice
RUN dualityd keys add alice --keyring-backend test --output json > /root/.duality/testkeys/alice.json
RUN dualityd add-genesis-account $(dualityd keys show alice -a --keyring-backend test) 1000000testtoken,1000000stake --keyring-backend test
# bob
RUN dualityd keys add bob --keyring-backend test --output json > /root/.duality/testkeys/bob.json
RUN dualityd add-genesis-account $(dualityd keys show bob -a --keyring-backend test) 1000000testtoken,1000000stake --keyring-backend test

# Add gentxs to the genesis file
RUN dualityd gentx alice 1000000stake --chain-id duality --keyring-backend test
RUN dualityd collect-gentxs

# build each nodes settings
FROM commonconfig

# get testnet config files
ARG NODE_ID
COPY --from=testnetconfig /root/.testnet/node$NODE_ID /testnet/

# merge genesis files together:
# take initial state of "auth", "bank", and "genutil" (the genesis txs) from the testnets configuration only
RUN jq -s '.[0] * { app_state: { auth: { accounts: [ .[0].app_state.auth.accounts[], .[1].app_state.auth.accounts[] ] }, bank: { balances: [ .[0].app_state.bank.balances[], .[1].app_state.bank.balances[] ] }, genutil: .[1].app_state.genutil } }' \
    /root/.duality/config/genesis.json /testnet/dualityd/config/genesis.json \
    > /root/combined-genesis.json
# overwrite genesis file that will be used
RUN cp /root/combined-genesis.json /testnet/dualityd/config/genesis.json

# modify node configuration files
# prevent 'local network address' warning from showing
RUN sed -i 's/addr_book_strict = true/addr_book_strict = false/g' /testnet/dualityd/config/config.toml;
# overwrite CORS rules to allow browser testing and development with frontend local builds
RUN sed -i 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' /testnet/dualityd/config/app.toml;
RUN sed -i 's/cors_allowed_origins = \[\]/cors_allowed_origins = ["*", ]/g' /testnet/dualityd/config/config.toml;
RUN echo '\n\n[rpc]\ncors_allowed_origins = ["*"]' >> /testnet/dualityd/config/app.toml

# see docs for exposed ports:
#   https://docs.ignite.com/kb/config.html#host
EXPOSE 26657
EXPOSE 26656
EXPOSE 6060
EXPOSE 9090
EXPOSE 1317

# default to serving the chain with the modified testnet data
ENTRYPOINT ["dualityd", "--home", "/testnet/dualityd", "start", "--moniker", "duality"]
