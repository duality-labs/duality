syntax = "proto3";
package dualitylabs.duality.dex;

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/duality-labs/duality/x/dex/types";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";
// Msg defines the Msg service.
service Msg {
  rpc Deposit(MsgDeposit) returns (MsgDepositResponse);
  rpc Withdrawl(MsgWithdrawl) returns (MsgWithdrawlResponse);
  rpc Swap(MsgSwap) returns (MsgSwapResponse);
  rpc PlaceLimitOrder(MsgPlaceLimitOrder) returns (MsgPlaceLimitOrderResponse);
  rpc WithdrawFilledLimitOrder(MsgWithdrawFilledLimitOrder) returns (MsgWithdrawFilledLimitOrderResponse);
  rpc CancelLimitOrder(MsgCancelLimitOrder) returns (MsgCancelLimitOrderResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message DepositOptions {
  bool autoswap = 1; 
}

message MsgDeposit {
  string creator = 1;
  string receiver = 2;
  string tokenA = 3;
  string tokenB = 4;
  repeated string amountsA = 5  [
      (gogoproto.moretags)   = "yaml:\"amountA\"",
      (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
      (gogoproto.nullable)   = false,
      (gogoproto.jsontag) = "amountA"
  ]; 
   repeated string amountsB = 6  [
      (gogoproto.moretags)   = "yaml:\"amountB\"",
      (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
      (gogoproto.nullable)   = false,
      (gogoproto.jsontag) = "amountB"
  ]; 
  repeated int64 tickIndexesAToB = 7;
  repeated uint64 fees = 8;
  repeated DepositOptions Options = 9;
}

message MsgDepositResponse {
   repeated string Reserve0Deposited = 1 [
      (gogoproto.moretags)   = "yaml:\"reserve0Deposited\"",
      (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
      (gogoproto.nullable)   = false,
      (gogoproto.jsontag) = "reserve0Deposited"
  ]; 
  repeated string Reserve1Deposited = 2[
      (gogoproto.moretags)   = "yaml:\"reserve1Deposited\"",
      (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
      (gogoproto.nullable)   = false,
      (gogoproto.jsontag) = "reserve1Deposited"
  ]; 
}

message MsgWithdrawl {
  string creator = 1;
  string receiver = 2;
  string tokenA = 3;
  string tokenB = 4;
  repeated string sharesToRemove = 5  [
      (gogoproto.moretags)   = "yaml:\"sharesToRemove\"",
      (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
      (gogoproto.nullable)   = false,
      (gogoproto.jsontag) = "sharesToRemove"
  ]; 
  repeated int64 tickIndexesAToB = 6;
  repeated uint64 fees = 7;
  
}

message MsgWithdrawlResponse {
}

message MsgSwap {
  string creator = 1;
  string receiver = 2;
  string tokenIn = 3;
  string tokenOut = 4;
  string amountIn = 5 [
      (gogoproto.moretags)   = "yaml:\"amountIn\"",
      (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
      (gogoproto.nullable)   = false,
      (gogoproto.jsontag) = "amountIn"
  ];
}

message MsgSwapResponse {
   cosmos.base.v1beta1.Coin coinOut = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.jsontag) = "coinOut"
  ];
}

enum LimitOrderType{
  GOOD_TIL_CANCELLED = 0;
  FILL_OR_KILL = 1;
  IMMEDIATE_OR_CANCEL = 2;
  JUST_IN_TIME = 3;
  GOOD_TIL_TIME = 4;
}

message MsgPlaceLimitOrder {
  string creator = 1;
  string receiver = 2;
  string tokenIn = 3;
  string tokenOut = 4;
  int64 tickIndex = 5;
  string amountIn = 7 [
      (gogoproto.moretags)   = "yaml:\"amountIn\"",
      (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
      (gogoproto.nullable)   = false,
      (gogoproto.jsontag) = "amountIn"
  ];
  LimitOrderType orderType = 8;
  // expirationTime is only valid iff orderType == GOOD_TIL_TIME.
  google.protobuf.Timestamp expirationTime = 9 [
                                             (gogoproto.stdtime) = true,
                                             (gogoproto.nullable) = true
                                             ];
}

message MsgPlaceLimitOrderResponse {
  string trancheKey = 1;
}

message MsgWithdrawFilledLimitOrder {
  string creator = 1;
  string tokenIn = 2;
  string tokenOut = 3;
  int64 tickIndex = 4;
  string trancheKey = 5;
}

message MsgWithdrawFilledLimitOrderResponse {
}

message MsgCancelLimitOrder {
  string creator = 1;
  string tokenIn = 2;
  string tokenOut = 3;
  int64 tickIndex = 4;
  string trancheKey = 5;
}

message MsgCancelLimitOrderResponse {
}

// this line is used by starport scaffolding # proto/tx/message
