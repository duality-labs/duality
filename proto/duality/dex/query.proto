syntax = "proto3";
package dualitylabs.duality.dex;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "duality/dex/params.proto";
import "duality/dex/tokens.proto";
import "duality/dex/token_map.proto";
import "duality/dex/fee_tier.proto";
import "duality/dex/limit_order_tranche_user.proto";
import "duality/dex/limit_order_tranche.proto";
import "duality/dex/user_positions.proto";
import "duality/dex/deposit_record.proto";
import "duality/dex/tick_liquidity.proto";
import "duality/dex/filled_limit_order_tranche.proto";
import "duality/dex/pool_reserves.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/duality-labs/duality/x/dex/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/dualitylabs/duality/dex/params";
  }

// Queries a Tokens by id.
	rpc Tokens(QueryGetTokensRequest) returns (QueryGetTokensResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/tokens/{id}";
	}

	// Queries a list of Tokens items.
	rpc TokensAll(QueryAllTokensRequest) returns (QueryAllTokensResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/tokens";
	}

// Queries a TokenMap by index.
	rpc TokenMap(QueryGetTokenMapRequest) returns (QueryGetTokenMapResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/token_map/{address}";
	}

	// Queries a list of TokenMap items.
	rpc TokenMapAll(QueryAllTokenMapRequest) returns (QueryAllTokenMapResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/token_map";
	}

// Queries a FeeTier by id.
	rpc FeeTier(QueryGetFeeTierRequest) returns (QueryGetFeeTierResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/fee_tier/{id}";
	}

	// Queries a list of FeeTier items.
	rpc FeeTierAll(QueryAllFeeTierRequest) returns (QueryAllFeeTierResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/fee_tier";
	}

  // Queries a LimitOrderTrancheUser by index.
	rpc LimitOrderTrancheUser(QueryGetLimitOrderTrancheUserRequest) returns (QueryGetLimitOrderTrancheUserResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/limit_order_tranche_user/{pairId}/{token}/{tickIndex}/{trancheKey}/{address}";
	}

	// Queries a list of LimitOrderTrancheMap items.
	rpc LimitOrderTrancheUserAll(QueryAllLimitOrderTrancheUserRequest) returns (QueryAllLimitOrderTrancheUserResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/limit_order_tranche_user";
	}

  // Queries a LimitOrderTranche by index.
 rpc LimitOrderTranche(QueryGetLimitOrderTrancheRequest) returns (QueryGetLimitOrderTrancheResponse) {
  	option (google.api.http).get = "/dualitylabs/duality/dex/limit_order_tranche/{pairId}/{tokenIn}/{tickIndex}/{trancheKey}";
  }

  // Queries a list of LimitOrderTranche items for a given pairId / TokenIn combination.
  rpc LimitOrderTrancheAll(QueryAllLimitOrderTrancheRequest) returns (QueryAllLimitOrderTrancheResponse) {
  	option (google.api.http).get = "/dualitylabs/duality/dex/limit_order_tranche/{pairId}/{tokenIn}";
  }

// Queries a list of GetUserPositions items.
	rpc GetUserPositions(QueryGetUserPositionsRequest) returns (QueryGetUserPositionsResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/user/positions/{address}";
	}

// Queries a list of UserDeposits items.
	rpc UserDepositsAll(QueryAllUserDepositsRequest) returns (QueryAllUserDepositsResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/user/deposits/{address}";
	}

// Queries a list of UserLimitOrders items.
	rpc UserLimitOrdersAll(QueryAllUserLimitOrdersRequest) returns (QueryAllUserLimitOrdersResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/user/limit_orders/{address}";
	}

	// Queries a list of TickLiquidity items.
	rpc TickLiquidityAll(QueryAllTickLiquidityRequest) returns (QueryAllTickLiquidityResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/tick_liquidity/{pairId}/{tokenIn}";
	}

// Queries a FilledLimitOrderTranche by index.
	rpc FilledLimitOrderTranche(QueryGetFilledLimitOrderTrancheRequest) returns (QueryGetFilledLimitOrderTrancheResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/filled_limit_order_tranche/{pairId}/{tokenIn}/{tickIndex}/{trancheKey}";
	}

	// Queries a list of FilledLimitOrderTranche items.
	rpc FilledLimitOrderTrancheAll(QueryAllFilledLimitOrderTrancheRequest) returns (QueryAllFilledLimitOrderTrancheResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/filled_limit_order_tranche";
	}

// Queries a list of PoolReserves items.
	rpc PoolReservesAll(QueryAllPoolReservesRequest) returns (QueryAllPoolReservesResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/pool_reserves/{pairId}/{tokenIn}";
	}

  // Queries a PoolReserve by index
  rpc PoolReserves(QueryGetPoolReservesRequest) returns (QueryGetPoolReservesResponse) {
		option (google.api.http).get = "/dualitylabs/duality/dex/pool_reserves/{pairId}/{tokenIn}/{tickIndex}/{fee}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetTokensRequest {
	uint64 id = 1;
}

message QueryGetTokensResponse {
	Tokens Tokens = 1 [(gogoproto.nullable) = false];
}

message QueryAllTokensRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTokensResponse {
	repeated Tokens Tokens = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTokenMapRequest {
	  string address = 1;

}

message QueryGetTokenMapResponse {
	TokenMap tokenMap = 1 [(gogoproto.nullable) = false];
}

message QueryAllTokenMapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTokenMapResponse {
	repeated TokenMap tokenMap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetFeeTierRequest {
	uint64 id = 1;
}

message QueryGetFeeTierResponse {
	FeeTier FeeTier = 1 [(gogoproto.nullable) = false];
}

message QueryAllFeeTierRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFeeTierResponse {
	repeated FeeTier FeeTier = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLimitOrderTrancheUserRequest {
  string pairId = 1;
  int64 tickIndex =2;
  string token = 3;
    uint64 trancheKey = 4;
  string address = 5;

}

message QueryGetLimitOrderTrancheUserResponse {
	LimitOrderTrancheUser LimitOrderTrancheUser = 1 [(gogoproto.nullable) = false];
}

message QueryAllLimitOrderTrancheUserRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLimitOrderTrancheUserResponse {
	repeated LimitOrderTrancheUser LimitOrderTrancheUser = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLimitOrderTrancheRequest {
  string pairId = 1;
  int64 tickIndex =2;
  string tokenIn = 3;
  uint64 trancheKey = 4;

}

message QueryGetLimitOrderTrancheResponse {
	LimitOrderTranche LimitOrderTranche = 1 [(gogoproto.nullable) = false];
}

message QueryAllLimitOrderTrancheRequest {
  string pairId = 1;
  string tokenIn = 2;
	cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryAllLimitOrderTrancheResponse {
	repeated LimitOrderTranche LimitOrderTranche = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetUserPositionsRequest {
  string address = 1;
}

message QueryGetUserPositionsResponse {
  UserPositions UserPositions = 1 [(gogoproto.nullable) = false];
}

message QueryAllUserDepositsRequest {
  string address = 1;
}

message QueryAllUserDepositsResponse {
  repeated DepositRecord Deposits = 1 [(gogoproto.nullable) = false];
}

message QueryAllUserLimitOrdersRequest {
  string address = 1;
}

message QueryAllUserLimitOrdersResponse {
  repeated LimitOrderTrancheUser limitOrders = 1 [(gogoproto.nullable) = false];
}

message QueryAllTickLiquidityRequest {
  string pairId = 1;
  string tokenIn = 2;
	cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryAllTickLiquidityResponse {
	repeated TickLiquidity tickLiquidity = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetFilledLimitOrderTrancheRequest {
	string pairId = 1;
  string tokenIn = 2;
  int64 tickIndex = 3;
  uint64 trancheKey = 4;

}

message QueryGetFilledLimitOrderTrancheResponse {
	FilledLimitOrderTranche filledLimitOrderTranche = 1 [(gogoproto.nullable) = false];
}

message QueryAllFilledLimitOrderTrancheRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFilledLimitOrderTrancheResponse {
	repeated FilledLimitOrderTranche filledLimitOrderTranche = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllPoolReservesRequest {
  string pairId = 1;
  string tokenIn = 2;
cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryAllPoolReservesResponse {
  repeated PoolReserves poolReserves = 1 [(gogoproto.nullable) = false];
cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPoolReservesRequest {
  string pairId = 1;
  string tokenIn = 2;
  int64 tickIndex =3;
  uint64 fee = 4;

}

message QueryGetPoolReservesResponse {
	PoolReserves poolReserves = 1 [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
