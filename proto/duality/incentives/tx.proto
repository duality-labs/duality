syntax = "proto3";
package duality.incentives;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "duality/incentives/gauge.proto";
import "duality/incentives/stake.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/duality-labs/duality/x/incentives/types";

service Msg {
  // Create an incentive program
  rpc CreateGauge(MsgCreateGauge) returns (MsgCreateGaugeResponse);
  // Add rewards to an existing incentives program
  rpc AddToGauge(MsgAddToGauge) returns (MsgAddToGaugeResponse);
  // Deposit LP tokens to the module, qualifying for rewards from gauges
  rpc Stake(MsgStake) returns (MsgStakeResponse);
  // Withdraw LP tokens from the module, forfeiting future rewards from gauges
  rpc Unstake(MsgUnstake) returns (MsgUnstakeResponse);
}

// MsgCreateGauge creates a gague to distribute rewards to users
message MsgCreateGauge {
  // is_perpetual shows if it's a perpetual or non-perpetual gauge
  // Non-perpetual gauges distribute their tokens equally per epoch while the
  // gauge is in the active period. Perpetual gauges distribute all their tokens
  // at a single time and only distribute their tokens again once the gauge is
  // refilled
  bool is_perpetual = 1;

  // owner is the address of gauge creator, should be the module authority
  string owner = 2 [ (gogoproto.moretags) = "yaml:\"owner\"" ];

  // distribute_to show which lock the gauge should distribute to by time
  // duration or by timestamp
  QueryCondition distribute_to = 3
      [ (gogoproto.nullable) = false ];
  // coins are coin(s) to be distributed by the gauge
  repeated cosmos.base.v1beta1.Coin coins = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  // start_time is the distribution start time
  google.protobuf.Timestamp start_time = 5 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"timestamp\""
  ];
  // num_epochs_paid_over is the number of epochs distribution will be completed
  // over
  uint64 num_epochs_paid_over = 6;

  // pricing_tick is the price that liquidity within the gauge range will be priced at
  int64 pricing_tick = 7;
}
message MsgCreateGaugeResponse {}

// MsgAddToGauge adds coins to a previously created gauge
message MsgAddToGauge {
  // owner is the gauge owner's address
  string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  // gauge_id is the ID of gauge that rewards are getting added to
  uint64 gauge_id = 2;
  // rewards are the coin(s) to add to gauge
  repeated cosmos.base.v1beta1.Coin rewards = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}
message MsgAddToGaugeResponse {}

message MsgStake {
  string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  repeated cosmos.base.v1beta1.Coin coins = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}
message MsgStakeResponse { uint64 ID = 1; }

message MsgUnstake {
  message UnstakeDescriptor {
    uint64 ID = 1;
    repeated cosmos.base.v1beta1.Coin coins = 2 [
      (gogoproto.nullable) = false,
      (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
    ];
  }
  string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];

  // If unstake is left empty, this is interpreted as "unstake all"
  repeated UnstakeDescriptor unstakes = 2;
}
message MsgUnstakeResponse {}