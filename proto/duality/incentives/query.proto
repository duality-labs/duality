syntax = "proto3";
package duality.incentives;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "duality/incentives/gauge.proto";
import "duality/incentives/stake.proto";
import "google/protobuf/timestamp.proto";
import "duality/incentives/params.proto";

option go_package = "github.com/duality-labs/duality/x/incentives/types";

// Query defines the gRPC querier service
service Query {
  // GetModuleStatus returns a rundown of coins in the module and their status
  rpc GetModuleStatus(GetModuleStatusRequest)
      returns (GetModuleStatusResponse) {
    option (google.api.http).get =
        "/duality/incentives/v1beta1/get_module_status";
  }

  // GetGaugeByID returns a gauge by its ID
  rpc GetGaugeByID(GetGaugeByIDRequest) returns (GetGaugeByIDResponse) {
    option (google.api.http).get =
        "/duality/incentives/v1beta1/get_gauge_by_id/{id}";
  }

  // GetGauges returns gauges according to the filter provided
  rpc GetGauges(GetGaugesRequest) returns (GetGaugesResponse) {
    option (google.api.http).get = "/duality/incentives/v1beta1/get_gauges";
  }

  // GetStakeByID returns a stake by its ID
  rpc GetStakeByID(GetStakeByIDRequest) returns (GetStakeByIDResponse) {
    option (google.api.http).get =
        "/dualitylabs/duality/incentives/get_stake_by_id/{stake_id}";
  }

  // GetStakes returns stakes by the filter provided. At least one filter must be provided.
  rpc GetStakes(GetStakesRequest) returns (GetStakesResponse) {
    option (google.api.http).get =
        "/dualitylabs/duality/incentives/get_stakes";
  }

  // GetFutureRewardsEstimate returns an estimate of the rewards from now until a specified
  // time in the future. The requestor either provides an address or a set of locks
  // for which they want to find the associated rewards.
  rpc GetFutureRewardEstimate(GetFutureRewardEstimateRequest) returns (GetFutureRewardEstimateResponse) {
    option (google.api.http).get =
        "/duality/incentives/v1beta1/get_future_rewards_estimate/{owner}";
  }
}

message GetModuleStatusRequest {}
message GetModuleStatusResponse {
  // Coins that have yet to be distributed
  repeated cosmos.base.v1beta1.Coin reward_coins = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin staked_coins = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  Params params = 3 [ (gogoproto.nullable) = false ];
}

message GetGaugeByIDRequest {
  // Gague ID being queried
  uint64 id = 1;
}
message GetGaugeByIDResponse {
  // Gauge that corresponds to provided gague ID
  Gauge gauge = 1;
}

enum StatusFilter {
  ACTIVE_UPCOMING = 0;
  ACTIVE = 1;
  UPCOMING = 2;
  FINISHED = 3;
}

message GetGaugesRequest {
  // Pagination defines pagination for the request

  StatusFilter status_filter = 1;
  string denom = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}
message GetGaugesResponse {
  // Upcoming and active gauges
  repeated Gauge gauges = 1;
  // Pagination defines pagination for the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message GetStakeByIDRequest {
  uint64 stake_id = 1;
};
message GetStakeByIDResponse {
  Stake stake = 1;
};

enum UnlockingFilter {
  ALL = 0;
  UNLOCKING = 1;
  NOT_UNLOCKING = 2;
}

message GetStakesRequest {
  UnlockingFilter unlocking_filter = 1;
  string owner = 2 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
};
message GetStakesResponse {
  repeated Stake stakes = 1;
};

message GetFutureRewardEstimateRequest {
  // Address that is being queried for future estimated rewards
  string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  // Stake IDs included in future reward estimation
  repeated uint64 stake_ids = 2;
  // Upper time limit of reward estimation
  // Lower limit is current epoch
  int64 end_epoch = 3;
}
message GetFutureRewardEstimateResponse {
  // Estimated coin rewards that will be recieved at provided address
  // from specified locks between current time and end epoch
  repeated cosmos.base.v1beta1.Coin coins = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}
