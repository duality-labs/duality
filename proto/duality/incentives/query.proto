syntax = "proto3";
package duality.incentives;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "duality/incentives/gauge.proto";
import "duality/incentives/stake.proto";
import "duality/incentives/params.proto";

option go_package = "github.com/duality-labs/duality/x/incentives/types";

// Query defines the gRPC querier service
service Query {
  // GetModuleStatus returns a rundown of coins in the module and their status
  rpc GetModuleStatus(GetModuleStatusRequest)
      returns (GetModuleStatusResponse) {
    option (google.api.http).get =
        "/duality/incentives/v1beta1/module_status";
  }

  // GetGaugeByID returns a gauge by its ID
  rpc GetGaugeByID(GetGaugeByIDRequest) returns (GetGaugeByIDResponse) {
    option (google.api.http).get =
        "/duality/incentives/v1beta1/gauges/{id}";
  }

  // GetGauges returns gauges according to the filter provided
  rpc GetGauges(GetGaugesRequest) returns (GetGaugesResponse) {
    option (google.api.http).get = "/duality/incentives/v1beta1/gauges";
  }

  // GetStakeByID returns a stake by its ID
  rpc GetStakeByID(GetStakeByIDRequest) returns (GetStakeByIDResponse) {
    option (google.api.http).get =
        "/duality/incentives/stakes/{stake_id}";
  }

  // GetStakes returns stakes by the filter provided. At least one filter must be provided.
  rpc GetStakes(GetStakesRequest) returns (GetStakesResponse) {
    option (google.api.http).get =
        "/duality/incentives/stakes";
  }

  // GetFutureRewardsEstimate returns an estimate of the rewards from now until a specified
  // time in the future. The requestor either provides an address or a set of locks
  // for which they want to find the associated rewards.
  rpc GetFutureRewardEstimate(GetFutureRewardEstimateRequest) returns (GetFutureRewardEstimateResponse) {
    option (google.api.http).get =
        "/duality/incentives/v1beta1/future_rewards_estimate/{owner}";
  }

  // GetAccountHistory returns the total accumulated rewards per denom for a given user.
  rpc GetAccountHistory(GetAccountHistoryRequest) returns (GetAccountHistoryResponse) {
    option (google.api.http).get =
        "/duality/incentives/v1beta1/account_history/{account}";
  }

  // Returns the total amount of value currently qualifying for the gauge. This is useful for calculating
  // the prospective future rewards of staking.
  rpc GetGaugeQualifyingValue(GetGaugeQualifyingValueRequest) returns (GetGaugeQualifyingValueResponse) {
    option (google.api.http).get =
        "/duality/incentives/v1beta1/get_gauge_qualifying_value/{id}";
  }
}

message GetModuleStatusRequest {}
message GetModuleStatusResponse {
  // Coins that have yet to be distributed
  repeated cosmos.base.v1beta1.Coin reward_coins = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin staked_coins = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  Params params = 3 [ (gogoproto.nullable) = false ];
}

message GetGaugeByIDRequest {
  // Gague ID being queried
  uint64 id = 1;
}
message GetGaugeByIDResponse {
  // Gauge that corresponds to provided gague ID
  Gauge gauge = 1;
}

message GetGaugeQualifyingValueRequest {
  // Gague ID being queried
  uint64 id = 1;
}
message GetGaugeQualifyingValueResponse {
  // The amount of value at the gauge's pricing tick currently qualifying for the gauge.
  uint64 qualifying_value = 1;
}

enum GaugeStatus {
  ACTIVE_UPCOMING = 0;
  ACTIVE = 1;
  UPCOMING = 2;
  FINISHED = 3;
}

message GetGaugesRequest {
  // Pagination defines pagination for the request

  GaugeStatus status = 1;
  string denom = 2;
}
message GetGaugesResponse {
  // Upcoming and active gauges
  repeated Gauge gauges = 1;
}

message GetStakeByIDRequest {
  uint64 stake_id = 1;
};
message GetStakeByIDResponse {
  Stake stake = 1;
};

message GetStakesRequest {
  string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
};

message GetStakesResponse {
  repeated Stake stakes = 1;
};

message GetFutureRewardEstimateRequest {
  // Address that is being queried for future estimated rewards
  string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  // Stake IDs included in future reward estimation
  repeated uint64 stake_ids = 2;
  // Determines upper time limit of reward estimation
  // reward estimation goes up to current_epoch + num_epochs
  int64 num_epochs = 3;
}
message GetFutureRewardEstimateResponse {
  // Estimated coin rewards that will be recieved at provided address
  // from specified locks between current time and end epoch
  repeated cosmos.base.v1beta1.Coin coins = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message GetAccountHistoryRequest {
  // Address that is being queried for account history
  string account = 1 [ (gogoproto.moretags) = "yaml:\"account\"" ];
}
message GetAccountHistoryResponse {
  // Gauge rewards that have been distributed to this address to date
  repeated cosmos.base.v1beta1.Coin coins = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}
