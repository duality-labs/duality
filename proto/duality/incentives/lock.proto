syntax = "proto3";
package duality.incentives;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "duality/dex/pair_id.proto";

option go_package = "github.com/duality-labs/duality/x/incentives/types";

// Lock is a single lock unit by period defined by the x/lockup module.
// It's a record of a locked coin at a specific time. It stores owner, duration,
// unlock time and the number of coins locked. A state of a period lock is
// created upon lock creation, and deleted once the lock has been matured after
// the `duration` has passed since unbonding started.
message Lock {
  // ID is the unique id of the lock.
  // The ID of the lock is decided upon lock creation, incrementing by 1 for
  // every lock.
  uint64 ID = 1;
  // Owner is the account address of the lock owner.
  // Only the owner can modify the state of the lock.
  string owner = 2 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  // Duration is the time needed for a lock to mature after unlocking has
  // started.
  google.protobuf.Duration duration = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "duration,omitempty",
    (gogoproto.moretags) = "yaml:\"duration\""
  ];
  // EndTime refers to the time at which the lock would mature and get deleted.
  // This value is first initialized when an unlock has started for the lock,
  // end time being block time + duration.
  google.protobuf.Timestamp end_time = 4 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"end_time\""
  ];
  // Coins are the tokens locked within the lock, kept in the module account.
  repeated cosmos.base.v1beta1.Coin coins = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// QueryCondition is a struct used for querying locks upon different conditions.
message QueryCondition {
  // PairID represents the token pair we are looking to lock up
  dualitylabs.duality.dex.PairID pairID = 1;

  // Start tick inclusive
  int64 startTick = 2;

  // End tick exclusive
  int64 endTick = 3;

  // // Timestamp is used by locks started before the specified duration.
  // // Timestamp field must not be nil when the lock query type is `ByLockTime`.
  // // Querying locks with timestamp is currently not implemented.
  // google.protobuf.Timestamp timestamp = 4 [
  //   (gogoproto.stdtime) = true,
  //   (gogoproto.nullable) = false,
  //   (gogoproto.moretags) = "yaml:\"timestamp\""
  // ];
}
